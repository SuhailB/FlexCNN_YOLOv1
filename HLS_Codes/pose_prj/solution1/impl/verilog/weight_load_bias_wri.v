// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module weight_load_bias_wri (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        bias_burst_buf_V_address0,
        bias_burst_buf_V_ce0,
        bias_burst_buf_V_q0,
        fifo_bias_V_V_din,
        fifo_bias_V_V_full_n,
        fifo_bias_V_V_write,
        inst1_V,
        inst3_V,
        in_num_iter
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] bias_burst_buf_V_address0;
output   bias_burst_buf_V_ce0;
input  [511:0] bias_burst_buf_V_q0;
output  [255:0] fifo_bias_V_V_din;
input   fifo_bias_V_V_full_n;
output   fifo_bias_V_V_write;
input  [191:0] inst1_V;
input  [191:0] inst3_V;
input  [31:0] in_num_iter;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg bias_burst_buf_V_ce0;
reg fifo_bias_V_V_write;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    fifo_bias_V_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_266;
reg   [0:0] exitcond_reg_266_pp0_iter2_reg;
reg   [12:0] i_op_assign_reg_120;
wire   [31:0] LAYER_IN_NUM_V_fu_141_p1;
reg   [31:0] LAYER_IN_NUM_V_reg_243;
wire   [0:0] tmp_fu_155_p3;
wire   [32:0] ret_V_fu_171_p2;
reg   [32:0] ret_V_reg_252;
wire   [0:0] tmp_11_fu_180_p2;
wire    ap_CS_fsm_state2;
reg   [12:0] tmp_12_reg_261;
wire   [0:0] exitcond_fu_194_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_reg_266_pp0_iter1_reg;
wire   [12:0] oo_fu_199_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] bus_b_offset_fu_205_p1;
reg   [0:0] bus_b_offset_reg_275;
reg   [0:0] bus_b_offset_reg_275_pp0_iter1_reg;
reg   [0:0] bus_b_offset_reg_275_pp0_iter2_reg;
reg   [511:0] bus_b_data_V_reg_284;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg   [255:0] ap_phi_mux_tmp_V_phi_fu_134_p4;
wire   [255:0] ap_phi_reg_pp0_iter3_tmp_V_reg_131;
wire   [255:0] fifo_b_data_V_1_fu_224_p1;
wire   [63:0] tmp_14_fu_219_p1;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] LAYER_IN_NUM_T_V_fu_145_p4;
wire   [32:0] lhs_V_fu_163_p1;
wire   [32:0] rhs_V_fu_167_p1;
wire   [32:0] tmp_s_fu_177_p1;
wire   [11:0] bus_b_idx_fu_209_p4;
wire    ap_CS_fsm_state7;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_49;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((tmp_11_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((tmp_11_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_194_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_op_assign_reg_120 <= oo_fu_199_p2;
    end else if (((tmp_11_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_op_assign_reg_120 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        LAYER_IN_NUM_V_reg_243 <= LAYER_IN_NUM_V_fu_141_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_266_pp0_iter1_reg == 1'd0))) begin
        bus_b_data_V_reg_284 <= bias_burst_buf_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_194_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bus_b_offset_reg_275 <= bus_b_offset_fu_205_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bus_b_offset_reg_275_pp0_iter1_reg <= bus_b_offset_reg_275;
        exitcond_reg_266 <= exitcond_fu_194_p2;
        exitcond_reg_266_pp0_iter1_reg <= exitcond_reg_266;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        bus_b_offset_reg_275_pp0_iter2_reg <= bus_b_offset_reg_275_pp0_iter1_reg;
        exitcond_reg_266_pp0_iter2_reg <= exitcond_reg_266_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (tmp_fu_155_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ret_V_reg_252 <= ret_V_fu_171_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_11_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_12_reg_261 <= {{inst3_V[95:83]}};
    end
end

always @ (*) begin
    if ((exitcond_fu_194_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_49)) begin
        if ((bus_b_offset_reg_275_pp0_iter2_reg == 1'd0)) begin
            ap_phi_mux_tmp_V_phi_fu_134_p4 = fifo_b_data_V_1_fu_224_p1;
        end else if ((bus_b_offset_reg_275_pp0_iter2_reg == 1'd1)) begin
            ap_phi_mux_tmp_V_phi_fu_134_p4 = {{bus_b_data_V_reg_284[511:256]}};
        end else begin
            ap_phi_mux_tmp_V_phi_fu_134_p4 = ap_phi_reg_pp0_iter3_tmp_V_reg_131;
        end
    end else begin
        ap_phi_mux_tmp_V_phi_fu_134_p4 = ap_phi_reg_pp0_iter3_tmp_V_reg_131;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        bias_burst_buf_V_ce0 = 1'b1;
    end else begin
        bias_burst_buf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_266_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        fifo_bias_V_V_blk_n = fifo_bias_V_V_full_n;
    end else begin
        fifo_bias_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_266_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        fifo_bias_V_V_write = 1'b1;
    end else begin
        fifo_bias_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (tmp_fu_155_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if (((ap_start == 1'b1) & (tmp_fu_155_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_11_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_fu_194_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((exitcond_fu_194_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LAYER_IN_NUM_T_V_fu_145_p4 = {{inst3_V[79:64]}};

assign LAYER_IN_NUM_V_fu_141_p1 = inst1_V[31:0];

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((exitcond_reg_266_pp0_iter2_reg == 1'd0) & (fifo_bias_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((exitcond_reg_266_pp0_iter2_reg == 1'd0) & (fifo_bias_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((exitcond_reg_266_pp0_iter2_reg == 1'd0) & (fifo_bias_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter3 = ((exitcond_reg_266_pp0_iter2_reg == 1'd0) & (fifo_bias_V_V_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_49 = ((exitcond_reg_266_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter3_tmp_V_reg_131 = 'bx;

assign bias_burst_buf_V_address0 = tmp_14_fu_219_p1;

assign bus_b_idx_fu_209_p4 = {{i_op_assign_reg_120[12:1]}};

assign bus_b_offset_fu_205_p1 = i_op_assign_reg_120[0:0];

assign exitcond_fu_194_p2 = ((i_op_assign_reg_120 == tmp_12_reg_261) ? 1'b1 : 1'b0);

assign fifo_b_data_V_1_fu_224_p1 = bus_b_data_V_reg_284[255:0];

assign fifo_bias_V_V_din = ap_phi_mux_tmp_V_phi_fu_134_p4;

assign lhs_V_fu_163_p1 = in_num_iter;

assign oo_fu_199_p2 = (i_op_assign_reg_120 + 13'd1);

assign ret_V_fu_171_p2 = (lhs_V_fu_163_p1 + rhs_V_fu_167_p1);

assign rhs_V_fu_167_p1 = LAYER_IN_NUM_T_V_fu_145_p4;

assign tmp_11_fu_180_p2 = ((ret_V_reg_252 < tmp_s_fu_177_p1) ? 1'b1 : 1'b0);

assign tmp_14_fu_219_p1 = bus_b_idx_fu_209_p4;

assign tmp_fu_155_p3 = inst3_V[32'd2];

assign tmp_s_fu_177_p1 = LAYER_IN_NUM_V_reg_243;

endmodule //weight_load_bias_wri
