// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cin_load_ddr_read (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_global_cin_V_AWVALID,
        m_axi_global_cin_V_AWREADY,
        m_axi_global_cin_V_AWADDR,
        m_axi_global_cin_V_AWID,
        m_axi_global_cin_V_AWLEN,
        m_axi_global_cin_V_AWSIZE,
        m_axi_global_cin_V_AWBURST,
        m_axi_global_cin_V_AWLOCK,
        m_axi_global_cin_V_AWCACHE,
        m_axi_global_cin_V_AWPROT,
        m_axi_global_cin_V_AWQOS,
        m_axi_global_cin_V_AWREGION,
        m_axi_global_cin_V_AWUSER,
        m_axi_global_cin_V_WVALID,
        m_axi_global_cin_V_WREADY,
        m_axi_global_cin_V_WDATA,
        m_axi_global_cin_V_WSTRB,
        m_axi_global_cin_V_WLAST,
        m_axi_global_cin_V_WID,
        m_axi_global_cin_V_WUSER,
        m_axi_global_cin_V_ARVALID,
        m_axi_global_cin_V_ARREADY,
        m_axi_global_cin_V_ARADDR,
        m_axi_global_cin_V_ARID,
        m_axi_global_cin_V_ARLEN,
        m_axi_global_cin_V_ARSIZE,
        m_axi_global_cin_V_ARBURST,
        m_axi_global_cin_V_ARLOCK,
        m_axi_global_cin_V_ARCACHE,
        m_axi_global_cin_V_ARPROT,
        m_axi_global_cin_V_ARQOS,
        m_axi_global_cin_V_ARREGION,
        m_axi_global_cin_V_ARUSER,
        m_axi_global_cin_V_RVALID,
        m_axi_global_cin_V_RREADY,
        m_axi_global_cin_V_RDATA,
        m_axi_global_cin_V_RLAST,
        m_axi_global_cin_V_RID,
        m_axi_global_cin_V_RUSER,
        m_axi_global_cin_V_RRESP,
        m_axi_global_cin_V_BVALID,
        m_axi_global_cin_V_BREADY,
        m_axi_global_cin_V_BRESP,
        m_axi_global_cin_V_BID,
        m_axi_global_cin_V_BUSER,
        global_cin_V_offset,
        cin_burst_buf_V_address0,
        cin_burst_buf_V_ce0,
        cin_burst_buf_V_we0,
        cin_burst_buf_V_d0,
        LAYER_IN_H_HW,
        LAYER_IN_W_HW,
        LAYER_IN_NUM_T,
        LAYER_IN_H_T,
        LAYER_IN_W_T,
        FILTER_S,
        cin_offset,
        in_num_iter,
        in_h_iter,
        in_w_iter,
        num_tile,
        change,
        max_pool
);

parameter    ap_ST_fsm_state1 = 74'd1;
parameter    ap_ST_fsm_state2 = 74'd2;
parameter    ap_ST_fsm_state3 = 74'd4;
parameter    ap_ST_fsm_state4 = 74'd8;
parameter    ap_ST_fsm_state5 = 74'd16;
parameter    ap_ST_fsm_state6 = 74'd32;
parameter    ap_ST_fsm_state7 = 74'd64;
parameter    ap_ST_fsm_state8 = 74'd128;
parameter    ap_ST_fsm_state9 = 74'd256;
parameter    ap_ST_fsm_state10 = 74'd512;
parameter    ap_ST_fsm_state11 = 74'd1024;
parameter    ap_ST_fsm_state12 = 74'd2048;
parameter    ap_ST_fsm_state13 = 74'd4096;
parameter    ap_ST_fsm_state14 = 74'd8192;
parameter    ap_ST_fsm_state15 = 74'd16384;
parameter    ap_ST_fsm_state16 = 74'd32768;
parameter    ap_ST_fsm_state17 = 74'd65536;
parameter    ap_ST_fsm_state18 = 74'd131072;
parameter    ap_ST_fsm_state19 = 74'd262144;
parameter    ap_ST_fsm_state20 = 74'd524288;
parameter    ap_ST_fsm_state21 = 74'd1048576;
parameter    ap_ST_fsm_state22 = 74'd2097152;
parameter    ap_ST_fsm_state23 = 74'd4194304;
parameter    ap_ST_fsm_pp0_stage0 = 74'd8388608;
parameter    ap_ST_fsm_state27 = 74'd16777216;
parameter    ap_ST_fsm_state28 = 74'd33554432;
parameter    ap_ST_fsm_state29 = 74'd67108864;
parameter    ap_ST_fsm_state30 = 74'd134217728;
parameter    ap_ST_fsm_state31 = 74'd268435456;
parameter    ap_ST_fsm_state32 = 74'd536870912;
parameter    ap_ST_fsm_state33 = 74'd1073741824;
parameter    ap_ST_fsm_state34 = 74'd2147483648;
parameter    ap_ST_fsm_state35 = 74'd4294967296;
parameter    ap_ST_fsm_state36 = 74'd8589934592;
parameter    ap_ST_fsm_state37 = 74'd17179869184;
parameter    ap_ST_fsm_state38 = 74'd34359738368;
parameter    ap_ST_fsm_state39 = 74'd68719476736;
parameter    ap_ST_fsm_state40 = 74'd137438953472;
parameter    ap_ST_fsm_state41 = 74'd274877906944;
parameter    ap_ST_fsm_state42 = 74'd549755813888;
parameter    ap_ST_fsm_state43 = 74'd1099511627776;
parameter    ap_ST_fsm_pp1_stage0 = 74'd2199023255552;
parameter    ap_ST_fsm_state116 = 74'd4398046511104;
parameter    ap_ST_fsm_state117 = 74'd8796093022208;
parameter    ap_ST_fsm_state118 = 74'd17592186044416;
parameter    ap_ST_fsm_state119 = 74'd35184372088832;
parameter    ap_ST_fsm_state120 = 74'd70368744177664;
parameter    ap_ST_fsm_state121 = 74'd140737488355328;
parameter    ap_ST_fsm_state122 = 74'd281474976710656;
parameter    ap_ST_fsm_state123 = 74'd562949953421312;
parameter    ap_ST_fsm_state124 = 74'd1125899906842624;
parameter    ap_ST_fsm_state125 = 74'd2251799813685248;
parameter    ap_ST_fsm_state126 = 74'd4503599627370496;
parameter    ap_ST_fsm_state127 = 74'd9007199254740992;
parameter    ap_ST_fsm_state128 = 74'd18014398509481984;
parameter    ap_ST_fsm_state129 = 74'd36028797018963968;
parameter    ap_ST_fsm_state130 = 74'd72057594037927936;
parameter    ap_ST_fsm_state131 = 74'd144115188075855872;
parameter    ap_ST_fsm_state132 = 74'd288230376151711744;
parameter    ap_ST_fsm_state133 = 74'd576460752303423488;
parameter    ap_ST_fsm_state134 = 74'd1152921504606846976;
parameter    ap_ST_fsm_state135 = 74'd2305843009213693952;
parameter    ap_ST_fsm_state136 = 74'd4611686018427387904;
parameter    ap_ST_fsm_state137 = 74'd9223372036854775808;
parameter    ap_ST_fsm_state138 = 74'd18446744073709551616;
parameter    ap_ST_fsm_state139 = 74'd36893488147419103232;
parameter    ap_ST_fsm_state140 = 74'd73786976294838206464;
parameter    ap_ST_fsm_state141 = 74'd147573952589676412928;
parameter    ap_ST_fsm_state142 = 74'd295147905179352825856;
parameter    ap_ST_fsm_state143 = 74'd590295810358705651712;
parameter    ap_ST_fsm_state144 = 74'd1180591620717411303424;
parameter    ap_ST_fsm_state145 = 74'd2361183241434822606848;
parameter    ap_ST_fsm_pp2_stage0 = 74'd4722366482869645213696;
parameter    ap_ST_fsm_state149 = 74'd9444732965739290427392;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_global_cin_V_AWVALID;
input   m_axi_global_cin_V_AWREADY;
output  [63:0] m_axi_global_cin_V_AWADDR;
output  [0:0] m_axi_global_cin_V_AWID;
output  [31:0] m_axi_global_cin_V_AWLEN;
output  [2:0] m_axi_global_cin_V_AWSIZE;
output  [1:0] m_axi_global_cin_V_AWBURST;
output  [1:0] m_axi_global_cin_V_AWLOCK;
output  [3:0] m_axi_global_cin_V_AWCACHE;
output  [2:0] m_axi_global_cin_V_AWPROT;
output  [3:0] m_axi_global_cin_V_AWQOS;
output  [3:0] m_axi_global_cin_V_AWREGION;
output  [0:0] m_axi_global_cin_V_AWUSER;
output   m_axi_global_cin_V_WVALID;
input   m_axi_global_cin_V_WREADY;
output  [511:0] m_axi_global_cin_V_WDATA;
output  [63:0] m_axi_global_cin_V_WSTRB;
output   m_axi_global_cin_V_WLAST;
output  [0:0] m_axi_global_cin_V_WID;
output  [0:0] m_axi_global_cin_V_WUSER;
output   m_axi_global_cin_V_ARVALID;
input   m_axi_global_cin_V_ARREADY;
output  [63:0] m_axi_global_cin_V_ARADDR;
output  [0:0] m_axi_global_cin_V_ARID;
output  [31:0] m_axi_global_cin_V_ARLEN;
output  [2:0] m_axi_global_cin_V_ARSIZE;
output  [1:0] m_axi_global_cin_V_ARBURST;
output  [1:0] m_axi_global_cin_V_ARLOCK;
output  [3:0] m_axi_global_cin_V_ARCACHE;
output  [2:0] m_axi_global_cin_V_ARPROT;
output  [3:0] m_axi_global_cin_V_ARQOS;
output  [3:0] m_axi_global_cin_V_ARREGION;
output  [0:0] m_axi_global_cin_V_ARUSER;
input   m_axi_global_cin_V_RVALID;
output   m_axi_global_cin_V_RREADY;
input  [511:0] m_axi_global_cin_V_RDATA;
input   m_axi_global_cin_V_RLAST;
input  [0:0] m_axi_global_cin_V_RID;
input  [0:0] m_axi_global_cin_V_RUSER;
input  [1:0] m_axi_global_cin_V_RRESP;
input   m_axi_global_cin_V_BVALID;
output   m_axi_global_cin_V_BREADY;
input  [1:0] m_axi_global_cin_V_BRESP;
input  [0:0] m_axi_global_cin_V_BID;
input  [0:0] m_axi_global_cin_V_BUSER;
input  [57:0] global_cin_V_offset;
output  [12:0] cin_burst_buf_V_address0;
output   cin_burst_buf_V_ce0;
output   cin_burst_buf_V_we0;
output  [511:0] cin_burst_buf_V_d0;
input  [31:0] LAYER_IN_H_HW;
input  [31:0] LAYER_IN_W_HW;
input  [15:0] LAYER_IN_NUM_T;
input  [31:0] LAYER_IN_H_T;
input  [31:0] LAYER_IN_W_T;
input  [15:0] FILTER_S;
input  [31:0] cin_offset;
input  [31:0] in_num_iter;
input  [31:0] in_h_iter;
input  [31:0] in_w_iter;
input  [31:0] num_tile;
input   change;
input   max_pool;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_global_cin_V_ARVALID;
reg[63:0] m_axi_global_cin_V_ARADDR;
reg[31:0] m_axi_global_cin_V_ARLEN;
reg m_axi_global_cin_V_RREADY;
reg[12:0] cin_burst_buf_V_address0;
reg cin_burst_buf_V_ce0;
reg cin_burst_buf_V_we0;
reg[511:0] cin_burst_buf_V_d0;

(* fsm_encoding = "none" *) reg   [73:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    global_cin_V_blk_n_AR;
wire    ap_CS_fsm_state17;
reg    global_cin_V_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond2_reg_934;
wire    ap_CS_fsm_state139;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] exitcond7_reg_1144;
reg    ap_enable_reg_pp1_iter63;
wire    ap_block_pp1_stage0;
reg   [0:0] tmp_602_reg_1086;
reg    ap_enable_reg_pp1_iter70;
reg   [0:0] exitcond_flatten_reg_1011;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter69_reg;
reg   [25:0] indvar_reg_280;
reg   [25:0] indvar_reg_280_pp0_iter1_reg;
wire    ap_block_state24_pp0_stage0_iter0;
reg    ap_block_state25_pp0_stage0_iter1;
wire    ap_block_state26_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [57:0] indvar_flatten_reg_292;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state44_pp1_stage0_iter0;
wire    ap_block_state45_pp1_stage0_iter1;
wire    ap_block_state46_pp1_stage0_iter2;
wire    ap_block_state47_pp1_stage0_iter3;
wire    ap_block_state48_pp1_stage0_iter4;
wire    ap_block_state49_pp1_stage0_iter5;
wire    ap_block_state50_pp1_stage0_iter6;
wire    ap_block_state51_pp1_stage0_iter7;
wire    ap_block_state52_pp1_stage0_iter8;
wire    ap_block_state53_pp1_stage0_iter9;
wire    ap_block_state54_pp1_stage0_iter10;
wire    ap_block_state55_pp1_stage0_iter11;
wire    ap_block_state56_pp1_stage0_iter12;
wire    ap_block_state57_pp1_stage0_iter13;
wire    ap_block_state58_pp1_stage0_iter14;
wire    ap_block_state59_pp1_stage0_iter15;
wire    ap_block_state60_pp1_stage0_iter16;
wire    ap_block_state61_pp1_stage0_iter17;
wire    ap_block_state62_pp1_stage0_iter18;
wire    ap_block_state63_pp1_stage0_iter19;
wire    ap_block_state64_pp1_stage0_iter20;
wire    ap_block_state65_pp1_stage0_iter21;
wire    ap_block_state66_pp1_stage0_iter22;
wire    ap_block_state67_pp1_stage0_iter23;
wire    ap_block_state68_pp1_stage0_iter24;
wire    ap_block_state69_pp1_stage0_iter25;
wire    ap_block_state70_pp1_stage0_iter26;
wire    ap_block_state71_pp1_stage0_iter27;
wire    ap_block_state72_pp1_stage0_iter28;
wire    ap_block_state73_pp1_stage0_iter29;
wire    ap_block_state74_pp1_stage0_iter30;
wire    ap_block_state75_pp1_stage0_iter31;
wire    ap_block_state76_pp1_stage0_iter32;
wire    ap_block_state77_pp1_stage0_iter33;
wire    ap_block_state78_pp1_stage0_iter34;
wire    ap_block_state79_pp1_stage0_iter35;
wire    ap_block_state80_pp1_stage0_iter36;
wire    ap_block_state81_pp1_stage0_iter37;
wire    ap_block_state82_pp1_stage0_iter38;
wire    ap_block_state83_pp1_stage0_iter39;
wire    ap_block_state84_pp1_stage0_iter40;
wire    ap_block_state85_pp1_stage0_iter41;
wire    ap_block_state86_pp1_stage0_iter42;
wire    ap_block_state87_pp1_stage0_iter43;
wire    ap_block_state88_pp1_stage0_iter44;
wire    ap_block_state89_pp1_stage0_iter45;
wire    ap_block_state90_pp1_stage0_iter46;
wire    ap_block_state91_pp1_stage0_iter47;
wire    ap_block_state92_pp1_stage0_iter48;
wire    ap_block_state93_pp1_stage0_iter49;
wire    ap_block_state94_pp1_stage0_iter50;
wire    ap_block_state95_pp1_stage0_iter51;
wire    ap_block_state96_pp1_stage0_iter52;
wire    ap_block_state97_pp1_stage0_iter53;
wire    ap_block_state98_pp1_stage0_iter54;
wire    ap_block_state99_pp1_stage0_iter55;
wire    ap_block_state100_pp1_stage0_iter56;
wire    ap_block_state101_pp1_stage0_iter57;
wire    ap_block_state102_pp1_stage0_iter58;
wire    ap_block_state103_pp1_stage0_iter59;
wire    ap_block_state104_pp1_stage0_iter60;
wire    ap_block_state105_pp1_stage0_iter61;
wire    ap_block_state106_pp1_stage0_iter62;
wire    ap_block_state107_pp1_stage0_iter63;
reg    ap_sig_ioackin_m_axi_global_cin_V_ARREADY;
reg    ap_block_state107_io;
wire    ap_block_state108_pp1_stage0_iter64;
wire    ap_block_state109_pp1_stage0_iter65;
wire    ap_block_state110_pp1_stage0_iter66;
wire    ap_block_state111_pp1_stage0_iter67;
wire    ap_block_state112_pp1_stage0_iter68;
wire    ap_block_state113_pp1_stage0_iter69;
reg    ap_block_state114_pp1_stage0_iter70;
wire    ap_block_state115_pp1_stage0_iter71;
reg    ap_block_pp1_stage0_11001;
reg   [31:0] hh2_reg_304;
reg   [25:0] indvar2_reg_315;
reg   [25:0] indvar9_reg_326;
reg   [25:0] indvar9_reg_326_pp2_iter1_reg;
wire    ap_block_state146_pp2_stage0_iter0;
reg    ap_block_state147_pp2_stage0_iter1;
wire    ap_block_state148_pp2_stage0_iter2;
reg    ap_block_pp2_stage0_11001;
wire   [31:0] LAYER_IN_NUM_T_cast_fu_342_p1;
reg   [31:0] LAYER_IN_NUM_T_cast_reg_857;
wire   [0:0] brmerge_fu_364_p2;
wire   [0:0] or_cond2_fu_382_p2;
wire   [16:0] tmp4_fu_388_p2;
reg   [16:0] tmp4_reg_872;
wire  signed [31:0] grp_fu_370_p2;
reg  signed [31:0] tmp_399_reg_877;
wire    ap_CS_fsm_state7;
wire  signed [26:0] tmp_593_fu_400_p1;
reg  signed [26:0] tmp_593_reg_882;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_404_p2;
reg   [31:0] tmp_400_reg_892;
wire    ap_CS_fsm_state14;
wire   [26:0] grp_fu_411_p2;
reg   [26:0] tmp_403_reg_897;
reg   [27:0] tmp_reg_902;
wire    ap_CS_fsm_state15;
reg   [22:0] tmp_533_add_i32_shr_reg_907;
wire   [58:0] sum_fu_459_p2;
reg   [58:0] sum_reg_913;
wire    ap_CS_fsm_state16;
wire   [31:0] tmp_533_add_i32_shr_s_fu_475_p1;
wire   [26:0] tmp_533_add_i32_shr_1_fu_479_p1;
reg   [26:0] tmp_533_add_i32_shr_1_reg_929;
wire    ap_CS_fsm_state23;
wire   [0:0] exitcond2_fu_486_p2;
reg   [0:0] exitcond2_reg_934_pp0_iter1_reg;
wire   [25:0] indvar_next_fu_491_p2;
reg   [25:0] indvar_next_reg_938;
reg    ap_enable_reg_pp0_iter0;
reg   [511:0] global_cin_V_addr_re_reg_943;
wire  signed [31:0] tmp4_cast_fu_502_p1;
reg  signed [31:0] tmp4_cast_reg_948;
wire    ap_CS_fsm_state28;
wire  signed [31:0] tmp_414_fu_505_p2;
reg  signed [31:0] tmp_414_reg_953;
wire   [31:0] tmp_413_fu_518_p2;
reg   [31:0] tmp_413_reg_958;
wire    ap_CS_fsm_state34;
wire   [31:0] grp_fu_510_p2;
reg   [31:0] tmp_416_reg_963;
wire    ap_CS_fsm_state35;
wire  signed [17:0] tmp_596_fu_522_p1;
reg  signed [17:0] tmp_596_reg_968;
wire  signed [31:0] grp_fu_514_p2;
reg  signed [31:0] tmp6_reg_973;
wire    ap_CS_fsm_state36;
reg   [25:0] tmp_554_add_i32_shr_reg_978;
wire    ap_CS_fsm_state37;
wire   [57:0] cast3_fu_554_p1;
reg   [57:0] cast3_reg_990;
wire   [31:0] grp_fu_547_p2;
reg   [31:0] tmp_415_reg_996;
wire    ap_CS_fsm_state43;
wire   [31:0] tmp_422_fu_563_p1;
reg   [31:0] tmp_422_reg_1001;
wire   [57:0] grp_fu_557_p2;
reg   [57:0] bound_reg_1006;
wire   [0:0] exitcond_flatten_fu_566_p2;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter1_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter2_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter3_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter4_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter5_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter6_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter7_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter8_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter9_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter10_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter11_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter12_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter13_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter14_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter15_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter16_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter17_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter18_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter19_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter20_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter21_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter22_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter23_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter24_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter25_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter26_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter27_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter28_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter29_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter30_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter31_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter32_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter33_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter34_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter35_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter36_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter37_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter38_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter39_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter40_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter41_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter42_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter43_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter44_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter45_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter46_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter47_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter48_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter49_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter50_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter51_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter52_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter53_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter54_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter55_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter56_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter57_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter58_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter59_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter60_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter61_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter62_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter63_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter64_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter65_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter66_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter67_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter68_reg;
reg   [0:0] exitcond_flatten_reg_1011_pp1_iter70_reg;
wire   [57:0] indvar_flatten_next_fu_571_p2;
reg   [57:0] indvar_flatten_next_reg_1015;
reg    ap_enable_reg_pp1_iter0;
wire   [31:0] tmp_477_cast_mid2_v_s_fu_596_p3;
reg   [31:0] tmp_477_cast_mid2_v_s_reg_1020;
wire  signed [17:0] tmp_598_fu_604_p1;
reg  signed [17:0] tmp_598_reg_1026;
wire   [25:0] indvar_next9_fu_608_p2;
wire   [13:0] tmp_600_fu_614_p1;
reg   [13:0] tmp_600_reg_1036;
reg   [13:0] tmp_600_reg_1036_pp1_iter1_reg;
reg   [13:0] tmp_600_reg_1036_pp1_iter2_reg;
reg   [13:0] tmp_600_reg_1036_pp1_iter3_reg;
wire  signed [31:0] tmp_423_mid2_v_v_v_v_1_fu_623_p2;
reg  signed [31:0] tmp_423_mid2_v_v_v_v_1_reg_1041;
wire  signed [17:0] grp_fu_788_p2;
reg  signed [17:0] tmp_477_cast_mid2_v_2_reg_1046;
wire   [13:0] tmp_187_fu_640_p2;
reg   [13:0] tmp_187_reg_1051;
reg   [13:0] tmp_187_reg_1051_pp1_iter5_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter6_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter7_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter8_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter9_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter10_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter11_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter12_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter13_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter14_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter15_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter16_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter17_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter18_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter19_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter20_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter21_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter22_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter23_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter24_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter25_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter26_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter27_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter28_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter29_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter30_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter31_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter32_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter33_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter34_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter35_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter36_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter37_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter38_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter39_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter40_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter41_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter42_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter43_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter44_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter45_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter46_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter47_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter48_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter49_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter50_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter51_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter52_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter53_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter54_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter55_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter56_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter57_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter58_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter59_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter60_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter61_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter62_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter63_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter64_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter65_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter66_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter67_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter68_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter69_reg;
reg   [13:0] tmp_187_reg_1051_pp1_iter70_reg;
wire   [31:0] grp_fu_627_p2;
reg   [31:0] tmp_423_mid2_v_v_v_v_2_reg_1056;
wire  signed [31:0] tmp_423_mid2_v_v_v_v_3_fu_645_p2;
reg  signed [31:0] tmp_423_mid2_v_v_v_v_3_reg_1061;
wire   [31:0] grp_fu_649_p2;
reg   [31:0] tmp_423_mid2_v_v_v_v_reg_1066;
reg   [27:0] tmp_599_reg_1071;
reg   [27:0] tmp_599_reg_1071_pp1_iter18_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter19_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter20_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter21_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter22_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter23_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter24_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter25_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter26_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter27_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter28_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter29_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter30_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter31_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter32_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter33_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter34_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter35_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter36_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter37_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter38_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter39_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter40_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter41_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter42_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter43_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter44_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter45_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter46_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter47_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter48_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter49_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter50_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter51_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter52_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter53_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter54_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter55_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter56_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter57_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter58_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter59_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter60_reg;
reg   [27:0] tmp_599_reg_1071_pp1_iter61_reg;
wire   [57:0] grp_fu_618_p2;
reg   [57:0] tmp_601_reg_1076;
wire   [58:0] sum6_fu_678_p2;
reg   [58:0] sum6_reg_1081;
wire   [0:0] tmp_602_fu_684_p2;
reg   [511:0] global_cin_V_addr_2_s_reg_1096;
wire  signed [31:0] grp_fu_394_p2;
reg  signed [31:0] tmp3_reg_1101;
wire    ap_CS_fsm_state122;
wire  signed [31:0] grp_fu_703_p2;
reg  signed [31:0] tmp_406_reg_1106;
wire    ap_CS_fsm_state129;
reg   [25:0] tmp_544_add_i32_shr_reg_1112;
wire    ap_CS_fsm_state130;
wire   [31:0] grp_fu_707_p2;
reg   [31:0] tmp_407_reg_1118;
wire    ap_CS_fsm_state136;
reg   [27:0] tmp_594_reg_1123;
wire    ap_CS_fsm_state137;
wire   [58:0] sum4_fu_752_p2;
reg   [58:0] sum4_reg_1128;
wire    ap_CS_fsm_state138;
wire   [31:0] tmp_418_fu_768_p1;
wire   [0:0] exitcond7_fu_772_p2;
reg   [0:0] exitcond7_reg_1144_pp2_iter1_reg;
wire   [25:0] indvar_next3_fu_777_p2;
reg   [25:0] indvar_next3_reg_1148;
reg    ap_enable_reg_pp2_iter0;
reg   [511:0] global_cin_V_addr_1_1_reg_1153;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state24;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state44;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter8;
reg    ap_enable_reg_pp1_iter9;
reg    ap_enable_reg_pp1_iter10;
reg    ap_enable_reg_pp1_iter11;
reg    ap_enable_reg_pp1_iter12;
reg    ap_enable_reg_pp1_iter13;
reg    ap_enable_reg_pp1_iter14;
reg    ap_enable_reg_pp1_iter15;
reg    ap_enable_reg_pp1_iter16;
reg    ap_enable_reg_pp1_iter17;
reg    ap_enable_reg_pp1_iter18;
reg    ap_enable_reg_pp1_iter19;
reg    ap_enable_reg_pp1_iter20;
reg    ap_enable_reg_pp1_iter21;
reg    ap_enable_reg_pp1_iter22;
reg    ap_enable_reg_pp1_iter23;
reg    ap_enable_reg_pp1_iter24;
reg    ap_enable_reg_pp1_iter25;
reg    ap_enable_reg_pp1_iter26;
reg    ap_enable_reg_pp1_iter27;
reg    ap_enable_reg_pp1_iter28;
reg    ap_enable_reg_pp1_iter29;
reg    ap_enable_reg_pp1_iter30;
reg    ap_enable_reg_pp1_iter31;
reg    ap_enable_reg_pp1_iter32;
reg    ap_enable_reg_pp1_iter33;
reg    ap_enable_reg_pp1_iter34;
reg    ap_enable_reg_pp1_iter35;
reg    ap_enable_reg_pp1_iter36;
reg    ap_enable_reg_pp1_iter37;
reg    ap_enable_reg_pp1_iter38;
reg    ap_enable_reg_pp1_iter39;
reg    ap_enable_reg_pp1_iter40;
reg    ap_enable_reg_pp1_iter41;
reg    ap_enable_reg_pp1_iter42;
reg    ap_enable_reg_pp1_iter43;
reg    ap_enable_reg_pp1_iter44;
reg    ap_enable_reg_pp1_iter45;
reg    ap_enable_reg_pp1_iter46;
reg    ap_enable_reg_pp1_iter47;
reg    ap_enable_reg_pp1_iter48;
reg    ap_enable_reg_pp1_iter49;
reg    ap_enable_reg_pp1_iter50;
reg    ap_enable_reg_pp1_iter51;
reg    ap_enable_reg_pp1_iter52;
reg    ap_enable_reg_pp1_iter53;
reg    ap_enable_reg_pp1_iter54;
reg    ap_enable_reg_pp1_iter55;
reg    ap_enable_reg_pp1_iter56;
reg    ap_enable_reg_pp1_iter57;
reg    ap_enable_reg_pp1_iter58;
reg    ap_enable_reg_pp1_iter59;
reg    ap_enable_reg_pp1_iter60;
reg    ap_enable_reg_pp1_iter61;
reg    ap_enable_reg_pp1_iter62;
reg    ap_enable_reg_pp1_iter64;
reg    ap_enable_reg_pp1_iter65;
reg    ap_enable_reg_pp1_iter66;
reg    ap_enable_reg_pp1_iter67;
reg    ap_enable_reg_pp1_iter68;
reg    ap_enable_reg_pp1_iter69;
reg    ap_enable_reg_pp1_iter71;
wire    ap_CS_fsm_state145;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state146;
reg    ap_enable_reg_pp2_iter2;
reg   [25:0] ap_phi_mux_indvar_phi_fu_284_p4;
reg   [57:0] ap_phi_mux_indvar_flatten_phi_fu_296_p4;
reg   [31:0] ap_phi_mux_hh2_phi_fu_308_p4;
reg   [25:0] ap_phi_mux_indvar9_phi_fu_330_p4;
wire   [63:0] indvar3_fu_497_p1;
wire   [63:0] tmp_187_cast_fu_699_p1;
wire   [63:0] indvar1_fu_783_p1;
wire   [63:0] sum_cast_fu_465_p1;
wire   [63:0] sum6_cast_fu_689_p1;
wire   [63:0] sum4_cast_fu_758_p1;
reg    ap_reg_ioackin_m_axi_global_cin_V_ARREADY;
reg    ap_block_pp1_stage0_01001;
wire  signed [31:0] notlhs_fu_346_p0;
wire  signed [31:0] notrhs_fu_352_p0;
wire   [0:0] notlhs_fu_346_p2;
wire   [0:0] tmp2_fu_358_p1;
wire   [0:0] tmp2_fu_358_p2;
wire   [0:0] notrhs_fu_352_p2;
wire   [0:0] tmp_s_fu_376_p2;
wire   [0:0] or_cond2_fu_382_p1;
wire   [16:0] FILTER_S_cast1_cast_fu_338_p1;
wire   [15:0] grp_fu_394_p0;
wire   [15:0] grp_fu_411_p0;
wire   [31:0] global_cin_offset_fu_416_p2;
wire   [28:0] tmp_405_fu_430_p3;
wire   [28:0] tmp_533_add_fu_437_p2;
wire   [58:0] tmp_402_cast_fu_453_p1;
wire   [58:0] global_cin_V_offset_1_fu_456_p1;
wire   [26:0] indvar_cast_fu_482_p1;
wire  signed [31:0] tmp_414_fu_505_p0;
wire   [15:0] grp_fu_510_p0;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire  signed [31:0] tmp_413_fu_518_p0;
wire   [31:0] tmp_597_fu_526_p2;
wire   [31:0] tmp_554_add_fu_531_p2;
wire   [31:0] grp_fu_557_p0;
wire   [25:0] grp_fu_557_p1;
wire   [0:0] exitcond_fu_583_p2;
wire   [31:0] hh_fu_577_p2;
wire   [25:0] indvar2_mid2_fu_588_p3;
wire   [25:0] grp_fu_618_p1;
wire   [13:0] tmp_477_cast_mid2_fu_631_p4;
wire   [15:0] grp_fu_649_p1;
wire   [31:0] tmp_423_mid2_v_v_v_fu_653_p2;
wire   [31:0] tmp_423_mid2_v_v_fu_657_p2;
wire   [58:0] tmp_423_mid2_cast_fu_672_p1;
wire   [58:0] global_cin_V_offset_3_fu_675_p1;
wire    ap_CS_fsm_state123;
wire   [31:0] tmp_595_fu_711_p2;
wire   [31:0] tmp_544_add_fu_716_p2;
wire   [31:0] global_cin_offset_1_fu_732_p2;
wire   [58:0] tmp_409_cast_fu_746_p1;
wire   [58:0] global_cin_V_offset_2_fu_749_p1;
reg    grp_fu_618_ce;
reg    grp_fu_627_ce;
reg    grp_fu_649_ce;
reg    grp_fu_788_ce;
wire    ap_CS_fsm_state149;
reg   [73:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire   [31:0] grp_fu_394_p00;
wire   [26:0] grp_fu_411_p00;
wire   [57:0] grp_fu_557_p00;
wire   [57:0] grp_fu_557_p10;
reg    ap_condition_1067;

// power-on initialization
initial begin
#0 ap_CS_fsm = 74'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter63 = 1'b0;
#0 ap_enable_reg_pp1_iter70 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter10 = 1'b0;
#0 ap_enable_reg_pp1_iter11 = 1'b0;
#0 ap_enable_reg_pp1_iter12 = 1'b0;
#0 ap_enable_reg_pp1_iter13 = 1'b0;
#0 ap_enable_reg_pp1_iter14 = 1'b0;
#0 ap_enable_reg_pp1_iter15 = 1'b0;
#0 ap_enable_reg_pp1_iter16 = 1'b0;
#0 ap_enable_reg_pp1_iter17 = 1'b0;
#0 ap_enable_reg_pp1_iter18 = 1'b0;
#0 ap_enable_reg_pp1_iter19 = 1'b0;
#0 ap_enable_reg_pp1_iter20 = 1'b0;
#0 ap_enable_reg_pp1_iter21 = 1'b0;
#0 ap_enable_reg_pp1_iter22 = 1'b0;
#0 ap_enable_reg_pp1_iter23 = 1'b0;
#0 ap_enable_reg_pp1_iter24 = 1'b0;
#0 ap_enable_reg_pp1_iter25 = 1'b0;
#0 ap_enable_reg_pp1_iter26 = 1'b0;
#0 ap_enable_reg_pp1_iter27 = 1'b0;
#0 ap_enable_reg_pp1_iter28 = 1'b0;
#0 ap_enable_reg_pp1_iter29 = 1'b0;
#0 ap_enable_reg_pp1_iter30 = 1'b0;
#0 ap_enable_reg_pp1_iter31 = 1'b0;
#0 ap_enable_reg_pp1_iter32 = 1'b0;
#0 ap_enable_reg_pp1_iter33 = 1'b0;
#0 ap_enable_reg_pp1_iter34 = 1'b0;
#0 ap_enable_reg_pp1_iter35 = 1'b0;
#0 ap_enable_reg_pp1_iter36 = 1'b0;
#0 ap_enable_reg_pp1_iter37 = 1'b0;
#0 ap_enable_reg_pp1_iter38 = 1'b0;
#0 ap_enable_reg_pp1_iter39 = 1'b0;
#0 ap_enable_reg_pp1_iter40 = 1'b0;
#0 ap_enable_reg_pp1_iter41 = 1'b0;
#0 ap_enable_reg_pp1_iter42 = 1'b0;
#0 ap_enable_reg_pp1_iter43 = 1'b0;
#0 ap_enable_reg_pp1_iter44 = 1'b0;
#0 ap_enable_reg_pp1_iter45 = 1'b0;
#0 ap_enable_reg_pp1_iter46 = 1'b0;
#0 ap_enable_reg_pp1_iter47 = 1'b0;
#0 ap_enable_reg_pp1_iter48 = 1'b0;
#0 ap_enable_reg_pp1_iter49 = 1'b0;
#0 ap_enable_reg_pp1_iter50 = 1'b0;
#0 ap_enable_reg_pp1_iter51 = 1'b0;
#0 ap_enable_reg_pp1_iter52 = 1'b0;
#0 ap_enable_reg_pp1_iter53 = 1'b0;
#0 ap_enable_reg_pp1_iter54 = 1'b0;
#0 ap_enable_reg_pp1_iter55 = 1'b0;
#0 ap_enable_reg_pp1_iter56 = 1'b0;
#0 ap_enable_reg_pp1_iter57 = 1'b0;
#0 ap_enable_reg_pp1_iter58 = 1'b0;
#0 ap_enable_reg_pp1_iter59 = 1'b0;
#0 ap_enable_reg_pp1_iter60 = 1'b0;
#0 ap_enable_reg_pp1_iter61 = 1'b0;
#0 ap_enable_reg_pp1_iter62 = 1'b0;
#0 ap_enable_reg_pp1_iter64 = 1'b0;
#0 ap_enable_reg_pp1_iter65 = 1'b0;
#0 ap_enable_reg_pp1_iter66 = 1'b0;
#0 ap_enable_reg_pp1_iter67 = 1'b0;
#0 ap_enable_reg_pp1_iter68 = 1'b0;
#0 ap_enable_reg_pp1_iter69 = 1'b0;
#0 ap_enable_reg_pp1_iter71 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_reg_ioackin_m_axi_global_cin_V_ARREADY = 1'b0;
end

top_kernel_mul_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_kernel_mul_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(LAYER_IN_W_HW),
    .din1(LAYER_IN_H_HW),
    .ce(1'b1),
    .dout(grp_fu_370_p2)
);

top_kernel_mul_16cud #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_kernel_mul_16cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_394_p0),
    .din1(LAYER_IN_W_T),
    .ce(1'b1),
    .dout(grp_fu_394_p2)
);

top_kernel_mul_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_kernel_mul_32bkb_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_399_reg_877),
    .din1(in_num_iter),
    .ce(1'b1),
    .dout(grp_fu_404_p2)
);

top_kernel_mul_16dEe #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 27 ),
    .dout_WIDTH( 27 ))
top_kernel_mul_16dEe_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_411_p0),
    .din1(tmp_593_reg_882),
    .ce(1'b1),
    .dout(grp_fu_411_p2)
);

top_kernel_mul_16cud #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_kernel_mul_16cud_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_510_p0),
    .din1(tmp_414_reg_953),
    .ce(1'b1),
    .dout(grp_fu_510_p2)
);

top_kernel_mul_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_kernel_mul_32bkb_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_num_iter),
    .din1(LAYER_IN_H_HW),
    .ce(1'b1),
    .dout(grp_fu_514_p2)
);

top_kernel_mul_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_kernel_mul_32bkb_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(LAYER_IN_W_HW),
    .din1(tmp6_reg_973),
    .ce(1'b1),
    .dout(grp_fu_547_p2)
);

top_kernel_mul_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 26 ),
    .dout_WIDTH( 58 ))
top_kernel_mul_32eOg_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_557_p0),
    .din1(grp_fu_557_p1),
    .ce(1'b1),
    .dout(grp_fu_557_p2)
);

top_kernel_urem_5fYi #(
    .ID( 1 ),
    .NUM_STAGE( 62 ),
    .din0_WIDTH( 58 ),
    .din1_WIDTH( 26 ),
    .dout_WIDTH( 58 ))
top_kernel_urem_5fYi_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_indvar_flatten_phi_fu_296_p4),
    .din1(grp_fu_618_p1),
    .ce(grp_fu_618_ce),
    .dout(grp_fu_618_p2)
);

top_kernel_mul_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_kernel_mul_32bkb_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_423_mid2_v_v_v_v_1_reg_1041),
    .din1(LAYER_IN_W_HW),
    .ce(grp_fu_627_ce),
    .dout(grp_fu_627_p2)
);

top_kernel_mul_32g8j #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
top_kernel_mul_32g8j_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_423_mid2_v_v_v_v_3_reg_1061),
    .din1(grp_fu_649_p1),
    .ce(grp_fu_649_ce),
    .dout(grp_fu_649_p2)
);

top_kernel_mul_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_kernel_mul_32bkb_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp3_reg_1101),
    .din1(LAYER_IN_H_T),
    .ce(1'b1),
    .dout(grp_fu_703_p2)
);

top_kernel_mul_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_kernel_mul_32bkb_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_406_reg_1106),
    .din1(num_tile),
    .ce(1'b1),
    .dout(grp_fu_707_p2)
);

top_kernel_mul_muhbi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
top_kernel_mul_muhbi_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_596_reg_968),
    .din1(tmp_598_reg_1026),
    .ce(grp_fu_788_ce),
    .dout(grp_fu_788_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state24) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state24)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state24);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state44) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state43)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state44)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state44);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter15 <= ap_enable_reg_pp1_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter16 <= ap_enable_reg_pp1_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter17 <= ap_enable_reg_pp1_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter18 <= ap_enable_reg_pp1_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter19 <= ap_enable_reg_pp1_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter20 <= ap_enable_reg_pp1_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter21 <= ap_enable_reg_pp1_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter22 <= ap_enable_reg_pp1_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter23 <= ap_enable_reg_pp1_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter24 <= ap_enable_reg_pp1_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter25 <= ap_enable_reg_pp1_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter26 <= ap_enable_reg_pp1_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter27 <= ap_enable_reg_pp1_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter28 <= ap_enable_reg_pp1_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter29 <= ap_enable_reg_pp1_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter30 <= ap_enable_reg_pp1_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter31 <= ap_enable_reg_pp1_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter32 <= ap_enable_reg_pp1_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter33 <= ap_enable_reg_pp1_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter34 <= ap_enable_reg_pp1_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter35 <= ap_enable_reg_pp1_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter36 <= ap_enable_reg_pp1_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter37 <= ap_enable_reg_pp1_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter38 <= ap_enable_reg_pp1_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter39 <= ap_enable_reg_pp1_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter40 <= ap_enable_reg_pp1_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter41 <= ap_enable_reg_pp1_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter42 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter42 <= ap_enable_reg_pp1_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter43 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter43 <= ap_enable_reg_pp1_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter44 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter44 <= ap_enable_reg_pp1_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter45 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter45 <= ap_enable_reg_pp1_iter44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter46 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter46 <= ap_enable_reg_pp1_iter45;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter47 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter47 <= ap_enable_reg_pp1_iter46;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter48 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter48 <= ap_enable_reg_pp1_iter47;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter49 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter49 <= ap_enable_reg_pp1_iter48;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter50 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter50 <= ap_enable_reg_pp1_iter49;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter51 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter51 <= ap_enable_reg_pp1_iter50;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter52 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter52 <= ap_enable_reg_pp1_iter51;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter53 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter53 <= ap_enable_reg_pp1_iter52;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter54 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter54 <= ap_enable_reg_pp1_iter53;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter55 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter55 <= ap_enable_reg_pp1_iter54;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter56 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter56 <= ap_enable_reg_pp1_iter55;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter57 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter57 <= ap_enable_reg_pp1_iter56;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter58 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter58 <= ap_enable_reg_pp1_iter57;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter59 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter59 <= ap_enable_reg_pp1_iter58;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter60 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter60 <= ap_enable_reg_pp1_iter59;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter61 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter61 <= ap_enable_reg_pp1_iter60;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter62 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter62 <= ap_enable_reg_pp1_iter61;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter63 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter63 <= ap_enable_reg_pp1_iter62;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter64 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter64 <= ap_enable_reg_pp1_iter63;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter65 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter65 <= ap_enable_reg_pp1_iter64;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter66 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter66 <= ap_enable_reg_pp1_iter65;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter67 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter67 <= ap_enable_reg_pp1_iter66;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter68 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter68 <= ap_enable_reg_pp1_iter67;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter69 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter69 <= ap_enable_reg_pp1_iter68;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter70 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter70 <= ap_enable_reg_pp1_iter69;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter71 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter71 <= ap_enable_reg_pp1_iter70;
        end else if ((1'b1 == ap_CS_fsm_state43)) begin
            ap_enable_reg_pp1_iter71 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state146) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state145)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state146)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state146);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state145)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_global_cin_V_ARREADY <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage0_11001) & (tmp_602_reg_1086 == 1'd1) & (ap_enable_reg_pp1_iter63 == 1'b1)) | ((ap_sig_ioackin_m_axi_global_cin_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state139)) | ((ap_sig_ioackin_m_axi_global_cin_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17)))) begin
            ap_reg_ioackin_m_axi_global_cin_V_ARREADY <= 1'b0;
        end else if ((((tmp_602_reg_1086 == 1'd1) & (ap_enable_reg_pp1_iter63 == 1'b1) & (m_axi_global_cin_V_ARREADY == 1'b1) & (1'b0 == ap_block_pp1_stage0_01001)) | ((1'b1 == ap_CS_fsm_state139) & (m_axi_global_cin_V_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state17) & (m_axi_global_cin_V_ARREADY == 1'b1)))) begin
            ap_reg_ioackin_m_axi_global_cin_V_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_reg_1011 == 1'd0))) begin
        hh2_reg_304 <= tmp_477_cast_mid2_v_s_reg_1020;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        hh2_reg_304 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_fu_566_p2 == 1'd0))) begin
        indvar2_reg_315 <= indvar_next9_fu_608_p2;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        indvar2_reg_315 <= 26'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond7_reg_1144 == 1'd0))) begin
        indvar9_reg_326 <= indvar_next3_reg_1148;
    end else if ((1'b1 == ap_CS_fsm_state145)) begin
        indvar9_reg_326 <= 26'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_reg_1011 == 1'd0))) begin
        indvar_flatten_reg_292 <= indvar_flatten_next_reg_1015;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        indvar_flatten_reg_292 <= 58'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond2_reg_934 == 1'd0))) begin
        indvar_reg_280 <= indvar_next_reg_938;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        indvar_reg_280 <= 26'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        LAYER_IN_NUM_T_cast_reg_857[15 : 0] <= LAYER_IN_NUM_T_cast_fu_342_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        bound_reg_1006 <= grp_fu_557_p2;
        tmp_415_reg_996 <= grp_fu_547_p2;
        tmp_422_reg_1001[25 : 0] <= tmp_422_fu_563_p1[25 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        cast3_reg_990[25 : 0] <= cast3_fu_554_p1[25 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond2_reg_934 <= exitcond2_fu_486_p2;
        exitcond2_reg_934_pp0_iter1_reg <= exitcond2_reg_934;
        indvar_reg_280_pp0_iter1_reg <= indvar_reg_280;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        exitcond7_reg_1144 <= exitcond7_fu_772_p2;
        exitcond7_reg_1144_pp2_iter1_reg <= exitcond7_reg_1144;
        indvar9_reg_326_pp2_iter1_reg <= indvar9_reg_326;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_flatten_reg_1011 <= exitcond_flatten_fu_566_p2;
        exitcond_flatten_reg_1011_pp1_iter1_reg <= exitcond_flatten_reg_1011;
        tmp_600_reg_1036_pp1_iter1_reg <= tmp_600_reg_1036;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        exitcond_flatten_reg_1011_pp1_iter10_reg <= exitcond_flatten_reg_1011_pp1_iter9_reg;
        exitcond_flatten_reg_1011_pp1_iter11_reg <= exitcond_flatten_reg_1011_pp1_iter10_reg;
        exitcond_flatten_reg_1011_pp1_iter12_reg <= exitcond_flatten_reg_1011_pp1_iter11_reg;
        exitcond_flatten_reg_1011_pp1_iter13_reg <= exitcond_flatten_reg_1011_pp1_iter12_reg;
        exitcond_flatten_reg_1011_pp1_iter14_reg <= exitcond_flatten_reg_1011_pp1_iter13_reg;
        exitcond_flatten_reg_1011_pp1_iter15_reg <= exitcond_flatten_reg_1011_pp1_iter14_reg;
        exitcond_flatten_reg_1011_pp1_iter16_reg <= exitcond_flatten_reg_1011_pp1_iter15_reg;
        exitcond_flatten_reg_1011_pp1_iter17_reg <= exitcond_flatten_reg_1011_pp1_iter16_reg;
        exitcond_flatten_reg_1011_pp1_iter18_reg <= exitcond_flatten_reg_1011_pp1_iter17_reg;
        exitcond_flatten_reg_1011_pp1_iter19_reg <= exitcond_flatten_reg_1011_pp1_iter18_reg;
        exitcond_flatten_reg_1011_pp1_iter20_reg <= exitcond_flatten_reg_1011_pp1_iter19_reg;
        exitcond_flatten_reg_1011_pp1_iter21_reg <= exitcond_flatten_reg_1011_pp1_iter20_reg;
        exitcond_flatten_reg_1011_pp1_iter22_reg <= exitcond_flatten_reg_1011_pp1_iter21_reg;
        exitcond_flatten_reg_1011_pp1_iter23_reg <= exitcond_flatten_reg_1011_pp1_iter22_reg;
        exitcond_flatten_reg_1011_pp1_iter24_reg <= exitcond_flatten_reg_1011_pp1_iter23_reg;
        exitcond_flatten_reg_1011_pp1_iter25_reg <= exitcond_flatten_reg_1011_pp1_iter24_reg;
        exitcond_flatten_reg_1011_pp1_iter26_reg <= exitcond_flatten_reg_1011_pp1_iter25_reg;
        exitcond_flatten_reg_1011_pp1_iter27_reg <= exitcond_flatten_reg_1011_pp1_iter26_reg;
        exitcond_flatten_reg_1011_pp1_iter28_reg <= exitcond_flatten_reg_1011_pp1_iter27_reg;
        exitcond_flatten_reg_1011_pp1_iter29_reg <= exitcond_flatten_reg_1011_pp1_iter28_reg;
        exitcond_flatten_reg_1011_pp1_iter2_reg <= exitcond_flatten_reg_1011_pp1_iter1_reg;
        exitcond_flatten_reg_1011_pp1_iter30_reg <= exitcond_flatten_reg_1011_pp1_iter29_reg;
        exitcond_flatten_reg_1011_pp1_iter31_reg <= exitcond_flatten_reg_1011_pp1_iter30_reg;
        exitcond_flatten_reg_1011_pp1_iter32_reg <= exitcond_flatten_reg_1011_pp1_iter31_reg;
        exitcond_flatten_reg_1011_pp1_iter33_reg <= exitcond_flatten_reg_1011_pp1_iter32_reg;
        exitcond_flatten_reg_1011_pp1_iter34_reg <= exitcond_flatten_reg_1011_pp1_iter33_reg;
        exitcond_flatten_reg_1011_pp1_iter35_reg <= exitcond_flatten_reg_1011_pp1_iter34_reg;
        exitcond_flatten_reg_1011_pp1_iter36_reg <= exitcond_flatten_reg_1011_pp1_iter35_reg;
        exitcond_flatten_reg_1011_pp1_iter37_reg <= exitcond_flatten_reg_1011_pp1_iter36_reg;
        exitcond_flatten_reg_1011_pp1_iter38_reg <= exitcond_flatten_reg_1011_pp1_iter37_reg;
        exitcond_flatten_reg_1011_pp1_iter39_reg <= exitcond_flatten_reg_1011_pp1_iter38_reg;
        exitcond_flatten_reg_1011_pp1_iter3_reg <= exitcond_flatten_reg_1011_pp1_iter2_reg;
        exitcond_flatten_reg_1011_pp1_iter40_reg <= exitcond_flatten_reg_1011_pp1_iter39_reg;
        exitcond_flatten_reg_1011_pp1_iter41_reg <= exitcond_flatten_reg_1011_pp1_iter40_reg;
        exitcond_flatten_reg_1011_pp1_iter42_reg <= exitcond_flatten_reg_1011_pp1_iter41_reg;
        exitcond_flatten_reg_1011_pp1_iter43_reg <= exitcond_flatten_reg_1011_pp1_iter42_reg;
        exitcond_flatten_reg_1011_pp1_iter44_reg <= exitcond_flatten_reg_1011_pp1_iter43_reg;
        exitcond_flatten_reg_1011_pp1_iter45_reg <= exitcond_flatten_reg_1011_pp1_iter44_reg;
        exitcond_flatten_reg_1011_pp1_iter46_reg <= exitcond_flatten_reg_1011_pp1_iter45_reg;
        exitcond_flatten_reg_1011_pp1_iter47_reg <= exitcond_flatten_reg_1011_pp1_iter46_reg;
        exitcond_flatten_reg_1011_pp1_iter48_reg <= exitcond_flatten_reg_1011_pp1_iter47_reg;
        exitcond_flatten_reg_1011_pp1_iter49_reg <= exitcond_flatten_reg_1011_pp1_iter48_reg;
        exitcond_flatten_reg_1011_pp1_iter4_reg <= exitcond_flatten_reg_1011_pp1_iter3_reg;
        exitcond_flatten_reg_1011_pp1_iter50_reg <= exitcond_flatten_reg_1011_pp1_iter49_reg;
        exitcond_flatten_reg_1011_pp1_iter51_reg <= exitcond_flatten_reg_1011_pp1_iter50_reg;
        exitcond_flatten_reg_1011_pp1_iter52_reg <= exitcond_flatten_reg_1011_pp1_iter51_reg;
        exitcond_flatten_reg_1011_pp1_iter53_reg <= exitcond_flatten_reg_1011_pp1_iter52_reg;
        exitcond_flatten_reg_1011_pp1_iter54_reg <= exitcond_flatten_reg_1011_pp1_iter53_reg;
        exitcond_flatten_reg_1011_pp1_iter55_reg <= exitcond_flatten_reg_1011_pp1_iter54_reg;
        exitcond_flatten_reg_1011_pp1_iter56_reg <= exitcond_flatten_reg_1011_pp1_iter55_reg;
        exitcond_flatten_reg_1011_pp1_iter57_reg <= exitcond_flatten_reg_1011_pp1_iter56_reg;
        exitcond_flatten_reg_1011_pp1_iter58_reg <= exitcond_flatten_reg_1011_pp1_iter57_reg;
        exitcond_flatten_reg_1011_pp1_iter59_reg <= exitcond_flatten_reg_1011_pp1_iter58_reg;
        exitcond_flatten_reg_1011_pp1_iter5_reg <= exitcond_flatten_reg_1011_pp1_iter4_reg;
        exitcond_flatten_reg_1011_pp1_iter60_reg <= exitcond_flatten_reg_1011_pp1_iter59_reg;
        exitcond_flatten_reg_1011_pp1_iter61_reg <= exitcond_flatten_reg_1011_pp1_iter60_reg;
        exitcond_flatten_reg_1011_pp1_iter62_reg <= exitcond_flatten_reg_1011_pp1_iter61_reg;
        exitcond_flatten_reg_1011_pp1_iter63_reg <= exitcond_flatten_reg_1011_pp1_iter62_reg;
        exitcond_flatten_reg_1011_pp1_iter64_reg <= exitcond_flatten_reg_1011_pp1_iter63_reg;
        exitcond_flatten_reg_1011_pp1_iter65_reg <= exitcond_flatten_reg_1011_pp1_iter64_reg;
        exitcond_flatten_reg_1011_pp1_iter66_reg <= exitcond_flatten_reg_1011_pp1_iter65_reg;
        exitcond_flatten_reg_1011_pp1_iter67_reg <= exitcond_flatten_reg_1011_pp1_iter66_reg;
        exitcond_flatten_reg_1011_pp1_iter68_reg <= exitcond_flatten_reg_1011_pp1_iter67_reg;
        exitcond_flatten_reg_1011_pp1_iter69_reg <= exitcond_flatten_reg_1011_pp1_iter68_reg;
        exitcond_flatten_reg_1011_pp1_iter6_reg <= exitcond_flatten_reg_1011_pp1_iter5_reg;
        exitcond_flatten_reg_1011_pp1_iter70_reg <= exitcond_flatten_reg_1011_pp1_iter69_reg;
        exitcond_flatten_reg_1011_pp1_iter7_reg <= exitcond_flatten_reg_1011_pp1_iter6_reg;
        exitcond_flatten_reg_1011_pp1_iter8_reg <= exitcond_flatten_reg_1011_pp1_iter7_reg;
        exitcond_flatten_reg_1011_pp1_iter9_reg <= exitcond_flatten_reg_1011_pp1_iter8_reg;
        tmp_187_reg_1051_pp1_iter10_reg <= tmp_187_reg_1051_pp1_iter9_reg;
        tmp_187_reg_1051_pp1_iter11_reg <= tmp_187_reg_1051_pp1_iter10_reg;
        tmp_187_reg_1051_pp1_iter12_reg <= tmp_187_reg_1051_pp1_iter11_reg;
        tmp_187_reg_1051_pp1_iter13_reg <= tmp_187_reg_1051_pp1_iter12_reg;
        tmp_187_reg_1051_pp1_iter14_reg <= tmp_187_reg_1051_pp1_iter13_reg;
        tmp_187_reg_1051_pp1_iter15_reg <= tmp_187_reg_1051_pp1_iter14_reg;
        tmp_187_reg_1051_pp1_iter16_reg <= tmp_187_reg_1051_pp1_iter15_reg;
        tmp_187_reg_1051_pp1_iter17_reg <= tmp_187_reg_1051_pp1_iter16_reg;
        tmp_187_reg_1051_pp1_iter18_reg <= tmp_187_reg_1051_pp1_iter17_reg;
        tmp_187_reg_1051_pp1_iter19_reg <= tmp_187_reg_1051_pp1_iter18_reg;
        tmp_187_reg_1051_pp1_iter20_reg <= tmp_187_reg_1051_pp1_iter19_reg;
        tmp_187_reg_1051_pp1_iter21_reg <= tmp_187_reg_1051_pp1_iter20_reg;
        tmp_187_reg_1051_pp1_iter22_reg <= tmp_187_reg_1051_pp1_iter21_reg;
        tmp_187_reg_1051_pp1_iter23_reg <= tmp_187_reg_1051_pp1_iter22_reg;
        tmp_187_reg_1051_pp1_iter24_reg <= tmp_187_reg_1051_pp1_iter23_reg;
        tmp_187_reg_1051_pp1_iter25_reg <= tmp_187_reg_1051_pp1_iter24_reg;
        tmp_187_reg_1051_pp1_iter26_reg <= tmp_187_reg_1051_pp1_iter25_reg;
        tmp_187_reg_1051_pp1_iter27_reg <= tmp_187_reg_1051_pp1_iter26_reg;
        tmp_187_reg_1051_pp1_iter28_reg <= tmp_187_reg_1051_pp1_iter27_reg;
        tmp_187_reg_1051_pp1_iter29_reg <= tmp_187_reg_1051_pp1_iter28_reg;
        tmp_187_reg_1051_pp1_iter30_reg <= tmp_187_reg_1051_pp1_iter29_reg;
        tmp_187_reg_1051_pp1_iter31_reg <= tmp_187_reg_1051_pp1_iter30_reg;
        tmp_187_reg_1051_pp1_iter32_reg <= tmp_187_reg_1051_pp1_iter31_reg;
        tmp_187_reg_1051_pp1_iter33_reg <= tmp_187_reg_1051_pp1_iter32_reg;
        tmp_187_reg_1051_pp1_iter34_reg <= tmp_187_reg_1051_pp1_iter33_reg;
        tmp_187_reg_1051_pp1_iter35_reg <= tmp_187_reg_1051_pp1_iter34_reg;
        tmp_187_reg_1051_pp1_iter36_reg <= tmp_187_reg_1051_pp1_iter35_reg;
        tmp_187_reg_1051_pp1_iter37_reg <= tmp_187_reg_1051_pp1_iter36_reg;
        tmp_187_reg_1051_pp1_iter38_reg <= tmp_187_reg_1051_pp1_iter37_reg;
        tmp_187_reg_1051_pp1_iter39_reg <= tmp_187_reg_1051_pp1_iter38_reg;
        tmp_187_reg_1051_pp1_iter40_reg <= tmp_187_reg_1051_pp1_iter39_reg;
        tmp_187_reg_1051_pp1_iter41_reg <= tmp_187_reg_1051_pp1_iter40_reg;
        tmp_187_reg_1051_pp1_iter42_reg <= tmp_187_reg_1051_pp1_iter41_reg;
        tmp_187_reg_1051_pp1_iter43_reg <= tmp_187_reg_1051_pp1_iter42_reg;
        tmp_187_reg_1051_pp1_iter44_reg <= tmp_187_reg_1051_pp1_iter43_reg;
        tmp_187_reg_1051_pp1_iter45_reg <= tmp_187_reg_1051_pp1_iter44_reg;
        tmp_187_reg_1051_pp1_iter46_reg <= tmp_187_reg_1051_pp1_iter45_reg;
        tmp_187_reg_1051_pp1_iter47_reg <= tmp_187_reg_1051_pp1_iter46_reg;
        tmp_187_reg_1051_pp1_iter48_reg <= tmp_187_reg_1051_pp1_iter47_reg;
        tmp_187_reg_1051_pp1_iter49_reg <= tmp_187_reg_1051_pp1_iter48_reg;
        tmp_187_reg_1051_pp1_iter50_reg <= tmp_187_reg_1051_pp1_iter49_reg;
        tmp_187_reg_1051_pp1_iter51_reg <= tmp_187_reg_1051_pp1_iter50_reg;
        tmp_187_reg_1051_pp1_iter52_reg <= tmp_187_reg_1051_pp1_iter51_reg;
        tmp_187_reg_1051_pp1_iter53_reg <= tmp_187_reg_1051_pp1_iter52_reg;
        tmp_187_reg_1051_pp1_iter54_reg <= tmp_187_reg_1051_pp1_iter53_reg;
        tmp_187_reg_1051_pp1_iter55_reg <= tmp_187_reg_1051_pp1_iter54_reg;
        tmp_187_reg_1051_pp1_iter56_reg <= tmp_187_reg_1051_pp1_iter55_reg;
        tmp_187_reg_1051_pp1_iter57_reg <= tmp_187_reg_1051_pp1_iter56_reg;
        tmp_187_reg_1051_pp1_iter58_reg <= tmp_187_reg_1051_pp1_iter57_reg;
        tmp_187_reg_1051_pp1_iter59_reg <= tmp_187_reg_1051_pp1_iter58_reg;
        tmp_187_reg_1051_pp1_iter5_reg <= tmp_187_reg_1051;
        tmp_187_reg_1051_pp1_iter60_reg <= tmp_187_reg_1051_pp1_iter59_reg;
        tmp_187_reg_1051_pp1_iter61_reg <= tmp_187_reg_1051_pp1_iter60_reg;
        tmp_187_reg_1051_pp1_iter62_reg <= tmp_187_reg_1051_pp1_iter61_reg;
        tmp_187_reg_1051_pp1_iter63_reg <= tmp_187_reg_1051_pp1_iter62_reg;
        tmp_187_reg_1051_pp1_iter64_reg <= tmp_187_reg_1051_pp1_iter63_reg;
        tmp_187_reg_1051_pp1_iter65_reg <= tmp_187_reg_1051_pp1_iter64_reg;
        tmp_187_reg_1051_pp1_iter66_reg <= tmp_187_reg_1051_pp1_iter65_reg;
        tmp_187_reg_1051_pp1_iter67_reg <= tmp_187_reg_1051_pp1_iter66_reg;
        tmp_187_reg_1051_pp1_iter68_reg <= tmp_187_reg_1051_pp1_iter67_reg;
        tmp_187_reg_1051_pp1_iter69_reg <= tmp_187_reg_1051_pp1_iter68_reg;
        tmp_187_reg_1051_pp1_iter6_reg <= tmp_187_reg_1051_pp1_iter5_reg;
        tmp_187_reg_1051_pp1_iter70_reg <= tmp_187_reg_1051_pp1_iter69_reg;
        tmp_187_reg_1051_pp1_iter7_reg <= tmp_187_reg_1051_pp1_iter6_reg;
        tmp_187_reg_1051_pp1_iter8_reg <= tmp_187_reg_1051_pp1_iter7_reg;
        tmp_187_reg_1051_pp1_iter9_reg <= tmp_187_reg_1051_pp1_iter8_reg;
        tmp_599_reg_1071_pp1_iter18_reg <= tmp_599_reg_1071;
        tmp_599_reg_1071_pp1_iter19_reg <= tmp_599_reg_1071_pp1_iter18_reg;
        tmp_599_reg_1071_pp1_iter20_reg <= tmp_599_reg_1071_pp1_iter19_reg;
        tmp_599_reg_1071_pp1_iter21_reg <= tmp_599_reg_1071_pp1_iter20_reg;
        tmp_599_reg_1071_pp1_iter22_reg <= tmp_599_reg_1071_pp1_iter21_reg;
        tmp_599_reg_1071_pp1_iter23_reg <= tmp_599_reg_1071_pp1_iter22_reg;
        tmp_599_reg_1071_pp1_iter24_reg <= tmp_599_reg_1071_pp1_iter23_reg;
        tmp_599_reg_1071_pp1_iter25_reg <= tmp_599_reg_1071_pp1_iter24_reg;
        tmp_599_reg_1071_pp1_iter26_reg <= tmp_599_reg_1071_pp1_iter25_reg;
        tmp_599_reg_1071_pp1_iter27_reg <= tmp_599_reg_1071_pp1_iter26_reg;
        tmp_599_reg_1071_pp1_iter28_reg <= tmp_599_reg_1071_pp1_iter27_reg;
        tmp_599_reg_1071_pp1_iter29_reg <= tmp_599_reg_1071_pp1_iter28_reg;
        tmp_599_reg_1071_pp1_iter30_reg <= tmp_599_reg_1071_pp1_iter29_reg;
        tmp_599_reg_1071_pp1_iter31_reg <= tmp_599_reg_1071_pp1_iter30_reg;
        tmp_599_reg_1071_pp1_iter32_reg <= tmp_599_reg_1071_pp1_iter31_reg;
        tmp_599_reg_1071_pp1_iter33_reg <= tmp_599_reg_1071_pp1_iter32_reg;
        tmp_599_reg_1071_pp1_iter34_reg <= tmp_599_reg_1071_pp1_iter33_reg;
        tmp_599_reg_1071_pp1_iter35_reg <= tmp_599_reg_1071_pp1_iter34_reg;
        tmp_599_reg_1071_pp1_iter36_reg <= tmp_599_reg_1071_pp1_iter35_reg;
        tmp_599_reg_1071_pp1_iter37_reg <= tmp_599_reg_1071_pp1_iter36_reg;
        tmp_599_reg_1071_pp1_iter38_reg <= tmp_599_reg_1071_pp1_iter37_reg;
        tmp_599_reg_1071_pp1_iter39_reg <= tmp_599_reg_1071_pp1_iter38_reg;
        tmp_599_reg_1071_pp1_iter40_reg <= tmp_599_reg_1071_pp1_iter39_reg;
        tmp_599_reg_1071_pp1_iter41_reg <= tmp_599_reg_1071_pp1_iter40_reg;
        tmp_599_reg_1071_pp1_iter42_reg <= tmp_599_reg_1071_pp1_iter41_reg;
        tmp_599_reg_1071_pp1_iter43_reg <= tmp_599_reg_1071_pp1_iter42_reg;
        tmp_599_reg_1071_pp1_iter44_reg <= tmp_599_reg_1071_pp1_iter43_reg;
        tmp_599_reg_1071_pp1_iter45_reg <= tmp_599_reg_1071_pp1_iter44_reg;
        tmp_599_reg_1071_pp1_iter46_reg <= tmp_599_reg_1071_pp1_iter45_reg;
        tmp_599_reg_1071_pp1_iter47_reg <= tmp_599_reg_1071_pp1_iter46_reg;
        tmp_599_reg_1071_pp1_iter48_reg <= tmp_599_reg_1071_pp1_iter47_reg;
        tmp_599_reg_1071_pp1_iter49_reg <= tmp_599_reg_1071_pp1_iter48_reg;
        tmp_599_reg_1071_pp1_iter50_reg <= tmp_599_reg_1071_pp1_iter49_reg;
        tmp_599_reg_1071_pp1_iter51_reg <= tmp_599_reg_1071_pp1_iter50_reg;
        tmp_599_reg_1071_pp1_iter52_reg <= tmp_599_reg_1071_pp1_iter51_reg;
        tmp_599_reg_1071_pp1_iter53_reg <= tmp_599_reg_1071_pp1_iter52_reg;
        tmp_599_reg_1071_pp1_iter54_reg <= tmp_599_reg_1071_pp1_iter53_reg;
        tmp_599_reg_1071_pp1_iter55_reg <= tmp_599_reg_1071_pp1_iter54_reg;
        tmp_599_reg_1071_pp1_iter56_reg <= tmp_599_reg_1071_pp1_iter55_reg;
        tmp_599_reg_1071_pp1_iter57_reg <= tmp_599_reg_1071_pp1_iter56_reg;
        tmp_599_reg_1071_pp1_iter58_reg <= tmp_599_reg_1071_pp1_iter57_reg;
        tmp_599_reg_1071_pp1_iter59_reg <= tmp_599_reg_1071_pp1_iter58_reg;
        tmp_599_reg_1071_pp1_iter60_reg <= tmp_599_reg_1071_pp1_iter59_reg;
        tmp_599_reg_1071_pp1_iter61_reg <= tmp_599_reg_1071_pp1_iter60_reg;
        tmp_600_reg_1036_pp1_iter2_reg <= tmp_600_reg_1036_pp1_iter1_reg;
        tmp_600_reg_1036_pp1_iter3_reg <= tmp_600_reg_1036_pp1_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond7_reg_1144 == 1'd0))) begin
        global_cin_V_addr_1_1_reg_1153 <= m_axi_global_cin_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1011_pp1_iter69_reg == 1'd0))) begin
        global_cin_V_addr_2_s_reg_1096 <= m_axi_global_cin_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond2_reg_934 == 1'd0))) begin
        global_cin_V_addr_re_reg_943 <= m_axi_global_cin_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten_next_reg_1015 <= indvar_flatten_next_fu_571_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        indvar_next3_reg_1148 <= indvar_next3_fu_777_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_next_reg_938 <= indvar_next_fu_491_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state138)) begin
        sum4_reg_1128 <= sum4_fu_752_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1011_pp1_iter61_reg == 1'd0))) begin
        sum6_reg_1081 <= sum6_fu_678_p2;
        tmp_602_reg_1086 <= tmp_602_fu_684_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        sum_reg_913 <= sum_fu_459_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state122)) begin
        tmp3_reg_1101 <= grp_fu_394_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp4_cast_reg_948 <= tmp4_cast_fu_502_p1;
        tmp_414_reg_953 <= tmp_414_fu_505_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (brmerge_fu_364_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (or_cond2_fu_382_p2 == 1'd0))) begin
        tmp4_reg_872 <= tmp4_fu_388_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        tmp6_reg_973 <= grp_fu_514_p2;
        tmp_554_add_i32_shr_reg_978 <= {{tmp_554_add_fu_531_p2[31:6]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1011_pp1_iter3_reg == 1'd0))) begin
        tmp_187_reg_1051 <= tmp_187_fu_640_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_399_reg_877 <= grp_fu_370_p2;
        tmp_593_reg_882 <= tmp_593_fu_400_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_400_reg_892 <= grp_fu_404_p2;
        tmp_403_reg_897 <= grp_fu_411_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state129)) begin
        tmp_406_reg_1106 <= grp_fu_703_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state136)) begin
        tmp_407_reg_1118 <= grp_fu_707_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        tmp_413_reg_958 <= tmp_413_fu_518_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        tmp_416_reg_963 <= grp_fu_510_p2;
        tmp_596_reg_968 <= tmp_596_fu_522_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_reg_1011 == 1'd0))) begin
        tmp_423_mid2_v_v_v_v_1_reg_1041 <= tmp_423_mid2_v_v_v_v_1_fu_623_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1011_pp1_iter7_reg == 1'd0))) begin
        tmp_423_mid2_v_v_v_v_2_reg_1056 <= grp_fu_627_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1011_pp1_iter8_reg == 1'd0))) begin
        tmp_423_mid2_v_v_v_v_3_reg_1061 <= tmp_423_mid2_v_v_v_v_3_fu_645_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1011_pp1_iter15_reg == 1'd0))) begin
        tmp_423_mid2_v_v_v_v_reg_1066 <= grp_fu_649_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1011_pp1_iter2_reg == 1'd0))) begin
        tmp_477_cast_mid2_v_2_reg_1046 <= grp_fu_788_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_fu_566_p2 == 1'd0))) begin
        tmp_477_cast_mid2_v_s_reg_1020 <= tmp_477_cast_mid2_v_s_fu_596_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp_533_add_i32_shr_1_reg_929[22 : 0] <= tmp_533_add_i32_shr_1_fu_479_p1[22 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_533_add_i32_shr_reg_907 <= {{tmp_533_add_fu_437_p2[28:6]}};
        tmp_reg_902 <= {{global_cin_offset_fu_416_p2[31:4]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state130)) begin
        tmp_544_add_i32_shr_reg_1112 <= {{tmp_544_add_fu_716_p2[31:6]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state137)) begin
        tmp_594_reg_1123 <= {{global_cin_offset_1_fu_732_p2[31:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_fu_566_p2 == 1'd0))) begin
        tmp_598_reg_1026 <= tmp_598_fu_604_p1;
        tmp_600_reg_1036 <= tmp_600_fu_614_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1011_pp1_iter16_reg == 1'd0))) begin
        tmp_599_reg_1071 <= {{tmp_423_mid2_v_v_fu_657_p2[31:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten_reg_1011_pp1_iter60_reg == 1'd0))) begin
        tmp_601_reg_1076 <= grp_fu_618_p2;
    end
end

always @ (*) begin
    if ((exitcond2_fu_486_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state24 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state24 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_566_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state44 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state44 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond7_fu_772_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state146 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state146 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state149) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter68 == 1'b0) & (ap_enable_reg_pp1_iter67 == 1'b0) & (ap_enable_reg_pp1_iter66 == 1'b0) & (ap_enable_reg_pp1_iter65 == 1'b0) & (ap_enable_reg_pp1_iter64 == 1'b0) & (ap_enable_reg_pp1_iter62 == 1'b0) & (ap_enable_reg_pp1_iter61 == 1'b0) & (ap_enable_reg_pp1_iter60 == 1'b0) & (ap_enable_reg_pp1_iter59 == 1'b0) & (ap_enable_reg_pp1_iter58 == 1'b0) & (ap_enable_reg_pp1_iter57 == 1'b0) & (ap_enable_reg_pp1_iter56 == 1'b0) & (ap_enable_reg_pp1_iter55 == 1'b0) & (ap_enable_reg_pp1_iter54 == 1'b0) & (ap_enable_reg_pp1_iter53 == 1'b0) & (ap_enable_reg_pp1_iter52 == 1'b0) & (ap_enable_reg_pp1_iter51 == 1'b0) & (ap_enable_reg_pp1_iter50 == 1'b0) & (ap_enable_reg_pp1_iter49 == 1'b0) & (ap_enable_reg_pp1_iter48 == 1'b0) & (ap_enable_reg_pp1_iter47 == 1'b0) & (ap_enable_reg_pp1_iter46 == 1'b0) & (ap_enable_reg_pp1_iter45 == 1'b0) & (ap_enable_reg_pp1_iter44 == 1'b0) & (ap_enable_reg_pp1_iter43 == 1'b0) & (ap_enable_reg_pp1_iter42 == 1'b0) & (ap_enable_reg_pp1_iter41 == 1'b0) & (ap_enable_reg_pp1_iter40 == 1'b0) & (ap_enable_reg_pp1_iter39 == 1'b0) & (ap_enable_reg_pp1_iter38 == 1'b0) & (ap_enable_reg_pp1_iter37 == 1'b0) & (ap_enable_reg_pp1_iter36 == 1'b0) & (ap_enable_reg_pp1_iter35 == 1'b0) & (ap_enable_reg_pp1_iter34 == 1'b0) & (ap_enable_reg_pp1_iter33 == 1'b0) & (ap_enable_reg_pp1_iter32 == 1'b0) & (ap_enable_reg_pp1_iter31 == 1'b0) & (ap_enable_reg_pp1_iter30 == 1'b0) & (ap_enable_reg_pp1_iter29 == 1'b0) & (ap_enable_reg_pp1_iter28 == 1'b0) & (ap_enable_reg_pp1_iter27 == 1'b0) & (ap_enable_reg_pp1_iter26 == 1'b0) & (ap_enable_reg_pp1_iter25 == 1'b0) & (ap_enable_reg_pp1_iter24 == 1'b0) & (ap_enable_reg_pp1_iter23 == 1'b0) & (ap_enable_reg_pp1_iter22 == 1'b0) & (ap_enable_reg_pp1_iter21 == 1'b0) & (ap_enable_reg_pp1_iter20 == 1'b0) & (ap_enable_reg_pp1_iter19 == 1'b0) & (ap_enable_reg_pp1_iter18 == 1'b0) & (ap_enable_reg_pp1_iter17 == 1'b0) & (ap_enable_reg_pp1_iter16 == 1'b0) & (ap_enable_reg_pp1_iter15 == 1'b0) & (ap_enable_reg_pp1_iter14 == 1'b0) & (ap_enable_reg_pp1_iter13 == 1'b0) & (ap_enable_reg_pp1_iter12 == 1'b0) & (ap_enable_reg_pp1_iter11 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter70 == 1'b0) & (ap_enable_reg_pp1_iter63 == 1'b0) & (ap_enable_reg_pp1_iter71 == 1'b0) & (ap_enable_reg_pp1_iter69 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_reg_1011 == 1'd0))) begin
        ap_phi_mux_hh2_phi_fu_308_p4 = tmp_477_cast_mid2_v_s_reg_1020;
    end else begin
        ap_phi_mux_hh2_phi_fu_308_p4 = hh2_reg_304;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond7_reg_1144 == 1'd0))) begin
        ap_phi_mux_indvar9_phi_fu_330_p4 = indvar_next3_reg_1148;
    end else begin
        ap_phi_mux_indvar9_phi_fu_330_p4 = indvar9_reg_326;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_reg_1011 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_296_p4 = indvar_flatten_next_reg_1015;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_296_p4 = indvar_flatten_reg_292;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond2_reg_934 == 1'd0))) begin
        ap_phi_mux_indvar_phi_fu_284_p4 = indvar_next_reg_938;
    end else begin
        ap_phi_mux_indvar_phi_fu_284_p4 = indvar_reg_280;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_global_cin_V_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_global_cin_V_ARREADY = m_axi_global_cin_V_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_global_cin_V_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        cin_burst_buf_V_address0 = indvar1_fu_783_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter71 == 1'b1))) begin
        cin_burst_buf_V_address0 = tmp_187_cast_fu_699_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        cin_burst_buf_V_address0 = indvar3_fu_497_p1;
    end else begin
        cin_burst_buf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter71 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        cin_burst_buf_V_ce0 = 1'b1;
    end else begin
        cin_burst_buf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        cin_burst_buf_V_d0 = global_cin_V_addr_1_1_reg_1153;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter71 == 1'b1))) begin
        cin_burst_buf_V_d0 = global_cin_V_addr_2_s_reg_1096;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        cin_burst_buf_V_d0 = global_cin_V_addr_re_reg_943;
    end else begin
        cin_burst_buf_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1) & (exitcond7_reg_1144_pp2_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter71 == 1'b1) & (exitcond_flatten_reg_1011_pp1_iter70_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond2_reg_934_pp0_iter1_reg == 1'd0)))) begin
        cin_burst_buf_V_we0 = 1'b1;
    end else begin
        cin_burst_buf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state139) | (1'b1 == ap_CS_fsm_state17) | ((tmp_602_reg_1086 == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter63 == 1'b1)))) begin
        global_cin_V_blk_n_AR = m_axi_global_cin_V_ARREADY;
    end else begin
        global_cin_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter70 == 1'b1) & (exitcond_flatten_reg_1011_pp1_iter69_reg == 1'd0)) | ((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond7_reg_1144 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond2_reg_934 == 1'd0)))) begin
        global_cin_V_blk_n_R = m_axi_global_cin_V_RVALID;
    end else begin
        global_cin_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_618_ce = 1'b1;
    end else begin
        grp_fu_618_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_627_ce = 1'b1;
    end else begin
        grp_fu_627_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_649_ce = 1'b1;
    end else begin
        grp_fu_649_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_788_ce = 1'b1;
    end else begin
        grp_fu_788_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_global_cin_V_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state139)) begin
            m_axi_global_cin_V_ARADDR = sum4_cast_fu_758_p1;
        end else if ((1'b1 == ap_condition_1067)) begin
            m_axi_global_cin_V_ARADDR = sum6_cast_fu_689_p1;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            m_axi_global_cin_V_ARADDR = sum_cast_fu_465_p1;
        end else begin
            m_axi_global_cin_V_ARADDR = 'bx;
        end
    end else begin
        m_axi_global_cin_V_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_global_cin_V_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state139)) begin
            m_axi_global_cin_V_ARLEN = tmp_418_fu_768_p1;
        end else if ((1'b1 == ap_condition_1067)) begin
            m_axi_global_cin_V_ARLEN = tmp_422_reg_1001;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            m_axi_global_cin_V_ARLEN = tmp_533_add_i32_shr_s_fu_475_p1;
        end else begin
            m_axi_global_cin_V_ARLEN = 'bx;
        end
    end else begin
        m_axi_global_cin_V_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_m_axi_global_cin_V_ARREADY == 1'b0) & (tmp_602_reg_1086 == 1'd1) & (ap_enable_reg_pp1_iter63 == 1'b1) & (1'b0 == ap_block_pp1_stage0_01001)) | ((ap_reg_ioackin_m_axi_global_cin_V_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state139)) | ((ap_reg_ioackin_m_axi_global_cin_V_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state17)))) begin
        m_axi_global_cin_V_ARVALID = 1'b1;
    end else begin
        m_axi_global_cin_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter70 == 1'b1) & (exitcond_flatten_reg_1011_pp1_iter69_reg == 1'd0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond7_reg_1144 == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond2_reg_934 == 1'd0)))) begin
        m_axi_global_cin_V_RREADY = 1'b1;
    end else begin
        m_axi_global_cin_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (or_cond2_fu_382_p2 == 1'd1) & (brmerge_fu_364_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state117;
            end else if (((ap_start == 1'b1) & (brmerge_fu_364_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (or_cond2_fu_382_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (brmerge_fu_364_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((ap_sig_ioackin_m_axi_global_cin_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond2_fu_486_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond2_fu_486_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_flatten_fu_566_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter70 == 1'b0) & (ap_enable_reg_pp1_iter71 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter70 == 1'b0) & (ap_enable_reg_pp1_iter71 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_flatten_fu_566_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state116;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            if (((ap_sig_ioackin_m_axi_global_cin_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state139))) begin
                ap_NS_fsm = ap_ST_fsm_state140;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state139;
            end
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((exitcond7_fu_772_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((exitcond7_fu_772_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state149;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign FILTER_S_cast1_cast_fu_338_p1 = FILTER_S;

assign LAYER_IN_NUM_T_cast_fu_342_p1 = LAYER_IN_NUM_T;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state123 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state129 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state130 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state136 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state137 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state138 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state139 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state145 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state149 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_global_cin_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond2_reg_934 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_global_cin_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond2_reg_934 == 1'd0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((m_axi_global_cin_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter70 == 1'b1) & (exitcond_flatten_reg_1011_pp1_iter69_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((m_axi_global_cin_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter70 == 1'b1) & (exitcond_flatten_reg_1011_pp1_iter69_reg == 1'd0)) | ((1'b1 == ap_block_state107_io) & (ap_enable_reg_pp1_iter63 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((m_axi_global_cin_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter70 == 1'b1) & (exitcond_flatten_reg_1011_pp1_iter69_reg == 1'd0)) | ((1'b1 == ap_block_state107_io) & (ap_enable_reg_pp1_iter63 == 1'b1)));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((m_axi_global_cin_V_RVALID == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (exitcond7_reg_1144 == 1'd0));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((m_axi_global_cin_V_RVALID == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (exitcond7_reg_1144 == 1'd0));
end

assign ap_block_state100_pp1_stage0_iter56 = ~(1'b1 == 1'b1);

assign ap_block_state101_pp1_stage0_iter57 = ~(1'b1 == 1'b1);

assign ap_block_state102_pp1_stage0_iter58 = ~(1'b1 == 1'b1);

assign ap_block_state103_pp1_stage0_iter59 = ~(1'b1 == 1'b1);

assign ap_block_state104_pp1_stage0_iter60 = ~(1'b1 == 1'b1);

assign ap_block_state105_pp1_stage0_iter61 = ~(1'b1 == 1'b1);

assign ap_block_state106_pp1_stage0_iter62 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state107_io = ((ap_sig_ioackin_m_axi_global_cin_V_ARREADY == 1'b0) & (tmp_602_reg_1086 == 1'd1));
end

assign ap_block_state107_pp1_stage0_iter63 = ~(1'b1 == 1'b1);

assign ap_block_state108_pp1_stage0_iter64 = ~(1'b1 == 1'b1);

assign ap_block_state109_pp1_stage0_iter65 = ~(1'b1 == 1'b1);

assign ap_block_state110_pp1_stage0_iter66 = ~(1'b1 == 1'b1);

assign ap_block_state111_pp1_stage0_iter67 = ~(1'b1 == 1'b1);

assign ap_block_state112_pp1_stage0_iter68 = ~(1'b1 == 1'b1);

assign ap_block_state113_pp1_stage0_iter69 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state114_pp1_stage0_iter70 = ((m_axi_global_cin_V_RVALID == 1'b0) & (exitcond_flatten_reg_1011_pp1_iter69_reg == 1'd0));
end

assign ap_block_state115_pp1_stage0_iter71 = ~(1'b1 == 1'b1);

assign ap_block_state146_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state147_pp2_stage0_iter1 = ((m_axi_global_cin_V_RVALID == 1'b0) & (exitcond7_reg_1144 == 1'd0));
end

assign ap_block_state148_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state25_pp0_stage0_iter1 = ((m_axi_global_cin_V_RVALID == 1'b0) & (exitcond2_reg_934 == 1'd0));
end

assign ap_block_state26_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp1_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp1_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp1_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp1_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp1_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp1_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp1_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp1_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp1_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp1_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp1_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp1_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp1_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp1_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp1_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp1_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp1_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp1_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp1_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp1_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp1_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp1_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp1_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp1_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp1_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp1_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp1_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp1_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp1_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state83_pp1_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state84_pp1_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state85_pp1_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp1_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state87_pp1_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state88_pp1_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state89_pp1_stage0_iter45 = ~(1'b1 == 1'b1);

assign ap_block_state90_pp1_stage0_iter46 = ~(1'b1 == 1'b1);

assign ap_block_state91_pp1_stage0_iter47 = ~(1'b1 == 1'b1);

assign ap_block_state92_pp1_stage0_iter48 = ~(1'b1 == 1'b1);

assign ap_block_state93_pp1_stage0_iter49 = ~(1'b1 == 1'b1);

assign ap_block_state94_pp1_stage0_iter50 = ~(1'b1 == 1'b1);

assign ap_block_state95_pp1_stage0_iter51 = ~(1'b1 == 1'b1);

assign ap_block_state96_pp1_stage0_iter52 = ~(1'b1 == 1'b1);

assign ap_block_state97_pp1_stage0_iter53 = ~(1'b1 == 1'b1);

assign ap_block_state98_pp1_stage0_iter54 = ~(1'b1 == 1'b1);

assign ap_block_state99_pp1_stage0_iter55 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1067 = ((tmp_602_reg_1086 == 1'd1) & (ap_enable_reg_pp1_iter63 == 1'b1) & (1'b0 == ap_block_pp1_stage0_01001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign brmerge_fu_364_p2 = (tmp2_fu_358_p2 | notrhs_fu_352_p2);

assign cast3_fu_554_p1 = tmp_554_add_i32_shr_reg_978;

assign exitcond2_fu_486_p2 = ((indvar_cast_fu_482_p1 == tmp_533_add_i32_shr_1_reg_929) ? 1'b1 : 1'b0);

assign exitcond7_fu_772_p2 = ((ap_phi_mux_indvar9_phi_fu_330_p4 == tmp_544_add_i32_shr_reg_1112) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_566_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_296_p4 == bound_reg_1006) ? 1'b1 : 1'b0);

assign exitcond_fu_583_p2 = ((indvar2_reg_315 == tmp_554_add_i32_shr_reg_978) ? 1'b1 : 1'b0);

assign global_cin_V_offset_1_fu_456_p1 = global_cin_V_offset;

assign global_cin_V_offset_2_fu_749_p1 = global_cin_V_offset;

assign global_cin_V_offset_3_fu_675_p1 = global_cin_V_offset;

assign global_cin_offset_1_fu_732_p2 = (tmp_407_reg_1118 + cin_offset);

assign global_cin_offset_fu_416_p2 = (tmp_400_reg_892 + cin_offset);

assign grp_fu_394_p0 = grp_fu_394_p00;

assign grp_fu_394_p00 = LAYER_IN_NUM_T;

assign grp_fu_411_p0 = grp_fu_411_p00;

assign grp_fu_411_p00 = LAYER_IN_NUM_T;

assign grp_fu_510_p0 = LAYER_IN_NUM_T_cast_reg_857;

assign grp_fu_557_p0 = grp_fu_557_p00;

assign grp_fu_557_p00 = tmp_413_reg_958;

assign grp_fu_557_p1 = grp_fu_557_p10;

assign grp_fu_557_p10 = tmp_554_add_i32_shr_reg_978;

assign grp_fu_618_p1 = cast3_reg_990;

assign grp_fu_649_p1 = LAYER_IN_NUM_T_cast_reg_857;

assign hh_fu_577_p2 = (32'd1 + ap_phi_mux_hh2_phi_fu_308_p4);

assign indvar1_fu_783_p1 = indvar9_reg_326_pp2_iter1_reg;

assign indvar2_mid2_fu_588_p3 = ((exitcond_fu_583_p2[0:0] === 1'b1) ? 26'd0 : indvar2_reg_315);

assign indvar3_fu_497_p1 = indvar_reg_280_pp0_iter1_reg;

assign indvar_cast_fu_482_p1 = ap_phi_mux_indvar_phi_fu_284_p4;

assign indvar_flatten_next_fu_571_p2 = (ap_phi_mux_indvar_flatten_phi_fu_296_p4 + 58'd1);

assign indvar_next3_fu_777_p2 = (ap_phi_mux_indvar9_phi_fu_330_p4 + 26'd1);

assign indvar_next9_fu_608_p2 = (26'd1 + indvar2_mid2_fu_588_p3);

assign indvar_next_fu_491_p2 = (ap_phi_mux_indvar_phi_fu_284_p4 + 26'd1);

assign m_axi_global_cin_V_ARBURST = 2'd0;

assign m_axi_global_cin_V_ARCACHE = 4'd0;

assign m_axi_global_cin_V_ARID = 1'd0;

assign m_axi_global_cin_V_ARLOCK = 2'd0;

assign m_axi_global_cin_V_ARPROT = 3'd0;

assign m_axi_global_cin_V_ARQOS = 4'd0;

assign m_axi_global_cin_V_ARREGION = 4'd0;

assign m_axi_global_cin_V_ARSIZE = 3'd0;

assign m_axi_global_cin_V_ARUSER = 1'd0;

assign m_axi_global_cin_V_AWADDR = 64'd0;

assign m_axi_global_cin_V_AWBURST = 2'd0;

assign m_axi_global_cin_V_AWCACHE = 4'd0;

assign m_axi_global_cin_V_AWID = 1'd0;

assign m_axi_global_cin_V_AWLEN = 32'd0;

assign m_axi_global_cin_V_AWLOCK = 2'd0;

assign m_axi_global_cin_V_AWPROT = 3'd0;

assign m_axi_global_cin_V_AWQOS = 4'd0;

assign m_axi_global_cin_V_AWREGION = 4'd0;

assign m_axi_global_cin_V_AWSIZE = 3'd0;

assign m_axi_global_cin_V_AWUSER = 1'd0;

assign m_axi_global_cin_V_AWVALID = 1'b0;

assign m_axi_global_cin_V_BREADY = 1'b0;

assign m_axi_global_cin_V_WDATA = 512'd0;

assign m_axi_global_cin_V_WID = 1'd0;

assign m_axi_global_cin_V_WLAST = 1'b0;

assign m_axi_global_cin_V_WSTRB = 64'd0;

assign m_axi_global_cin_V_WUSER = 1'd0;

assign m_axi_global_cin_V_WVALID = 1'b0;

assign notlhs_fu_346_p0 = LAYER_IN_H_HW;

assign notlhs_fu_346_p2 = ((notlhs_fu_346_p0 > 32'd14) ? 1'b1 : 1'b0);

assign notrhs_fu_352_p0 = LAYER_IN_W_HW;

assign notrhs_fu_352_p2 = ((notrhs_fu_352_p0 > 32'd98) ? 1'b1 : 1'b0);

assign or_cond2_fu_382_p1 = change;

assign or_cond2_fu_382_p2 = (tmp_s_fu_376_p2 & or_cond2_fu_382_p1);

assign sum4_cast_fu_758_p1 = sum4_reg_1128;

assign sum4_fu_752_p2 = (tmp_409_cast_fu_746_p1 + global_cin_V_offset_2_fu_749_p1);

assign sum6_cast_fu_689_p1 = sum6_reg_1081;

assign sum6_fu_678_p2 = (tmp_423_mid2_cast_fu_672_p1 + global_cin_V_offset_3_fu_675_p1);

assign sum_cast_fu_465_p1 = sum_reg_913;

assign sum_fu_459_p2 = (tmp_402_cast_fu_453_p1 + global_cin_V_offset_1_fu_456_p1);

assign tmp2_fu_358_p1 = max_pool;

assign tmp2_fu_358_p2 = (tmp2_fu_358_p1 | notlhs_fu_346_p2);

assign tmp4_cast_fu_502_p1 = $signed(tmp4_reg_872);

assign tmp4_fu_388_p2 = ($signed(17'd131071) + $signed(FILTER_S_cast1_cast_fu_338_p1));

assign tmp_187_cast_fu_699_p1 = tmp_187_reg_1051_pp1_iter70_reg;

assign tmp_187_fu_640_p2 = (tmp_477_cast_mid2_fu_631_p4 + tmp_600_reg_1036_pp1_iter3_reg);

assign tmp_402_cast_fu_453_p1 = tmp_reg_902;

assign tmp_405_fu_430_p3 = {{tmp_403_reg_897}, {2'd0}};

assign tmp_409_cast_fu_746_p1 = tmp_594_reg_1123;

assign tmp_413_fu_518_p0 = LAYER_IN_H_T;

assign tmp_413_fu_518_p2 = ($signed(tmp_413_fu_518_p0) + $signed(tmp4_cast_reg_948));

assign tmp_414_fu_505_p0 = LAYER_IN_W_T;

assign tmp_414_fu_505_p2 = ($signed(tmp_414_fu_505_p0) + $signed(tmp4_cast_fu_502_p1));

assign tmp_418_fu_768_p1 = tmp_544_add_i32_shr_reg_1112;

assign tmp_422_fu_563_p1 = tmp_554_add_i32_shr_reg_978;

assign tmp_423_mid2_cast_fu_672_p1 = tmp_599_reg_1071_pp1_iter61_reg;

assign tmp_423_mid2_v_v_fu_657_p2 = (tmp_423_mid2_v_v_v_fu_653_p2 + tmp_415_reg_996);

assign tmp_423_mid2_v_v_v_fu_653_p2 = (tmp_423_mid2_v_v_v_v_reg_1066 + cin_offset);

assign tmp_423_mid2_v_v_v_v_1_fu_623_p2 = (tmp_477_cast_mid2_v_s_reg_1020 + in_h_iter);

assign tmp_423_mid2_v_v_v_v_3_fu_645_p2 = (tmp_423_mid2_v_v_v_v_2_reg_1056 + in_w_iter);

assign tmp_477_cast_mid2_fu_631_p4 = {{tmp_477_cast_mid2_v_2_reg_1046[17:4]}};

assign tmp_477_cast_mid2_v_s_fu_596_p3 = ((exitcond_fu_583_p2[0:0] === 1'b1) ? hh_fu_577_p2 : ap_phi_mux_hh2_phi_fu_308_p4);

assign tmp_533_add_fu_437_p2 = (29'd63 + tmp_405_fu_430_p3);

assign tmp_533_add_i32_shr_1_fu_479_p1 = tmp_533_add_i32_shr_reg_907;

assign tmp_533_add_i32_shr_s_fu_475_p1 = tmp_533_add_i32_shr_reg_907;

assign tmp_544_add_fu_716_p2 = (32'd63 + tmp_595_fu_711_p2);

assign tmp_554_add_fu_531_p2 = (32'd63 + tmp_597_fu_526_p2);

assign tmp_593_fu_400_p1 = grp_fu_370_p2[26:0];

assign tmp_595_fu_711_p2 = tmp_406_reg_1106 << 32'd2;

assign tmp_596_fu_522_p1 = grp_fu_510_p2[17:0];

assign tmp_597_fu_526_p2 = tmp_416_reg_963 << 32'd2;

assign tmp_598_fu_604_p1 = tmp_477_cast_mid2_v_s_fu_596_p3[17:0];

assign tmp_600_fu_614_p1 = indvar2_mid2_fu_588_p3[13:0];

assign tmp_602_fu_684_p2 = ((tmp_601_reg_1076 == 58'd0) ? 1'b1 : 1'b0);

assign tmp_s_fu_376_p2 = ((FILTER_S == 16'd1) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    LAYER_IN_NUM_T_cast_reg_857[31:16] <= 16'b0000000000000000;
    tmp_533_add_i32_shr_1_reg_929[26:23] <= 4'b0000;
    cast3_reg_990[57:26] <= 32'b00000000000000000000000000000000;
    tmp_422_reg_1001[31:26] <= 6'b000000;
end

endmodule //cin_load_ddr_read
