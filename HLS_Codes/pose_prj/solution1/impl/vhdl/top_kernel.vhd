-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_kernel is
generic (
    C_M_AXI_GMEM1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM3_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM3_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_GMEM2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GCONTROL_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GCONTROL_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GCONTROL_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GCONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GCONTROL_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GCONTROL_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GCONTROL_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GCONTROL_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM1_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM2_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GCONTROL_USER_VALUE : INTEGER := 0;
    C_M_AXI_GCONTROL_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GCONTROL_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_BUSER_WIDTH-1 downto 0);
    m_axi_gmem3_AWVALID : OUT STD_LOGIC;
    m_axi_gmem3_AWREADY : IN STD_LOGIC;
    m_axi_gmem3_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ADDR_WIDTH-1 downto 0);
    m_axi_gmem3_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem3_WVALID : OUT STD_LOGIC;
    m_axi_gmem3_WREADY : IN STD_LOGIC;
    m_axi_gmem3_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH-1 downto 0);
    m_axi_gmem3_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem3_WLAST : OUT STD_LOGIC;
    m_axi_gmem3_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_WUSER_WIDTH-1 downto 0);
    m_axi_gmem3_ARVALID : OUT STD_LOGIC;
    m_axi_gmem3_ARREADY : IN STD_LOGIC;
    m_axi_gmem3_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ADDR_WIDTH-1 downto 0);
    m_axi_gmem3_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem3_RVALID : IN STD_LOGIC;
    m_axi_gmem3_RREADY : OUT STD_LOGIC;
    m_axi_gmem3_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH-1 downto 0);
    m_axi_gmem3_RLAST : IN STD_LOGIC;
    m_axi_gmem3_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_RUSER_WIDTH-1 downto 0);
    m_axi_gmem3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BVALID : IN STD_LOGIC;
    m_axi_gmem3_BREADY : OUT STD_LOGIC;
    m_axi_gmem3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_BUSER_WIDTH-1 downto 0);
    m_axi_gmem2_AWVALID : OUT STD_LOGIC;
    m_axi_gmem2_AWREADY : IN STD_LOGIC;
    m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem2_WVALID : OUT STD_LOGIC;
    m_axi_gmem2_WREADY : IN STD_LOGIC;
    m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem2_WLAST : OUT STD_LOGIC;
    m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_WUSER_WIDTH-1 downto 0);
    m_axi_gmem2_ARVALID : OUT STD_LOGIC;
    m_axi_gmem2_ARREADY : IN STD_LOGIC;
    m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RVALID : IN STD_LOGIC;
    m_axi_gmem2_RREADY : OUT STD_LOGIC;
    m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_RLAST : IN STD_LOGIC;
    m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_RUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BVALID : IN STD_LOGIC;
    m_axi_gmem2_BREADY : OUT STD_LOGIC;
    m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_BUSER_WIDTH-1 downto 0);
    m_axi_gcontrol_AWVALID : OUT STD_LOGIC;
    m_axi_gcontrol_AWREADY : IN STD_LOGIC;
    m_axi_gcontrol_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GCONTROL_ADDR_WIDTH-1 downto 0);
    m_axi_gcontrol_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GCONTROL_ID_WIDTH-1 downto 0);
    m_axi_gcontrol_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gcontrol_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gcontrol_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gcontrol_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gcontrol_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gcontrol_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gcontrol_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gcontrol_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gcontrol_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GCONTROL_AWUSER_WIDTH-1 downto 0);
    m_axi_gcontrol_WVALID : OUT STD_LOGIC;
    m_axi_gcontrol_WREADY : IN STD_LOGIC;
    m_axi_gcontrol_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GCONTROL_DATA_WIDTH-1 downto 0);
    m_axi_gcontrol_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GCONTROL_DATA_WIDTH/8-1 downto 0);
    m_axi_gcontrol_WLAST : OUT STD_LOGIC;
    m_axi_gcontrol_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GCONTROL_ID_WIDTH-1 downto 0);
    m_axi_gcontrol_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GCONTROL_WUSER_WIDTH-1 downto 0);
    m_axi_gcontrol_ARVALID : OUT STD_LOGIC;
    m_axi_gcontrol_ARREADY : IN STD_LOGIC;
    m_axi_gcontrol_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GCONTROL_ADDR_WIDTH-1 downto 0);
    m_axi_gcontrol_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GCONTROL_ID_WIDTH-1 downto 0);
    m_axi_gcontrol_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gcontrol_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gcontrol_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gcontrol_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gcontrol_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gcontrol_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gcontrol_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gcontrol_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gcontrol_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GCONTROL_ARUSER_WIDTH-1 downto 0);
    m_axi_gcontrol_RVALID : IN STD_LOGIC;
    m_axi_gcontrol_RREADY : OUT STD_LOGIC;
    m_axi_gcontrol_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GCONTROL_DATA_WIDTH-1 downto 0);
    m_axi_gcontrol_RLAST : IN STD_LOGIC;
    m_axi_gcontrol_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GCONTROL_ID_WIDTH-1 downto 0);
    m_axi_gcontrol_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GCONTROL_RUSER_WIDTH-1 downto 0);
    m_axi_gcontrol_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gcontrol_BVALID : IN STD_LOGIC;
    m_axi_gcontrol_BREADY : OUT STD_LOGIC;
    m_axi_gcontrol_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gcontrol_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GCONTROL_ID_WIDTH-1 downto 0);
    m_axi_gcontrol_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GCONTROL_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of top_kernel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "top_kernel,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7vx690tffg1761-2,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.349000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=586,HLS_SYN_DSP=293,HLS_SYN_FF=125322,HLS_SYN_LUT=77566,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_GMEM3_USER_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM3_PROT_VALUE : INTEGER range 63 downto 0 := 0;
    constant C_M_AXI_GMEM3_CACHE_VALUE : INTEGER range 63 downto 0 := 3;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFF9 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal global_cin_V : STD_LOGIC_VECTOR (63 downto 0);
    signal global_prev_cin_V : STD_LOGIC_VECTOR (63 downto 0);
    signal global_cout_V : STD_LOGIC_VECTOR (63 downto 0);
    signal global_weight_V : STD_LOGIC_VECTOR (63 downto 0);
    signal global_bias_V : STD_LOGIC_VECTOR (63 downto 0);
    signal layer_config_V : STD_LOGIC_VECTOR (63 downto 0);
    signal gcontrol_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal gcontrol_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal exitcond6_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_AWVALID : STD_LOGIC;
    signal gmem1_AWREADY : STD_LOGIC;
    signal gmem1_WVALID : STD_LOGIC;
    signal gmem1_WREADY : STD_LOGIC;
    signal gmem1_ARVALID : STD_LOGIC;
    signal gmem1_ARREADY : STD_LOGIC;
    signal gmem1_RVALID : STD_LOGIC;
    signal gmem1_RREADY : STD_LOGIC;
    signal gmem1_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem1_RLAST : STD_LOGIC;
    signal gmem1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BVALID : STD_LOGIC;
    signal gmem1_BREADY : STD_LOGIC;
    signal gmem1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_AWREADY : STD_LOGIC;
    signal gmem2_WREADY : STD_LOGIC;
    signal gmem2_ARVALID : STD_LOGIC;
    signal gmem2_ARREADY : STD_LOGIC;
    signal gmem2_RVALID : STD_LOGIC;
    signal gmem2_RREADY : STD_LOGIC;
    signal gmem2_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal gmem2_RLAST : STD_LOGIC;
    signal gmem2_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem2_BVALID : STD_LOGIC;
    signal gmem2_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem2_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gcontrol_AWREADY : STD_LOGIC;
    signal gcontrol_WREADY : STD_LOGIC;
    signal gcontrol_ARVALID : STD_LOGIC;
    signal gcontrol_ARREADY : STD_LOGIC;
    signal gcontrol_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gcontrol_RVALID : STD_LOGIC;
    signal gcontrol_RREADY : STD_LOGIC;
    signal gcontrol_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gcontrol_RLAST : STD_LOGIC;
    signal gcontrol_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gcontrol_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gcontrol_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gcontrol_BVALID : STD_LOGIC;
    signal gcontrol_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gcontrol_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gcontrol_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_71_cast_fu_251_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_71_cast_reg_388 : STD_LOGIC_VECTOR (62 downto 0);
    signal global_bias_V9_reg_393 : STD_LOGIC_VECTOR (57 downto 0);
    signal global_weight_V7_reg_398 : STD_LOGIC_VECTOR (57 downto 0);
    signal global_cout_V5_reg_403 : STD_LOGIC_VECTOR (57 downto 0);
    signal global_cin_V1_reg_408 : STD_LOGIC_VECTOR (57 downto 0);
    signal layer_id_1_fu_301_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer_id_1_reg_421 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal gcontrol_addr_reg_426 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_cast_fu_344_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_cast_reg_432 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_sig_ioackin_gcontrol_ARREADY : STD_LOGIC;
    signal tmp_27_fu_357_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_reg_442 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal indvar_next5_fu_368_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal indvar_next5_reg_450 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_block_state10 : BOOLEAN;
    signal gcontrol_addr_read_reg_455 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_374_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_460 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal config_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal nxt_layer_batch_reg_470 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal config_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal config_ce0 : STD_LOGIC;
    signal config_we0 : STD_LOGIC;
    signal config_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal config_ce1 : STD_LOGIC;
    signal config_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_engine_fu_228_m_axi_global_cin_V_AWVALID : STD_LOGIC;
    signal grp_engine_fu_228_m_axi_global_cin_V_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_engine_fu_228_m_axi_global_cin_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_engine_fu_228_m_axi_global_cin_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_engine_fu_228_m_axi_global_cin_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_engine_fu_228_m_axi_global_cin_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_engine_fu_228_m_axi_global_cin_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_engine_fu_228_m_axi_global_cin_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_engine_fu_228_m_axi_global_cin_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_engine_fu_228_m_axi_global_cin_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_engine_fu_228_m_axi_global_cin_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_engine_fu_228_m_axi_global_cin_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_engine_fu_228_m_axi_global_cin_V_WVALID : STD_LOGIC;
    signal grp_engine_fu_228_m_axi_global_cin_V_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_engine_fu_228_m_axi_global_cin_V_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_engine_fu_228_m_axi_global_cin_V_WLAST : STD_LOGIC;
    signal grp_engine_fu_228_m_axi_global_cin_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_engine_fu_228_m_axi_global_cin_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_engine_fu_228_m_axi_global_cin_V_ARVALID : STD_LOGIC;
    signal grp_engine_fu_228_m_axi_global_cin_V_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_engine_fu_228_m_axi_global_cin_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_engine_fu_228_m_axi_global_cin_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_engine_fu_228_m_axi_global_cin_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_engine_fu_228_m_axi_global_cin_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_engine_fu_228_m_axi_global_cin_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_engine_fu_228_m_axi_global_cin_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_engine_fu_228_m_axi_global_cin_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_engine_fu_228_m_axi_global_cin_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_engine_fu_228_m_axi_global_cin_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_engine_fu_228_m_axi_global_cin_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_engine_fu_228_m_axi_global_cin_V_RREADY : STD_LOGIC;
    signal grp_engine_fu_228_m_axi_global_cin_V_BREADY : STD_LOGIC;
    signal grp_engine_fu_228_m_axi_global_weight_V_AWVALID : STD_LOGIC;
    signal grp_engine_fu_228_m_axi_global_weight_V_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_engine_fu_228_m_axi_global_weight_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_engine_fu_228_m_axi_global_weight_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_engine_fu_228_m_axi_global_weight_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_engine_fu_228_m_axi_global_weight_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_engine_fu_228_m_axi_global_weight_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_engine_fu_228_m_axi_global_weight_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_engine_fu_228_m_axi_global_weight_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_engine_fu_228_m_axi_global_weight_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_engine_fu_228_m_axi_global_weight_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_engine_fu_228_m_axi_global_weight_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_engine_fu_228_m_axi_global_weight_V_WVALID : STD_LOGIC;
    signal grp_engine_fu_228_m_axi_global_weight_V_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_engine_fu_228_m_axi_global_weight_V_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_engine_fu_228_m_axi_global_weight_V_WLAST : STD_LOGIC;
    signal grp_engine_fu_228_m_axi_global_weight_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_engine_fu_228_m_axi_global_weight_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_engine_fu_228_m_axi_global_weight_V_ARVALID : STD_LOGIC;
    signal grp_engine_fu_228_m_axi_global_weight_V_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_engine_fu_228_m_axi_global_weight_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_engine_fu_228_m_axi_global_weight_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_engine_fu_228_m_axi_global_weight_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_engine_fu_228_m_axi_global_weight_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_engine_fu_228_m_axi_global_weight_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_engine_fu_228_m_axi_global_weight_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_engine_fu_228_m_axi_global_weight_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_engine_fu_228_m_axi_global_weight_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_engine_fu_228_m_axi_global_weight_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_engine_fu_228_m_axi_global_weight_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_engine_fu_228_m_axi_global_weight_V_RREADY : STD_LOGIC;
    signal grp_engine_fu_228_m_axi_global_weight_V_BREADY : STD_LOGIC;
    signal grp_engine_fu_228_config_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_engine_fu_228_config_r_ce0 : STD_LOGIC;
    signal grp_engine_fu_228_config_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_engine_fu_228_config_r_we0 : STD_LOGIC;
    signal grp_engine_fu_228_config_r_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_engine_fu_228_config_r_ce1 : STD_LOGIC;
    signal grp_engine_fu_228_config_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_engine_fu_228_config_r_we1 : STD_LOGIC;
    signal grp_engine_fu_228_ap_start : STD_LOGIC;
    signal grp_engine_fu_228_ap_done : STD_LOGIC;
    signal grp_engine_fu_228_ap_ready : STD_LOGIC;
    signal grp_engine_fu_228_ap_idle : STD_LOGIC;
    signal grp_engine_fu_228_ap_continue : STD_LOGIC;
    signal cur_layer_batch_reg_192 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_sync_grp_engine_fu_228_ap_ready : STD_LOGIC;
    signal ap_sync_grp_engine_fu_228_ap_done : STD_LOGIC;
    signal ap_block_state15_on_subcall_done : BOOLEAN;
    signal layer_id_reg_205 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_reg_216 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_engine_fu_228_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_sync_reg_grp_engine_fu_228_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_engine_fu_228_ap_done : STD_LOGIC := '0';
    signal indvar1_fu_379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal layer_config_V12_sum_1_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_gcontrol_ARREADY : STD_LOGIC := '0';
    signal tmp_fu_241_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_s_fu_307_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_315_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_60_cast_fu_321_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal layer_config_V12_sum_fu_325_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_28_fu_340_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);

    component engine IS
    port (
        m_axi_global_cin_V_AWVALID : OUT STD_LOGIC;
        m_axi_global_cin_V_AWREADY : IN STD_LOGIC;
        m_axi_global_cin_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_global_cin_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_cin_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_global_cin_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_global_cin_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_global_cin_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_global_cin_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_global_cin_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_global_cin_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_global_cin_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_global_cin_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_cin_V_WVALID : OUT STD_LOGIC;
        m_axi_global_cin_V_WREADY : IN STD_LOGIC;
        m_axi_global_cin_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_global_cin_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_global_cin_V_WLAST : OUT STD_LOGIC;
        m_axi_global_cin_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_cin_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_cin_V_ARVALID : OUT STD_LOGIC;
        m_axi_global_cin_V_ARREADY : IN STD_LOGIC;
        m_axi_global_cin_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_global_cin_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_cin_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_global_cin_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_global_cin_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_global_cin_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_global_cin_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_global_cin_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_global_cin_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_global_cin_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_global_cin_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_cin_V_RVALID : IN STD_LOGIC;
        m_axi_global_cin_V_RREADY : OUT STD_LOGIC;
        m_axi_global_cin_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_global_cin_V_RLAST : IN STD_LOGIC;
        m_axi_global_cin_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_cin_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_cin_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_global_cin_V_BVALID : IN STD_LOGIC;
        m_axi_global_cin_V_BREADY : OUT STD_LOGIC;
        m_axi_global_cin_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_global_cin_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_cin_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        global_cin_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
        m_axi_global_weight_V_AWVALID : OUT STD_LOGIC;
        m_axi_global_weight_V_AWREADY : IN STD_LOGIC;
        m_axi_global_weight_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_global_weight_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_weight_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_global_weight_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_global_weight_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_global_weight_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_global_weight_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_global_weight_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_global_weight_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_global_weight_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_global_weight_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_weight_V_WVALID : OUT STD_LOGIC;
        m_axi_global_weight_V_WREADY : IN STD_LOGIC;
        m_axi_global_weight_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_global_weight_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_global_weight_V_WLAST : OUT STD_LOGIC;
        m_axi_global_weight_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_weight_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_weight_V_ARVALID : OUT STD_LOGIC;
        m_axi_global_weight_V_ARREADY : IN STD_LOGIC;
        m_axi_global_weight_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_global_weight_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_weight_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_global_weight_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_global_weight_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_global_weight_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_global_weight_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_global_weight_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_global_weight_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_global_weight_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_global_weight_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_weight_V_RVALID : IN STD_LOGIC;
        m_axi_global_weight_V_RREADY : OUT STD_LOGIC;
        m_axi_global_weight_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_global_weight_V_RLAST : IN STD_LOGIC;
        m_axi_global_weight_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_weight_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_weight_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_global_weight_V_BVALID : IN STD_LOGIC;
        m_axi_global_weight_V_BREADY : OUT STD_LOGIC;
        m_axi_global_weight_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_global_weight_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_weight_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        global_weight_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
        global_bias_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
        global_cout_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
        config_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        config_r_ce0 : OUT STD_LOGIC;
        config_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        config_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        config_r_we0 : OUT STD_LOGIC;
        config_r_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        config_r_ce1 : OUT STD_LOGIC;
        config_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        config_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        config_r_we1 : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        global_cin_V_offset_ap_vld : IN STD_LOGIC;
        global_weight_V_offset_ap_vld : IN STD_LOGIC;
        global_bias_V_offset_ap_vld : IN STD_LOGIC;
        global_cout_V_offset_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component top_kernel_config IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_kernel_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        global_cin_V : OUT STD_LOGIC_VECTOR (63 downto 0);
        global_prev_cin_V : OUT STD_LOGIC_VECTOR (63 downto 0);
        global_cout_V : OUT STD_LOGIC_VECTOR (63 downto 0);
        global_weight_V : OUT STD_LOGIC_VECTOR (63 downto 0);
        global_bias_V : OUT STD_LOGIC_VECTOR (63 downto 0);
        layer_config_V : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component top_kernel_gmem1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component top_kernel_gmem2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component top_kernel_gcontrol_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    top_kernel_control_s_axi_U : component top_kernel_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        global_cin_V => global_cin_V,
        global_prev_cin_V => global_prev_cin_V,
        global_cout_V => global_cout_V,
        global_weight_V => global_weight_V,
        global_bias_V => global_bias_V,
        layer_config_V => layer_config_V);

    top_kernel_gmem1_m_axi_U : component top_kernel_gmem1_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 512,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem1_AWVALID,
        AWREADY => m_axi_gmem1_AWREADY,
        AWADDR => m_axi_gmem1_AWADDR,
        AWID => m_axi_gmem1_AWID,
        AWLEN => m_axi_gmem1_AWLEN,
        AWSIZE => m_axi_gmem1_AWSIZE,
        AWBURST => m_axi_gmem1_AWBURST,
        AWLOCK => m_axi_gmem1_AWLOCK,
        AWCACHE => m_axi_gmem1_AWCACHE,
        AWPROT => m_axi_gmem1_AWPROT,
        AWQOS => m_axi_gmem1_AWQOS,
        AWREGION => m_axi_gmem1_AWREGION,
        AWUSER => m_axi_gmem1_AWUSER,
        WVALID => m_axi_gmem1_WVALID,
        WREADY => m_axi_gmem1_WREADY,
        WDATA => m_axi_gmem1_WDATA,
        WSTRB => m_axi_gmem1_WSTRB,
        WLAST => m_axi_gmem1_WLAST,
        WID => m_axi_gmem1_WID,
        WUSER => m_axi_gmem1_WUSER,
        ARVALID => m_axi_gmem1_ARVALID,
        ARREADY => m_axi_gmem1_ARREADY,
        ARADDR => m_axi_gmem1_ARADDR,
        ARID => m_axi_gmem1_ARID,
        ARLEN => m_axi_gmem1_ARLEN,
        ARSIZE => m_axi_gmem1_ARSIZE,
        ARBURST => m_axi_gmem1_ARBURST,
        ARLOCK => m_axi_gmem1_ARLOCK,
        ARCACHE => m_axi_gmem1_ARCACHE,
        ARPROT => m_axi_gmem1_ARPROT,
        ARQOS => m_axi_gmem1_ARQOS,
        ARREGION => m_axi_gmem1_ARREGION,
        ARUSER => m_axi_gmem1_ARUSER,
        RVALID => m_axi_gmem1_RVALID,
        RREADY => m_axi_gmem1_RREADY,
        RDATA => m_axi_gmem1_RDATA,
        RLAST => m_axi_gmem1_RLAST,
        RID => m_axi_gmem1_RID,
        RUSER => m_axi_gmem1_RUSER,
        RRESP => m_axi_gmem1_RRESP,
        BVALID => m_axi_gmem1_BVALID,
        BREADY => m_axi_gmem1_BREADY,
        BRESP => m_axi_gmem1_BRESP,
        BID => m_axi_gmem1_BID,
        BUSER => m_axi_gmem1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem1_ARVALID,
        I_ARREADY => gmem1_ARREADY,
        I_ARADDR => grp_engine_fu_228_m_axi_global_cin_V_ARADDR,
        I_ARID => grp_engine_fu_228_m_axi_global_cin_V_ARID,
        I_ARLEN => grp_engine_fu_228_m_axi_global_cin_V_ARLEN,
        I_ARSIZE => grp_engine_fu_228_m_axi_global_cin_V_ARSIZE,
        I_ARLOCK => grp_engine_fu_228_m_axi_global_cin_V_ARLOCK,
        I_ARCACHE => grp_engine_fu_228_m_axi_global_cin_V_ARCACHE,
        I_ARQOS => grp_engine_fu_228_m_axi_global_cin_V_ARQOS,
        I_ARPROT => grp_engine_fu_228_m_axi_global_cin_V_ARPROT,
        I_ARUSER => grp_engine_fu_228_m_axi_global_cin_V_ARUSER,
        I_ARBURST => grp_engine_fu_228_m_axi_global_cin_V_ARBURST,
        I_ARREGION => grp_engine_fu_228_m_axi_global_cin_V_ARREGION,
        I_RVALID => gmem1_RVALID,
        I_RREADY => gmem1_RREADY,
        I_RDATA => gmem1_RDATA,
        I_RID => gmem1_RID,
        I_RUSER => gmem1_RUSER,
        I_RRESP => gmem1_RRESP,
        I_RLAST => gmem1_RLAST,
        I_AWVALID => gmem1_AWVALID,
        I_AWREADY => gmem1_AWREADY,
        I_AWADDR => grp_engine_fu_228_m_axi_global_cin_V_AWADDR,
        I_AWID => grp_engine_fu_228_m_axi_global_cin_V_AWID,
        I_AWLEN => grp_engine_fu_228_m_axi_global_cin_V_AWLEN,
        I_AWSIZE => grp_engine_fu_228_m_axi_global_cin_V_AWSIZE,
        I_AWLOCK => grp_engine_fu_228_m_axi_global_cin_V_AWLOCK,
        I_AWCACHE => grp_engine_fu_228_m_axi_global_cin_V_AWCACHE,
        I_AWQOS => grp_engine_fu_228_m_axi_global_cin_V_AWQOS,
        I_AWPROT => grp_engine_fu_228_m_axi_global_cin_V_AWPROT,
        I_AWUSER => grp_engine_fu_228_m_axi_global_cin_V_AWUSER,
        I_AWBURST => grp_engine_fu_228_m_axi_global_cin_V_AWBURST,
        I_AWREGION => grp_engine_fu_228_m_axi_global_cin_V_AWREGION,
        I_WVALID => gmem1_WVALID,
        I_WREADY => gmem1_WREADY,
        I_WDATA => grp_engine_fu_228_m_axi_global_cin_V_WDATA,
        I_WID => grp_engine_fu_228_m_axi_global_cin_V_WID,
        I_WUSER => grp_engine_fu_228_m_axi_global_cin_V_WUSER,
        I_WLAST => grp_engine_fu_228_m_axi_global_cin_V_WLAST,
        I_WSTRB => grp_engine_fu_228_m_axi_global_cin_V_WSTRB,
        I_BVALID => gmem1_BVALID,
        I_BREADY => gmem1_BREADY,
        I_BRESP => gmem1_BRESP,
        I_BID => gmem1_BID,
        I_BUSER => gmem1_BUSER);

    top_kernel_gmem2_m_axi_U : component top_kernel_gmem2_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 512,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM2_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem2_AWVALID,
        AWREADY => m_axi_gmem2_AWREADY,
        AWADDR => m_axi_gmem2_AWADDR,
        AWID => m_axi_gmem2_AWID,
        AWLEN => m_axi_gmem2_AWLEN,
        AWSIZE => m_axi_gmem2_AWSIZE,
        AWBURST => m_axi_gmem2_AWBURST,
        AWLOCK => m_axi_gmem2_AWLOCK,
        AWCACHE => m_axi_gmem2_AWCACHE,
        AWPROT => m_axi_gmem2_AWPROT,
        AWQOS => m_axi_gmem2_AWQOS,
        AWREGION => m_axi_gmem2_AWREGION,
        AWUSER => m_axi_gmem2_AWUSER,
        WVALID => m_axi_gmem2_WVALID,
        WREADY => m_axi_gmem2_WREADY,
        WDATA => m_axi_gmem2_WDATA,
        WSTRB => m_axi_gmem2_WSTRB,
        WLAST => m_axi_gmem2_WLAST,
        WID => m_axi_gmem2_WID,
        WUSER => m_axi_gmem2_WUSER,
        ARVALID => m_axi_gmem2_ARVALID,
        ARREADY => m_axi_gmem2_ARREADY,
        ARADDR => m_axi_gmem2_ARADDR,
        ARID => m_axi_gmem2_ARID,
        ARLEN => m_axi_gmem2_ARLEN,
        ARSIZE => m_axi_gmem2_ARSIZE,
        ARBURST => m_axi_gmem2_ARBURST,
        ARLOCK => m_axi_gmem2_ARLOCK,
        ARCACHE => m_axi_gmem2_ARCACHE,
        ARPROT => m_axi_gmem2_ARPROT,
        ARQOS => m_axi_gmem2_ARQOS,
        ARREGION => m_axi_gmem2_ARREGION,
        ARUSER => m_axi_gmem2_ARUSER,
        RVALID => m_axi_gmem2_RVALID,
        RREADY => m_axi_gmem2_RREADY,
        RDATA => m_axi_gmem2_RDATA,
        RLAST => m_axi_gmem2_RLAST,
        RID => m_axi_gmem2_RID,
        RUSER => m_axi_gmem2_RUSER,
        RRESP => m_axi_gmem2_RRESP,
        BVALID => m_axi_gmem2_BVALID,
        BREADY => m_axi_gmem2_BREADY,
        BRESP => m_axi_gmem2_BRESP,
        BID => m_axi_gmem2_BID,
        BUSER => m_axi_gmem2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem2_ARVALID,
        I_ARREADY => gmem2_ARREADY,
        I_ARADDR => grp_engine_fu_228_m_axi_global_weight_V_ARADDR,
        I_ARID => grp_engine_fu_228_m_axi_global_weight_V_ARID,
        I_ARLEN => grp_engine_fu_228_m_axi_global_weight_V_ARLEN,
        I_ARSIZE => grp_engine_fu_228_m_axi_global_weight_V_ARSIZE,
        I_ARLOCK => grp_engine_fu_228_m_axi_global_weight_V_ARLOCK,
        I_ARCACHE => grp_engine_fu_228_m_axi_global_weight_V_ARCACHE,
        I_ARQOS => grp_engine_fu_228_m_axi_global_weight_V_ARQOS,
        I_ARPROT => grp_engine_fu_228_m_axi_global_weight_V_ARPROT,
        I_ARUSER => grp_engine_fu_228_m_axi_global_weight_V_ARUSER,
        I_ARBURST => grp_engine_fu_228_m_axi_global_weight_V_ARBURST,
        I_ARREGION => grp_engine_fu_228_m_axi_global_weight_V_ARREGION,
        I_RVALID => gmem2_RVALID,
        I_RREADY => gmem2_RREADY,
        I_RDATA => gmem2_RDATA,
        I_RID => gmem2_RID,
        I_RUSER => gmem2_RUSER,
        I_RRESP => gmem2_RRESP,
        I_RLAST => gmem2_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem2_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem2_WREADY,
        I_WDATA => ap_const_lv512_lc_1,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv64_0,
        I_BVALID => gmem2_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem2_BRESP,
        I_BID => gmem2_BID,
        I_BUSER => gmem2_BUSER);

    top_kernel_gcontrol_m_axi_U : component top_kernel_gcontrol_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GCONTROL_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GCONTROL_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GCONTROL_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GCONTROL_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GCONTROL_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GCONTROL_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GCONTROL_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GCONTROL_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GCONTROL_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GCONTROL_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GCONTROL_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gcontrol_AWVALID,
        AWREADY => m_axi_gcontrol_AWREADY,
        AWADDR => m_axi_gcontrol_AWADDR,
        AWID => m_axi_gcontrol_AWID,
        AWLEN => m_axi_gcontrol_AWLEN,
        AWSIZE => m_axi_gcontrol_AWSIZE,
        AWBURST => m_axi_gcontrol_AWBURST,
        AWLOCK => m_axi_gcontrol_AWLOCK,
        AWCACHE => m_axi_gcontrol_AWCACHE,
        AWPROT => m_axi_gcontrol_AWPROT,
        AWQOS => m_axi_gcontrol_AWQOS,
        AWREGION => m_axi_gcontrol_AWREGION,
        AWUSER => m_axi_gcontrol_AWUSER,
        WVALID => m_axi_gcontrol_WVALID,
        WREADY => m_axi_gcontrol_WREADY,
        WDATA => m_axi_gcontrol_WDATA,
        WSTRB => m_axi_gcontrol_WSTRB,
        WLAST => m_axi_gcontrol_WLAST,
        WID => m_axi_gcontrol_WID,
        WUSER => m_axi_gcontrol_WUSER,
        ARVALID => m_axi_gcontrol_ARVALID,
        ARREADY => m_axi_gcontrol_ARREADY,
        ARADDR => m_axi_gcontrol_ARADDR,
        ARID => m_axi_gcontrol_ARID,
        ARLEN => m_axi_gcontrol_ARLEN,
        ARSIZE => m_axi_gcontrol_ARSIZE,
        ARBURST => m_axi_gcontrol_ARBURST,
        ARLOCK => m_axi_gcontrol_ARLOCK,
        ARCACHE => m_axi_gcontrol_ARCACHE,
        ARPROT => m_axi_gcontrol_ARPROT,
        ARQOS => m_axi_gcontrol_ARQOS,
        ARREGION => m_axi_gcontrol_ARREGION,
        ARUSER => m_axi_gcontrol_ARUSER,
        RVALID => m_axi_gcontrol_RVALID,
        RREADY => m_axi_gcontrol_RREADY,
        RDATA => m_axi_gcontrol_RDATA,
        RLAST => m_axi_gcontrol_RLAST,
        RID => m_axi_gcontrol_RID,
        RUSER => m_axi_gcontrol_RUSER,
        RRESP => m_axi_gcontrol_RRESP,
        BVALID => m_axi_gcontrol_BVALID,
        BREADY => m_axi_gcontrol_BREADY,
        BRESP => m_axi_gcontrol_BRESP,
        BID => m_axi_gcontrol_BID,
        BUSER => m_axi_gcontrol_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gcontrol_ARVALID,
        I_ARREADY => gcontrol_ARREADY,
        I_ARADDR => gcontrol_addr_reg_426,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => gcontrol_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gcontrol_RVALID,
        I_RREADY => gcontrol_RREADY,
        I_RDATA => gcontrol_RDATA,
        I_RID => gcontrol_RID,
        I_RUSER => gcontrol_RUSER,
        I_RRESP => gcontrol_RRESP,
        I_RLAST => gcontrol_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gcontrol_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gcontrol_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => gcontrol_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gcontrol_BRESP,
        I_BID => gcontrol_BID,
        I_BUSER => gcontrol_BUSER);

    config_U : component top_kernel_config
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => config_address0,
        ce0 => config_ce0,
        we0 => config_we0,
        d0 => config_d0,
        q0 => config_q0,
        address1 => grp_engine_fu_228_config_r_address1,
        ce1 => config_ce1,
        q1 => config_q1);

    grp_engine_fu_228 : component engine
    port map (
        m_axi_global_cin_V_AWVALID => grp_engine_fu_228_m_axi_global_cin_V_AWVALID,
        m_axi_global_cin_V_AWREADY => gmem1_AWREADY,
        m_axi_global_cin_V_AWADDR => grp_engine_fu_228_m_axi_global_cin_V_AWADDR,
        m_axi_global_cin_V_AWID => grp_engine_fu_228_m_axi_global_cin_V_AWID,
        m_axi_global_cin_V_AWLEN => grp_engine_fu_228_m_axi_global_cin_V_AWLEN,
        m_axi_global_cin_V_AWSIZE => grp_engine_fu_228_m_axi_global_cin_V_AWSIZE,
        m_axi_global_cin_V_AWBURST => grp_engine_fu_228_m_axi_global_cin_V_AWBURST,
        m_axi_global_cin_V_AWLOCK => grp_engine_fu_228_m_axi_global_cin_V_AWLOCK,
        m_axi_global_cin_V_AWCACHE => grp_engine_fu_228_m_axi_global_cin_V_AWCACHE,
        m_axi_global_cin_V_AWPROT => grp_engine_fu_228_m_axi_global_cin_V_AWPROT,
        m_axi_global_cin_V_AWQOS => grp_engine_fu_228_m_axi_global_cin_V_AWQOS,
        m_axi_global_cin_V_AWREGION => grp_engine_fu_228_m_axi_global_cin_V_AWREGION,
        m_axi_global_cin_V_AWUSER => grp_engine_fu_228_m_axi_global_cin_V_AWUSER,
        m_axi_global_cin_V_WVALID => grp_engine_fu_228_m_axi_global_cin_V_WVALID,
        m_axi_global_cin_V_WREADY => gmem1_WREADY,
        m_axi_global_cin_V_WDATA => grp_engine_fu_228_m_axi_global_cin_V_WDATA,
        m_axi_global_cin_V_WSTRB => grp_engine_fu_228_m_axi_global_cin_V_WSTRB,
        m_axi_global_cin_V_WLAST => grp_engine_fu_228_m_axi_global_cin_V_WLAST,
        m_axi_global_cin_V_WID => grp_engine_fu_228_m_axi_global_cin_V_WID,
        m_axi_global_cin_V_WUSER => grp_engine_fu_228_m_axi_global_cin_V_WUSER,
        m_axi_global_cin_V_ARVALID => grp_engine_fu_228_m_axi_global_cin_V_ARVALID,
        m_axi_global_cin_V_ARREADY => gmem1_ARREADY,
        m_axi_global_cin_V_ARADDR => grp_engine_fu_228_m_axi_global_cin_V_ARADDR,
        m_axi_global_cin_V_ARID => grp_engine_fu_228_m_axi_global_cin_V_ARID,
        m_axi_global_cin_V_ARLEN => grp_engine_fu_228_m_axi_global_cin_V_ARLEN,
        m_axi_global_cin_V_ARSIZE => grp_engine_fu_228_m_axi_global_cin_V_ARSIZE,
        m_axi_global_cin_V_ARBURST => grp_engine_fu_228_m_axi_global_cin_V_ARBURST,
        m_axi_global_cin_V_ARLOCK => grp_engine_fu_228_m_axi_global_cin_V_ARLOCK,
        m_axi_global_cin_V_ARCACHE => grp_engine_fu_228_m_axi_global_cin_V_ARCACHE,
        m_axi_global_cin_V_ARPROT => grp_engine_fu_228_m_axi_global_cin_V_ARPROT,
        m_axi_global_cin_V_ARQOS => grp_engine_fu_228_m_axi_global_cin_V_ARQOS,
        m_axi_global_cin_V_ARREGION => grp_engine_fu_228_m_axi_global_cin_V_ARREGION,
        m_axi_global_cin_V_ARUSER => grp_engine_fu_228_m_axi_global_cin_V_ARUSER,
        m_axi_global_cin_V_RVALID => gmem1_RVALID,
        m_axi_global_cin_V_RREADY => grp_engine_fu_228_m_axi_global_cin_V_RREADY,
        m_axi_global_cin_V_RDATA => gmem1_RDATA,
        m_axi_global_cin_V_RLAST => gmem1_RLAST,
        m_axi_global_cin_V_RID => gmem1_RID,
        m_axi_global_cin_V_RUSER => gmem1_RUSER,
        m_axi_global_cin_V_RRESP => gmem1_RRESP,
        m_axi_global_cin_V_BVALID => gmem1_BVALID,
        m_axi_global_cin_V_BREADY => grp_engine_fu_228_m_axi_global_cin_V_BREADY,
        m_axi_global_cin_V_BRESP => gmem1_BRESP,
        m_axi_global_cin_V_BID => gmem1_BID,
        m_axi_global_cin_V_BUSER => gmem1_BUSER,
        global_cin_V_offset => global_cin_V1_reg_408,
        m_axi_global_weight_V_AWVALID => grp_engine_fu_228_m_axi_global_weight_V_AWVALID,
        m_axi_global_weight_V_AWREADY => ap_const_logic_0,
        m_axi_global_weight_V_AWADDR => grp_engine_fu_228_m_axi_global_weight_V_AWADDR,
        m_axi_global_weight_V_AWID => grp_engine_fu_228_m_axi_global_weight_V_AWID,
        m_axi_global_weight_V_AWLEN => grp_engine_fu_228_m_axi_global_weight_V_AWLEN,
        m_axi_global_weight_V_AWSIZE => grp_engine_fu_228_m_axi_global_weight_V_AWSIZE,
        m_axi_global_weight_V_AWBURST => grp_engine_fu_228_m_axi_global_weight_V_AWBURST,
        m_axi_global_weight_V_AWLOCK => grp_engine_fu_228_m_axi_global_weight_V_AWLOCK,
        m_axi_global_weight_V_AWCACHE => grp_engine_fu_228_m_axi_global_weight_V_AWCACHE,
        m_axi_global_weight_V_AWPROT => grp_engine_fu_228_m_axi_global_weight_V_AWPROT,
        m_axi_global_weight_V_AWQOS => grp_engine_fu_228_m_axi_global_weight_V_AWQOS,
        m_axi_global_weight_V_AWREGION => grp_engine_fu_228_m_axi_global_weight_V_AWREGION,
        m_axi_global_weight_V_AWUSER => grp_engine_fu_228_m_axi_global_weight_V_AWUSER,
        m_axi_global_weight_V_WVALID => grp_engine_fu_228_m_axi_global_weight_V_WVALID,
        m_axi_global_weight_V_WREADY => ap_const_logic_0,
        m_axi_global_weight_V_WDATA => grp_engine_fu_228_m_axi_global_weight_V_WDATA,
        m_axi_global_weight_V_WSTRB => grp_engine_fu_228_m_axi_global_weight_V_WSTRB,
        m_axi_global_weight_V_WLAST => grp_engine_fu_228_m_axi_global_weight_V_WLAST,
        m_axi_global_weight_V_WID => grp_engine_fu_228_m_axi_global_weight_V_WID,
        m_axi_global_weight_V_WUSER => grp_engine_fu_228_m_axi_global_weight_V_WUSER,
        m_axi_global_weight_V_ARVALID => grp_engine_fu_228_m_axi_global_weight_V_ARVALID,
        m_axi_global_weight_V_ARREADY => gmem2_ARREADY,
        m_axi_global_weight_V_ARADDR => grp_engine_fu_228_m_axi_global_weight_V_ARADDR,
        m_axi_global_weight_V_ARID => grp_engine_fu_228_m_axi_global_weight_V_ARID,
        m_axi_global_weight_V_ARLEN => grp_engine_fu_228_m_axi_global_weight_V_ARLEN,
        m_axi_global_weight_V_ARSIZE => grp_engine_fu_228_m_axi_global_weight_V_ARSIZE,
        m_axi_global_weight_V_ARBURST => grp_engine_fu_228_m_axi_global_weight_V_ARBURST,
        m_axi_global_weight_V_ARLOCK => grp_engine_fu_228_m_axi_global_weight_V_ARLOCK,
        m_axi_global_weight_V_ARCACHE => grp_engine_fu_228_m_axi_global_weight_V_ARCACHE,
        m_axi_global_weight_V_ARPROT => grp_engine_fu_228_m_axi_global_weight_V_ARPROT,
        m_axi_global_weight_V_ARQOS => grp_engine_fu_228_m_axi_global_weight_V_ARQOS,
        m_axi_global_weight_V_ARREGION => grp_engine_fu_228_m_axi_global_weight_V_ARREGION,
        m_axi_global_weight_V_ARUSER => grp_engine_fu_228_m_axi_global_weight_V_ARUSER,
        m_axi_global_weight_V_RVALID => gmem2_RVALID,
        m_axi_global_weight_V_RREADY => grp_engine_fu_228_m_axi_global_weight_V_RREADY,
        m_axi_global_weight_V_RDATA => gmem2_RDATA,
        m_axi_global_weight_V_RLAST => gmem2_RLAST,
        m_axi_global_weight_V_RID => gmem2_RID,
        m_axi_global_weight_V_RUSER => gmem2_RUSER,
        m_axi_global_weight_V_RRESP => gmem2_RRESP,
        m_axi_global_weight_V_BVALID => ap_const_logic_0,
        m_axi_global_weight_V_BREADY => grp_engine_fu_228_m_axi_global_weight_V_BREADY,
        m_axi_global_weight_V_BRESP => ap_const_lv2_0,
        m_axi_global_weight_V_BID => ap_const_lv1_0,
        m_axi_global_weight_V_BUSER => ap_const_lv1_0,
        global_weight_V_offset => global_weight_V7_reg_398,
        global_bias_V_offset => global_bias_V9_reg_393,
        global_cout_V_offset => global_cout_V5_reg_403,
        config_r_address0 => grp_engine_fu_228_config_r_address0,
        config_r_ce0 => grp_engine_fu_228_config_r_ce0,
        config_r_d0 => grp_engine_fu_228_config_r_d0,
        config_r_q0 => config_q0,
        config_r_we0 => grp_engine_fu_228_config_r_we0,
        config_r_address1 => grp_engine_fu_228_config_r_address1,
        config_r_ce1 => grp_engine_fu_228_config_r_ce1,
        config_r_d1 => grp_engine_fu_228_config_r_d1,
        config_r_q1 => config_q1,
        config_r_we1 => grp_engine_fu_228_config_r_we1,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        global_cin_V_offset_ap_vld => ap_const_logic_1,
        global_weight_V_offset_ap_vld => ap_const_logic_1,
        global_bias_V_offset_ap_vld => ap_const_logic_1,
        global_cout_V_offset_ap_vld => ap_const_logic_1,
        ap_start => grp_engine_fu_228_ap_start,
        ap_done => grp_engine_fu_228_ap_done,
        ap_ready => grp_engine_fu_228_ap_ready,
        ap_idle => grp_engine_fu_228_ap_idle,
        ap_continue => grp_engine_fu_228_ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_gcontrol_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gcontrol_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    if ((ap_sig_ioackin_gcontrol_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gcontrol_ARREADY <= ap_const_logic_0;
                    elsif ((gcontrol_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gcontrol_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_engine_fu_228_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_engine_fu_228_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state15_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                    ap_sync_reg_grp_engine_fu_228_ap_done <= ap_const_logic_0;
                elsif ((grp_engine_fu_228_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_engine_fu_228_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_engine_fu_228_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_engine_fu_228_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state15_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                    ap_sync_reg_grp_engine_fu_228_ap_ready <= ap_const_logic_0;
                elsif ((grp_engine_fu_228_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_engine_fu_228_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_engine_fu_228_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_engine_fu_228_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_sync_grp_engine_fu_228_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
                    grp_engine_fu_228_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_engine_fu_228_ap_ready = ap_const_logic_1)) then 
                    grp_engine_fu_228_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    cur_layer_batch_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state15_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                cur_layer_batch_reg_192 <= nxt_layer_batch_reg_470;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                cur_layer_batch_reg_192 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    indvar_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                indvar_reg_216 <= indvar_next5_reg_450;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                indvar_reg_216 <= ap_const_lv30_0;
            end if; 
        end if;
    end process;

    layer_id_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state15_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                layer_id_reg_205 <= layer_id_1_reg_421;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                layer_id_reg_205 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((gcontrol_RVALID = ap_const_logic_0) and (exitcond6_fu_363_p2 = ap_const_lv1_0))) and (exitcond6_fu_363_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                gcontrol_addr_read_reg_455 <= gcontrol_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_295_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    gcontrol_addr_reg_426(62 downto 0) <= layer_config_V12_sum_1_fu_330_p1(62 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                global_bias_V9_reg_393 <= global_bias_V(63 downto 6);
                global_cin_V1_reg_408 <= global_cin_V(63 downto 6);
                global_cout_V5_reg_403 <= global_cout_V(63 downto 6);
                global_weight_V7_reg_398 <= global_weight_V(63 downto 6);
                    tmp_71_cast_reg_388(61 downto 0) <= tmp_71_cast_fu_251_p1(61 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((gcontrol_RVALID = ap_const_logic_0) and (exitcond6_fu_363_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                indvar_next5_reg_450 <= indvar_next5_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                layer_id_1_reg_421 <= layer_id_1_fu_301_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                nxt_layer_batch_reg_470 <= config_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((gcontrol_RVALID = ap_const_logic_0) and (exitcond6_fu_363_p2 = ap_const_lv1_0))) and (exitcond6_fu_363_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    tmp_16_reg_460(31 downto 5) <= tmp_16_fu_374_p2(31 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                    tmp_27_reg_442(31 downto 5) <= tmp_27_fu_357_p2(31 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_ioackin_gcontrol_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_cast_reg_432(29 downto 5) <= tmp_cast_fu_344_p3(29 downto 5);
            end if;
        end if;
    end process;
    tmp_71_cast_reg_388(62) <= '0';
    gcontrol_addr_reg_426(63) <= '0';
    tmp_cast_reg_432(4 downto 0) <= "00000";
    tmp_27_reg_442(4 downto 0) <= "00000";
    tmp_16_reg_460(4 downto 0) <= "11001";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state10, exitcond6_fu_363_p2, gcontrol_RVALID, ap_CS_fsm_state2, exitcond_fu_295_p2, ap_sig_ioackin_gcontrol_ARREADY, ap_CS_fsm_state15, ap_block_state15_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_fu_295_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_sig_ioackin_gcontrol_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if ((not(((gcontrol_RVALID = ap_const_logic_0) and (exitcond6_fu_363_p2 = ap_const_lv1_0))) and (exitcond6_fu_363_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif ((not(((gcontrol_RVALID = ap_const_logic_0) and (exitcond6_fu_363_p2 = ap_const_lv1_0))) and (exitcond6_fu_363_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_boolean_0 = ap_block_state15_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state10_assign_proc : process(exitcond6_fu_363_p2, gcontrol_RVALID)
    begin
                ap_block_state10 <= ((gcontrol_RVALID = ap_const_logic_0) and (exitcond6_fu_363_p2 = ap_const_lv1_0));
    end process;


    ap_block_state15_on_subcall_done_assign_proc : process(ap_sync_grp_engine_fu_228_ap_ready, ap_sync_grp_engine_fu_228_ap_done)
    begin
                ap_block_state15_on_subcall_done <= ((ap_sync_grp_engine_fu_228_ap_ready and ap_sync_grp_engine_fu_228_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_295_p2)
    begin
        if (((exitcond_fu_295_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_295_p2)
    begin
        if (((exitcond_fu_295_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_gcontrol_ARREADY_assign_proc : process(gcontrol_ARREADY, ap_reg_ioackin_gcontrol_ARREADY)
    begin
        if ((ap_reg_ioackin_gcontrol_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gcontrol_ARREADY <= gcontrol_ARREADY;
        else 
            ap_sig_ioackin_gcontrol_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    ap_sync_grp_engine_fu_228_ap_done <= (grp_engine_fu_228_ap_done or ap_sync_reg_grp_engine_fu_228_ap_done);
    ap_sync_grp_engine_fu_228_ap_ready <= (grp_engine_fu_228_ap_ready or ap_sync_reg_grp_engine_fu_228_ap_ready);

    config_address0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, grp_engine_fu_228_config_r_address0, ap_CS_fsm_state15, ap_CS_fsm_state11, indvar1_fu_379_p1, tmp_17_fu_384_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            config_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            config_address0 <= tmp_17_fu_384_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            config_address0 <= indvar1_fu_379_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            config_address0 <= grp_engine_fu_228_config_r_address0;
        else 
            config_address0 <= "XXXXX";
        end if; 
    end process;


    config_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, grp_engine_fu_228_config_r_ce0, ap_CS_fsm_state15, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            config_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            config_ce0 <= grp_engine_fu_228_config_r_ce0;
        else 
            config_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    config_ce1_assign_proc : process(grp_engine_fu_228_config_r_ce1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            config_ce1 <= grp_engine_fu_228_config_r_ce1;
        else 
            config_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    config_d0_assign_proc : process(gcontrol_addr_read_reg_455, ap_CS_fsm_state13, cur_layer_batch_reg_192, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            config_d0 <= cur_layer_batch_reg_192;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            config_d0 <= gcontrol_addr_read_reg_455;
        else 
            config_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    config_we0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            config_we0 <= ap_const_logic_1;
        else 
            config_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond6_fu_363_p2 <= "1" when (indvar_reg_216 = tmp_cast_reg_432) else "0";
    exitcond_fu_295_p2 <= "1" when (layer_id_reg_205 = ap_const_lv3_5) else "0";
    gcontrol_ARLEN <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_cast_fu_344_p3),32));

    gcontrol_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_reg_ioackin_gcontrol_ARREADY)
    begin
        if (((ap_reg_ioackin_gcontrol_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gcontrol_ARVALID <= ap_const_logic_1;
        else 
            gcontrol_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gcontrol_RREADY_assign_proc : process(ap_CS_fsm_state10, exitcond6_fu_363_p2, gcontrol_RVALID)
    begin
        if ((not(((gcontrol_RVALID = ap_const_logic_0) and (exitcond6_fu_363_p2 = ap_const_lv1_0))) and (exitcond6_fu_363_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gcontrol_RREADY <= ap_const_logic_1;
        else 
            gcontrol_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gcontrol_blk_n_AR_assign_proc : process(m_axi_gcontrol_ARREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            gcontrol_blk_n_AR <= m_axi_gcontrol_ARREADY;
        else 
            gcontrol_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gcontrol_blk_n_R_assign_proc : process(m_axi_gcontrol_RVALID, ap_CS_fsm_state10, exitcond6_fu_363_p2)
    begin
        if (((exitcond6_fu_363_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            gcontrol_blk_n_R <= m_axi_gcontrol_RVALID;
        else 
            gcontrol_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_ARVALID_assign_proc : process(grp_engine_fu_228_m_axi_global_cin_V_ARVALID, ap_CS_fsm_state15, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            gmem1_ARVALID <= grp_engine_fu_228_m_axi_global_cin_V_ARVALID;
        else 
            gmem1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_AWVALID_assign_proc : process(grp_engine_fu_228_m_axi_global_cin_V_AWVALID, ap_CS_fsm_state15, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            gmem1_AWVALID <= grp_engine_fu_228_m_axi_global_cin_V_AWVALID;
        else 
            gmem1_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_BREADY_assign_proc : process(grp_engine_fu_228_m_axi_global_cin_V_BREADY, ap_CS_fsm_state15, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            gmem1_BREADY <= grp_engine_fu_228_m_axi_global_cin_V_BREADY;
        else 
            gmem1_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_RREADY_assign_proc : process(grp_engine_fu_228_m_axi_global_cin_V_RREADY, ap_CS_fsm_state15, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            gmem1_RREADY <= grp_engine_fu_228_m_axi_global_cin_V_RREADY;
        else 
            gmem1_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_WVALID_assign_proc : process(grp_engine_fu_228_m_axi_global_cin_V_WVALID, ap_CS_fsm_state15, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            gmem1_WVALID <= grp_engine_fu_228_m_axi_global_cin_V_WVALID;
        else 
            gmem1_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem2_ARVALID_assign_proc : process(grp_engine_fu_228_m_axi_global_weight_V_ARVALID, ap_CS_fsm_state15, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            gmem2_ARVALID <= grp_engine_fu_228_m_axi_global_weight_V_ARVALID;
        else 
            gmem2_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem2_RREADY_assign_proc : process(grp_engine_fu_228_m_axi_global_weight_V_RREADY, ap_CS_fsm_state15, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            gmem2_RREADY <= grp_engine_fu_228_m_axi_global_weight_V_RREADY;
        else 
            gmem2_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    grp_engine_fu_228_ap_continue_assign_proc : process(ap_CS_fsm_state15, ap_block_state15_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state15_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            grp_engine_fu_228_ap_continue <= ap_const_logic_1;
        else 
            grp_engine_fu_228_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_engine_fu_228_ap_start <= grp_engine_fu_228_ap_start_reg;
    indvar1_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar_reg_216),64));
    indvar_next5_fu_368_p2 <= std_logic_vector(unsigned(indvar_reg_216) + unsigned(ap_const_lv30_1));
    layer_config_V12_sum_1_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer_config_V12_sum_fu_325_p2),64));
    layer_config_V12_sum_fu_325_p2 <= std_logic_vector(unsigned(tmp_71_cast_reg_388) + unsigned(tmp_60_cast_fu_321_p1));
    layer_id_1_fu_301_p2 <= std_logic_vector(unsigned(layer_id_reg_205) + unsigned(ap_const_lv3_1));
    m_axi_gmem3_ARADDR <= ap_const_lv64_0;
    m_axi_gmem3_ARBURST <= ap_const_lv2_0;
    m_axi_gmem3_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem3_ARID <= ap_const_lv1_0;
    m_axi_gmem3_ARLEN <= ap_const_lv8_0;
    m_axi_gmem3_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem3_ARPROT <= ap_const_lv3_0;
    m_axi_gmem3_ARQOS <= ap_const_lv4_0;
    m_axi_gmem3_ARREGION <= ap_const_lv4_0;
    m_axi_gmem3_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem3_ARUSER <= ap_const_lv1_0;
    m_axi_gmem3_ARVALID <= ap_const_logic_0;
    m_axi_gmem3_AWADDR <= ap_const_lv64_0;
    m_axi_gmem3_AWBURST <= ap_const_lv2_0;
    m_axi_gmem3_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem3_AWID <= ap_const_lv1_0;
    m_axi_gmem3_AWLEN <= ap_const_lv8_0;
    m_axi_gmem3_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem3_AWPROT <= ap_const_lv3_0;
    m_axi_gmem3_AWQOS <= ap_const_lv4_0;
    m_axi_gmem3_AWREGION <= ap_const_lv4_0;
    m_axi_gmem3_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem3_AWUSER <= ap_const_lv1_0;
    m_axi_gmem3_AWVALID <= ap_const_logic_0;
    m_axi_gmem3_BREADY <= ap_const_logic_0;
    m_axi_gmem3_RREADY <= ap_const_logic_0;
    m_axi_gmem3_WDATA <= ap_const_lv512_lc_1;
    m_axi_gmem3_WID <= ap_const_lv1_0;
    m_axi_gmem3_WLAST <= ap_const_logic_0;
    m_axi_gmem3_WSTRB <= ap_const_lv64_0;
    m_axi_gmem3_WUSER <= ap_const_lv1_0;
    m_axi_gmem3_WVALID <= ap_const_logic_0;
    tmp_15_fu_315_p2 <= (tmp_s_fu_307_p3 or ap_const_lv8_5);
    tmp_16_fu_374_p2 <= std_logic_vector(unsigned(tmp_27_reg_442) + unsigned(ap_const_lv32_FFFFFFF9));
        tmp_17_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_16_reg_460),64));

    tmp_27_fu_357_p2 <= std_logic_vector(shift_left(unsigned(cur_layer_batch_reg_192),to_integer(unsigned('0' & ap_const_lv32_5(31-1 downto 0)))));
    tmp_28_fu_340_p1 <= cur_layer_batch_reg_192(25 - 1 downto 0);
    tmp_60_cast_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_315_p2),63));
    tmp_71_cast_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_241_p4),63));
    tmp_cast_fu_344_p3 <= (tmp_28_fu_340_p1 & ap_const_lv5_0);
    tmp_fu_241_p4 <= layer_config_V(63 downto 2);
    tmp_s_fu_307_p3 <= (layer_id_reg_205 & ap_const_lv5_0);
end behav;
