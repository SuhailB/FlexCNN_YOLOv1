-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity engine is
port (
    m_axi_global_cin_V_AWVALID : OUT STD_LOGIC;
    m_axi_global_cin_V_AWREADY : IN STD_LOGIC;
    m_axi_global_cin_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_global_cin_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_global_cin_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_global_cin_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_global_cin_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_global_cin_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_global_cin_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_global_cin_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_global_cin_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_global_cin_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_global_cin_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_global_cin_V_WVALID : OUT STD_LOGIC;
    m_axi_global_cin_V_WREADY : IN STD_LOGIC;
    m_axi_global_cin_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_global_cin_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_global_cin_V_WLAST : OUT STD_LOGIC;
    m_axi_global_cin_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_global_cin_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_global_cin_V_ARVALID : OUT STD_LOGIC;
    m_axi_global_cin_V_ARREADY : IN STD_LOGIC;
    m_axi_global_cin_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_global_cin_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_global_cin_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_global_cin_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_global_cin_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_global_cin_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_global_cin_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_global_cin_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_global_cin_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_global_cin_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_global_cin_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_global_cin_V_RVALID : IN STD_LOGIC;
    m_axi_global_cin_V_RREADY : OUT STD_LOGIC;
    m_axi_global_cin_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_global_cin_V_RLAST : IN STD_LOGIC;
    m_axi_global_cin_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_global_cin_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_global_cin_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_global_cin_V_BVALID : IN STD_LOGIC;
    m_axi_global_cin_V_BREADY : OUT STD_LOGIC;
    m_axi_global_cin_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_global_cin_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_global_cin_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    global_cin_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
    m_axi_global_weight_V_AWVALID : OUT STD_LOGIC;
    m_axi_global_weight_V_AWREADY : IN STD_LOGIC;
    m_axi_global_weight_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_global_weight_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_global_weight_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_global_weight_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_global_weight_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_global_weight_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_global_weight_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_global_weight_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_global_weight_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_global_weight_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_global_weight_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_global_weight_V_WVALID : OUT STD_LOGIC;
    m_axi_global_weight_V_WREADY : IN STD_LOGIC;
    m_axi_global_weight_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_global_weight_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_global_weight_V_WLAST : OUT STD_LOGIC;
    m_axi_global_weight_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_global_weight_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_global_weight_V_ARVALID : OUT STD_LOGIC;
    m_axi_global_weight_V_ARREADY : IN STD_LOGIC;
    m_axi_global_weight_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_global_weight_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_global_weight_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_global_weight_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_global_weight_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_global_weight_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_global_weight_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_global_weight_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_global_weight_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_global_weight_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_global_weight_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_global_weight_V_RVALID : IN STD_LOGIC;
    m_axi_global_weight_V_RREADY : OUT STD_LOGIC;
    m_axi_global_weight_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_global_weight_V_RLAST : IN STD_LOGIC;
    m_axi_global_weight_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_global_weight_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_global_weight_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_global_weight_V_BVALID : IN STD_LOGIC;
    m_axi_global_weight_V_BREADY : OUT STD_LOGIC;
    m_axi_global_weight_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_global_weight_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_global_weight_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    global_weight_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
    global_bias_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
    global_cout_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
    config_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    config_r_ce0 : OUT STD_LOGIC;
    config_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    config_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    config_r_we0 : OUT STD_LOGIC;
    config_r_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    config_r_ce1 : OUT STD_LOGIC;
    config_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    config_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    config_r_we1 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    global_cin_V_offset_ap_vld : IN STD_LOGIC;
    global_weight_V_offset_ap_vld : IN STD_LOGIC;
    global_bias_V_offset_ap_vld : IN STD_LOGIC;
    global_cout_V_offset_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of engine is 
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv512_lc_2 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

    signal cin_load13_U0_ap_start : STD_LOGIC;
    signal cin_load13_U0_start_full_n : STD_LOGIC;
    signal cin_load13_U0_ap_done : STD_LOGIC;
    signal cin_load13_U0_ap_continue : STD_LOGIC;
    signal cin_load13_U0_ap_idle : STD_LOGIC;
    signal cin_load13_U0_ap_ready : STD_LOGIC;
    signal cin_load13_U0_start_out : STD_LOGIC;
    signal cin_load13_U0_start_write : STD_LOGIC;
    signal cin_load13_U0_m_axi_global_cin_V_AWVALID : STD_LOGIC;
    signal cin_load13_U0_m_axi_global_cin_V_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal cin_load13_U0_m_axi_global_cin_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal cin_load13_U0_m_axi_global_cin_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal cin_load13_U0_m_axi_global_cin_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal cin_load13_U0_m_axi_global_cin_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal cin_load13_U0_m_axi_global_cin_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal cin_load13_U0_m_axi_global_cin_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal cin_load13_U0_m_axi_global_cin_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal cin_load13_U0_m_axi_global_cin_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal cin_load13_U0_m_axi_global_cin_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal cin_load13_U0_m_axi_global_cin_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal cin_load13_U0_m_axi_global_cin_V_WVALID : STD_LOGIC;
    signal cin_load13_U0_m_axi_global_cin_V_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal cin_load13_U0_m_axi_global_cin_V_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal cin_load13_U0_m_axi_global_cin_V_WLAST : STD_LOGIC;
    signal cin_load13_U0_m_axi_global_cin_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal cin_load13_U0_m_axi_global_cin_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal cin_load13_U0_m_axi_global_cin_V_ARVALID : STD_LOGIC;
    signal cin_load13_U0_m_axi_global_cin_V_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal cin_load13_U0_m_axi_global_cin_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal cin_load13_U0_m_axi_global_cin_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal cin_load13_U0_m_axi_global_cin_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal cin_load13_U0_m_axi_global_cin_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal cin_load13_U0_m_axi_global_cin_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal cin_load13_U0_m_axi_global_cin_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal cin_load13_U0_m_axi_global_cin_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal cin_load13_U0_m_axi_global_cin_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal cin_load13_U0_m_axi_global_cin_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal cin_load13_U0_m_axi_global_cin_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal cin_load13_U0_m_axi_global_cin_V_RREADY : STD_LOGIC;
    signal cin_load13_U0_m_axi_global_cin_V_BREADY : STD_LOGIC;
    signal cin_load13_U0_config_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal cin_load13_U0_config_r_ce0 : STD_LOGIC;
    signal cin_load13_U0_config_r_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal cin_load13_U0_config_r_ce1 : STD_LOGIC;
    signal cin_load13_U0_fifo_cin_load_0_V_V_din : STD_LOGIC_VECTOR (255 downto 0);
    signal cin_load13_U0_fifo_cin_load_0_V_V_write : STD_LOGIC;
    signal cin_load13_U0_config_weight_load_V_din : STD_LOGIC_VECTOR (191 downto 0);
    signal cin_load13_U0_config_weight_load_V_write : STD_LOGIC;
    signal cin_load13_U0_global_weight_V_offset_out_din : STD_LOGIC_VECTOR (57 downto 0);
    signal cin_load13_U0_global_weight_V_offset_out_write : STD_LOGIC;
    signal cin_load13_U0_global_bias_V_offset_out_din : STD_LOGIC_VECTOR (57 downto 0);
    signal cin_load13_U0_global_bias_V_offset_out_write : STD_LOGIC;
    signal cin_load13_U0_global_cout_V_offset_out_din : STD_LOGIC_VECTOR (57 downto 0);
    signal cin_load13_U0_global_cout_V_offset_out_write : STD_LOGIC;
    signal weight_load_U0_ap_start : STD_LOGIC;
    signal weight_load_U0_ap_done : STD_LOGIC;
    signal weight_load_U0_ap_continue : STD_LOGIC;
    signal weight_load_U0_ap_idle : STD_LOGIC;
    signal weight_load_U0_ap_ready : STD_LOGIC;
    signal weight_load_U0_start_out : STD_LOGIC;
    signal weight_load_U0_start_write : STD_LOGIC;
    signal weight_load_U0_m_axi_global_weight_V_AWVALID : STD_LOGIC;
    signal weight_load_U0_m_axi_global_weight_V_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal weight_load_U0_m_axi_global_weight_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_load_U0_m_axi_global_weight_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_load_U0_m_axi_global_weight_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal weight_load_U0_m_axi_global_weight_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal weight_load_U0_m_axi_global_weight_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal weight_load_U0_m_axi_global_weight_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal weight_load_U0_m_axi_global_weight_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal weight_load_U0_m_axi_global_weight_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal weight_load_U0_m_axi_global_weight_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal weight_load_U0_m_axi_global_weight_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_load_U0_m_axi_global_weight_V_WVALID : STD_LOGIC;
    signal weight_load_U0_m_axi_global_weight_V_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal weight_load_U0_m_axi_global_weight_V_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal weight_load_U0_m_axi_global_weight_V_WLAST : STD_LOGIC;
    signal weight_load_U0_m_axi_global_weight_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_load_U0_m_axi_global_weight_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_load_U0_m_axi_global_weight_V_ARVALID : STD_LOGIC;
    signal weight_load_U0_m_axi_global_weight_V_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal weight_load_U0_m_axi_global_weight_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_load_U0_m_axi_global_weight_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_load_U0_m_axi_global_weight_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal weight_load_U0_m_axi_global_weight_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal weight_load_U0_m_axi_global_weight_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal weight_load_U0_m_axi_global_weight_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal weight_load_U0_m_axi_global_weight_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal weight_load_U0_m_axi_global_weight_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal weight_load_U0_m_axi_global_weight_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal weight_load_U0_m_axi_global_weight_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_load_U0_m_axi_global_weight_V_RREADY : STD_LOGIC;
    signal weight_load_U0_m_axi_global_weight_V_BREADY : STD_LOGIC;
    signal weight_load_U0_global_weight_V_offset_read : STD_LOGIC;
    signal weight_load_U0_global_bias_V_offset_read : STD_LOGIC;
    signal weight_load_U0_fifo_config_in_V_V_read : STD_LOGIC;
    signal weight_load_U0_fifo_conv_weight_V_V_din : STD_LOGIC_VECTOR (255 downto 0);
    signal weight_load_U0_fifo_conv_weight_V_V_write : STD_LOGIC;
    signal weight_load_U0_fifo_gamma_conv_V_V_din : STD_LOGIC_VECTOR (255 downto 0);
    signal weight_load_U0_fifo_gamma_conv_V_V_write : STD_LOGIC;
    signal weight_load_U0_fifo_beta_conv_V_V_din : STD_LOGIC_VECTOR (255 downto 0);
    signal weight_load_U0_fifo_beta_conv_V_V_write : STD_LOGIC;
    signal weight_load_U0_fifo_config_out_V_V_din : STD_LOGIC_VECTOR (191 downto 0);
    signal weight_load_U0_fifo_config_out_V_V_write : STD_LOGIC;
    signal conv_U0_ap_start : STD_LOGIC;
    signal conv_U0_ap_done : STD_LOGIC;
    signal conv_U0_ap_continue : STD_LOGIC;
    signal conv_U0_ap_idle : STD_LOGIC;
    signal conv_U0_ap_ready : STD_LOGIC;
    signal conv_U0_fifo_cin_V_V_read : STD_LOGIC;
    signal conv_U0_fifo_weight_V_V_read : STD_LOGIC;
    signal conv_U0_fifo_config_in_V_V_read : STD_LOGIC;
    signal conv_U0_fifo_cout_V_V_din : STD_LOGIC_VECTOR (255 downto 0);
    signal conv_U0_fifo_cout_V_V_write : STD_LOGIC;
    signal conv_U0_fifo_config_out_V_V_din : STD_LOGIC_VECTOR (191 downto 0);
    signal conv_U0_fifo_config_out_V_V_write : STD_LOGIC;
    signal relu_U0_ap_start : STD_LOGIC;
    signal relu_U0_ap_done : STD_LOGIC;
    signal relu_U0_ap_continue : STD_LOGIC;
    signal relu_U0_ap_idle : STD_LOGIC;
    signal relu_U0_ap_ready : STD_LOGIC;
    signal relu_U0_start_out : STD_LOGIC;
    signal relu_U0_start_write : STD_LOGIC;
    signal relu_U0_fifo_cin_V_V_read : STD_LOGIC;
    signal relu_U0_fifo_config_in_V_V_read : STD_LOGIC;
    signal relu_U0_fifo_cout_V_V_din : STD_LOGIC_VECTOR (255 downto 0);
    signal relu_U0_fifo_cout_V_V_write : STD_LOGIC;
    signal relu_U0_fifo_config_out_V_V_din : STD_LOGIC_VECTOR (191 downto 0);
    signal relu_U0_fifo_config_out_V_V_write : STD_LOGIC;
    signal relu_U0_fifo_gamma_conv_V_V_read : STD_LOGIC;
    signal relu_U0_fifo_beta_conv_V_V_read : STD_LOGIC;
    signal pool_U0_ap_start : STD_LOGIC;
    signal pool_U0_ap_done : STD_LOGIC;
    signal pool_U0_ap_continue : STD_LOGIC;
    signal pool_U0_ap_idle : STD_LOGIC;
    signal pool_U0_ap_ready : STD_LOGIC;
    signal pool_U0_fifo_cin_V_V_read : STD_LOGIC;
    signal pool_U0_fifo_config_in_V_V_read : STD_LOGIC;
    signal pool_U0_fifo_cout_V_V_din : STD_LOGIC_VECTOR (255 downto 0);
    signal pool_U0_fifo_cout_V_V_write : STD_LOGIC;
    signal pool_U0_fifo_config_out_V_V_din : STD_LOGIC_VECTOR (191 downto 0);
    signal pool_U0_fifo_config_out_V_V_write : STD_LOGIC;
    signal cout_write_U0_ap_start : STD_LOGIC;
    signal cout_write_U0_ap_done : STD_LOGIC;
    signal cout_write_U0_ap_continue : STD_LOGIC;
    signal cout_write_U0_ap_idle : STD_LOGIC;
    signal cout_write_U0_ap_ready : STD_LOGIC;
    signal cout_write_U0_fifo_cout_V_V_read : STD_LOGIC;
    signal cout_write_U0_fifo_config_in_V_V_read : STD_LOGIC;
    signal cout_write_U0_m_axi_global_cout_V_AWVALID : STD_LOGIC;
    signal cout_write_U0_m_axi_global_cout_V_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal cout_write_U0_m_axi_global_cout_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal cout_write_U0_m_axi_global_cout_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal cout_write_U0_m_axi_global_cout_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal cout_write_U0_m_axi_global_cout_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal cout_write_U0_m_axi_global_cout_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal cout_write_U0_m_axi_global_cout_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal cout_write_U0_m_axi_global_cout_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal cout_write_U0_m_axi_global_cout_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal cout_write_U0_m_axi_global_cout_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal cout_write_U0_m_axi_global_cout_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal cout_write_U0_m_axi_global_cout_V_WVALID : STD_LOGIC;
    signal cout_write_U0_m_axi_global_cout_V_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal cout_write_U0_m_axi_global_cout_V_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal cout_write_U0_m_axi_global_cout_V_WLAST : STD_LOGIC;
    signal cout_write_U0_m_axi_global_cout_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal cout_write_U0_m_axi_global_cout_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal cout_write_U0_m_axi_global_cout_V_ARVALID : STD_LOGIC;
    signal cout_write_U0_m_axi_global_cout_V_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal cout_write_U0_m_axi_global_cout_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal cout_write_U0_m_axi_global_cout_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal cout_write_U0_m_axi_global_cout_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal cout_write_U0_m_axi_global_cout_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal cout_write_U0_m_axi_global_cout_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal cout_write_U0_m_axi_global_cout_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal cout_write_U0_m_axi_global_cout_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal cout_write_U0_m_axi_global_cout_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal cout_write_U0_m_axi_global_cout_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal cout_write_U0_m_axi_global_cout_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal cout_write_U0_m_axi_global_cout_V_RREADY : STD_LOGIC;
    signal cout_write_U0_m_axi_global_cout_V_BREADY : STD_LOGIC;
    signal cout_write_U0_global_cout_V_offset_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal fifo_cin_load_0_V_V_full_n : STD_LOGIC;
    signal fifo_cin_load_0_V_V_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal fifo_cin_load_0_V_V_empty_n : STD_LOGIC;
    signal config_weight_load_V_full_n : STD_LOGIC;
    signal config_weight_load_V_dout : STD_LOGIC_VECTOR (191 downto 0);
    signal config_weight_load_V_empty_n : STD_LOGIC;
    signal global_weight_V_offs_3_full_n : STD_LOGIC;
    signal global_weight_V_offs_3_dout : STD_LOGIC_VECTOR (57 downto 0);
    signal global_weight_V_offs_3_empty_n : STD_LOGIC;
    signal global_bias_V_offset_5_full_n : STD_LOGIC;
    signal global_bias_V_offset_5_dout : STD_LOGIC_VECTOR (57 downto 0);
    signal global_bias_V_offset_5_empty_n : STD_LOGIC;
    signal global_cout_V_offset_2_full_n : STD_LOGIC;
    signal global_cout_V_offset_2_dout : STD_LOGIC_VECTOR (57 downto 0);
    signal global_cout_V_offset_2_empty_n : STD_LOGIC;
    signal fifo_weight_load_1_V_full_n : STD_LOGIC;
    signal fifo_weight_load_1_V_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal fifo_weight_load_1_V_empty_n : STD_LOGIC;
    signal fifo_beta_conv_V_V_full_n : STD_LOGIC;
    signal fifo_beta_conv_V_V_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal fifo_beta_conv_V_V_empty_n : STD_LOGIC;
    signal fifo_gamma_conv_V_V_full_n : STD_LOGIC;
    signal fifo_gamma_conv_V_V_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal fifo_gamma_conv_V_V_empty_n : STD_LOGIC;
    signal config_conv_V_V_full_n : STD_LOGIC;
    signal config_conv_V_V_dout : STD_LOGIC_VECTOR (191 downto 0);
    signal config_conv_V_V_empty_n : STD_LOGIC;
    signal fifo_conv_0_V_V_full_n : STD_LOGIC;
    signal fifo_conv_0_V_V_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal fifo_conv_0_V_V_empty_n : STD_LOGIC;
    signal config_relu_V_V_full_n : STD_LOGIC;
    signal config_relu_V_V_dout : STD_LOGIC_VECTOR (191 downto 0);
    signal config_relu_V_V_empty_n : STD_LOGIC;
    signal fifo_relu_0_V_V_full_n : STD_LOGIC;
    signal fifo_relu_0_V_V_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal fifo_relu_0_V_V_empty_n : STD_LOGIC;
    signal config_pool_V_V_full_n : STD_LOGIC;
    signal config_pool_V_V_dout : STD_LOGIC_VECTOR (191 downto 0);
    signal config_pool_V_V_empty_n : STD_LOGIC;
    signal fifo_pool_0_V_V_full_n : STD_LOGIC;
    signal fifo_pool_0_V_V_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal fifo_pool_0_V_V_empty_n : STD_LOGIC;
    signal config_data_write_V_s_full_n : STD_LOGIC;
    signal config_data_write_V_s_dout : STD_LOGIC_VECTOR (191 downto 0);
    signal config_data_write_V_s_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_cin_load13_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_cin_load13_U0_ap_ready : STD_LOGIC;
    signal cin_load13_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_weight_load_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_weight_load_U0_ap_ready : STD_LOGIC;
    signal weight_load_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal start_for_conv_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv_U0_full_n : STD_LOGIC;
    signal start_for_conv_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv_U0_empty_n : STD_LOGIC;
    signal start_for_cout_write_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_cout_write_U0_full_n : STD_LOGIC;
    signal start_for_cout_write_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_cout_write_U0_empty_n : STD_LOGIC;
    signal start_for_relu_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_relu_U0_full_n : STD_LOGIC;
    signal start_for_relu_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_relu_U0_empty_n : STD_LOGIC;
    signal conv_U0_start_full_n : STD_LOGIC;
    signal conv_U0_start_write : STD_LOGIC;
    signal start_for_pool_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pool_U0_full_n : STD_LOGIC;
    signal start_for_pool_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pool_U0_empty_n : STD_LOGIC;
    signal pool_U0_start_full_n : STD_LOGIC;
    signal pool_U0_start_write : STD_LOGIC;
    signal cout_write_U0_start_full_n : STD_LOGIC;
    signal cout_write_U0_start_write : STD_LOGIC;

    component cin_load13 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_global_cin_V_AWVALID : OUT STD_LOGIC;
        m_axi_global_cin_V_AWREADY : IN STD_LOGIC;
        m_axi_global_cin_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_global_cin_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_cin_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_global_cin_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_global_cin_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_global_cin_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_global_cin_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_global_cin_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_global_cin_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_global_cin_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_global_cin_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_cin_V_WVALID : OUT STD_LOGIC;
        m_axi_global_cin_V_WREADY : IN STD_LOGIC;
        m_axi_global_cin_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_global_cin_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_global_cin_V_WLAST : OUT STD_LOGIC;
        m_axi_global_cin_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_cin_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_cin_V_ARVALID : OUT STD_LOGIC;
        m_axi_global_cin_V_ARREADY : IN STD_LOGIC;
        m_axi_global_cin_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_global_cin_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_cin_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_global_cin_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_global_cin_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_global_cin_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_global_cin_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_global_cin_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_global_cin_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_global_cin_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_global_cin_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_cin_V_RVALID : IN STD_LOGIC;
        m_axi_global_cin_V_RREADY : OUT STD_LOGIC;
        m_axi_global_cin_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_global_cin_V_RLAST : IN STD_LOGIC;
        m_axi_global_cin_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_cin_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_cin_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_global_cin_V_BVALID : IN STD_LOGIC;
        m_axi_global_cin_V_BREADY : OUT STD_LOGIC;
        m_axi_global_cin_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_global_cin_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_cin_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        global_cin_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
        config_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        config_r_ce0 : OUT STD_LOGIC;
        config_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        config_r_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        config_r_ce1 : OUT STD_LOGIC;
        config_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        fifo_cin_load_0_V_V_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        fifo_cin_load_0_V_V_full_n : IN STD_LOGIC;
        fifo_cin_load_0_V_V_write : OUT STD_LOGIC;
        config_weight_load_V_din : OUT STD_LOGIC_VECTOR (191 downto 0);
        config_weight_load_V_full_n : IN STD_LOGIC;
        config_weight_load_V_write : OUT STD_LOGIC;
        global_weight_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
        global_bias_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
        global_cout_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
        global_weight_V_offset_out_din : OUT STD_LOGIC_VECTOR (57 downto 0);
        global_weight_V_offset_out_full_n : IN STD_LOGIC;
        global_weight_V_offset_out_write : OUT STD_LOGIC;
        global_bias_V_offset_out_din : OUT STD_LOGIC_VECTOR (57 downto 0);
        global_bias_V_offset_out_full_n : IN STD_LOGIC;
        global_bias_V_offset_out_write : OUT STD_LOGIC;
        global_cout_V_offset_out_din : OUT STD_LOGIC_VECTOR (57 downto 0);
        global_cout_V_offset_out_full_n : IN STD_LOGIC;
        global_cout_V_offset_out_write : OUT STD_LOGIC );
    end component;


    component weight_load IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_global_weight_V_AWVALID : OUT STD_LOGIC;
        m_axi_global_weight_V_AWREADY : IN STD_LOGIC;
        m_axi_global_weight_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_global_weight_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_weight_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_global_weight_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_global_weight_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_global_weight_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_global_weight_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_global_weight_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_global_weight_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_global_weight_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_global_weight_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_weight_V_WVALID : OUT STD_LOGIC;
        m_axi_global_weight_V_WREADY : IN STD_LOGIC;
        m_axi_global_weight_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_global_weight_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_global_weight_V_WLAST : OUT STD_LOGIC;
        m_axi_global_weight_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_weight_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_weight_V_ARVALID : OUT STD_LOGIC;
        m_axi_global_weight_V_ARREADY : IN STD_LOGIC;
        m_axi_global_weight_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_global_weight_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_weight_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_global_weight_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_global_weight_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_global_weight_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_global_weight_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_global_weight_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_global_weight_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_global_weight_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_global_weight_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_weight_V_RVALID : IN STD_LOGIC;
        m_axi_global_weight_V_RREADY : OUT STD_LOGIC;
        m_axi_global_weight_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_global_weight_V_RLAST : IN STD_LOGIC;
        m_axi_global_weight_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_weight_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_weight_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_global_weight_V_BVALID : IN STD_LOGIC;
        m_axi_global_weight_V_BREADY : OUT STD_LOGIC;
        m_axi_global_weight_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_global_weight_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_weight_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        global_weight_V_offset_dout : IN STD_LOGIC_VECTOR (57 downto 0);
        global_weight_V_offset_empty_n : IN STD_LOGIC;
        global_weight_V_offset_read : OUT STD_LOGIC;
        global_bias_V_offset_dout : IN STD_LOGIC_VECTOR (57 downto 0);
        global_bias_V_offset_empty_n : IN STD_LOGIC;
        global_bias_V_offset_read : OUT STD_LOGIC;
        fifo_config_in_V_V_dout : IN STD_LOGIC_VECTOR (191 downto 0);
        fifo_config_in_V_V_empty_n : IN STD_LOGIC;
        fifo_config_in_V_V_read : OUT STD_LOGIC;
        fifo_conv_weight_V_V_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        fifo_conv_weight_V_V_full_n : IN STD_LOGIC;
        fifo_conv_weight_V_V_write : OUT STD_LOGIC;
        fifo_gamma_conv_V_V_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        fifo_gamma_conv_V_V_full_n : IN STD_LOGIC;
        fifo_gamma_conv_V_V_write : OUT STD_LOGIC;
        fifo_beta_conv_V_V_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        fifo_beta_conv_V_V_full_n : IN STD_LOGIC;
        fifo_beta_conv_V_V_write : OUT STD_LOGIC;
        fifo_config_out_V_V_din : OUT STD_LOGIC_VECTOR (191 downto 0);
        fifo_config_out_V_V_full_n : IN STD_LOGIC;
        fifo_config_out_V_V_write : OUT STD_LOGIC );
    end component;


    component conv IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fifo_cin_V_V_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        fifo_cin_V_V_empty_n : IN STD_LOGIC;
        fifo_cin_V_V_read : OUT STD_LOGIC;
        fifo_weight_V_V_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        fifo_weight_V_V_empty_n : IN STD_LOGIC;
        fifo_weight_V_V_read : OUT STD_LOGIC;
        fifo_config_in_V_V_dout : IN STD_LOGIC_VECTOR (191 downto 0);
        fifo_config_in_V_V_empty_n : IN STD_LOGIC;
        fifo_config_in_V_V_read : OUT STD_LOGIC;
        fifo_cout_V_V_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        fifo_cout_V_V_full_n : IN STD_LOGIC;
        fifo_cout_V_V_write : OUT STD_LOGIC;
        fifo_config_out_V_V_din : OUT STD_LOGIC_VECTOR (191 downto 0);
        fifo_config_out_V_V_full_n : IN STD_LOGIC;
        fifo_config_out_V_V_write : OUT STD_LOGIC );
    end component;


    component relu IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        fifo_cin_V_V_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        fifo_cin_V_V_empty_n : IN STD_LOGIC;
        fifo_cin_V_V_read : OUT STD_LOGIC;
        fifo_config_in_V_V_dout : IN STD_LOGIC_VECTOR (191 downto 0);
        fifo_config_in_V_V_empty_n : IN STD_LOGIC;
        fifo_config_in_V_V_read : OUT STD_LOGIC;
        fifo_cout_V_V_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        fifo_cout_V_V_full_n : IN STD_LOGIC;
        fifo_cout_V_V_write : OUT STD_LOGIC;
        fifo_config_out_V_V_din : OUT STD_LOGIC_VECTOR (191 downto 0);
        fifo_config_out_V_V_full_n : IN STD_LOGIC;
        fifo_config_out_V_V_write : OUT STD_LOGIC;
        fifo_gamma_conv_V_V_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        fifo_gamma_conv_V_V_empty_n : IN STD_LOGIC;
        fifo_gamma_conv_V_V_read : OUT STD_LOGIC;
        fifo_beta_conv_V_V_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        fifo_beta_conv_V_V_empty_n : IN STD_LOGIC;
        fifo_beta_conv_V_V_read : OUT STD_LOGIC );
    end component;


    component pool IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fifo_cin_V_V_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        fifo_cin_V_V_empty_n : IN STD_LOGIC;
        fifo_cin_V_V_read : OUT STD_LOGIC;
        fifo_config_in_V_V_dout : IN STD_LOGIC_VECTOR (191 downto 0);
        fifo_config_in_V_V_empty_n : IN STD_LOGIC;
        fifo_config_in_V_V_read : OUT STD_LOGIC;
        fifo_cout_V_V_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        fifo_cout_V_V_full_n : IN STD_LOGIC;
        fifo_cout_V_V_write : OUT STD_LOGIC;
        fifo_config_out_V_V_din : OUT STD_LOGIC_VECTOR (191 downto 0);
        fifo_config_out_V_V_full_n : IN STD_LOGIC;
        fifo_config_out_V_V_write : OUT STD_LOGIC );
    end component;


    component cout_write IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fifo_cout_V_V_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        fifo_cout_V_V_empty_n : IN STD_LOGIC;
        fifo_cout_V_V_read : OUT STD_LOGIC;
        fifo_config_in_V_V_dout : IN STD_LOGIC_VECTOR (191 downto 0);
        fifo_config_in_V_V_empty_n : IN STD_LOGIC;
        fifo_config_in_V_V_read : OUT STD_LOGIC;
        m_axi_global_cout_V_AWVALID : OUT STD_LOGIC;
        m_axi_global_cout_V_AWREADY : IN STD_LOGIC;
        m_axi_global_cout_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_global_cout_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_cout_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_global_cout_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_global_cout_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_global_cout_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_global_cout_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_global_cout_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_global_cout_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_global_cout_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_global_cout_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_cout_V_WVALID : OUT STD_LOGIC;
        m_axi_global_cout_V_WREADY : IN STD_LOGIC;
        m_axi_global_cout_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_global_cout_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_global_cout_V_WLAST : OUT STD_LOGIC;
        m_axi_global_cout_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_cout_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_cout_V_ARVALID : OUT STD_LOGIC;
        m_axi_global_cout_V_ARREADY : IN STD_LOGIC;
        m_axi_global_cout_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_global_cout_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_cout_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_global_cout_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_global_cout_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_global_cout_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_global_cout_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_global_cout_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_global_cout_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_global_cout_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_global_cout_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_cout_V_RVALID : IN STD_LOGIC;
        m_axi_global_cout_V_RREADY : OUT STD_LOGIC;
        m_axi_global_cout_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_global_cout_V_RLAST : IN STD_LOGIC;
        m_axi_global_cout_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_cout_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_cout_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_global_cout_V_BVALID : IN STD_LOGIC;
        m_axi_global_cout_V_BREADY : OUT STD_LOGIC;
        m_axi_global_cout_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_global_cout_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_global_cout_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        global_cout_V_offset_dout : IN STD_LOGIC_VECTOR (57 downto 0);
        global_cout_V_offset_empty_n : IN STD_LOGIC;
        global_cout_V_offset_read : OUT STD_LOGIC );
    end component;


    component fifo_w256_d128_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (255 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (255 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w192_d16_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (191 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (191 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w58_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (57 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (57 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w58_d6_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (57 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (57 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w256_d64_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (255 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (255 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w256_d16_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (255 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (255 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_conv_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_cout_wrZio IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_relu_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_pool_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    cin_load13_U0 : component cin_load13
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => cin_load13_U0_ap_start,
        start_full_n => cin_load13_U0_start_full_n,
        ap_done => cin_load13_U0_ap_done,
        ap_continue => cin_load13_U0_ap_continue,
        ap_idle => cin_load13_U0_ap_idle,
        ap_ready => cin_load13_U0_ap_ready,
        start_out => cin_load13_U0_start_out,
        start_write => cin_load13_U0_start_write,
        m_axi_global_cin_V_AWVALID => cin_load13_U0_m_axi_global_cin_V_AWVALID,
        m_axi_global_cin_V_AWREADY => ap_const_logic_0,
        m_axi_global_cin_V_AWADDR => cin_load13_U0_m_axi_global_cin_V_AWADDR,
        m_axi_global_cin_V_AWID => cin_load13_U0_m_axi_global_cin_V_AWID,
        m_axi_global_cin_V_AWLEN => cin_load13_U0_m_axi_global_cin_V_AWLEN,
        m_axi_global_cin_V_AWSIZE => cin_load13_U0_m_axi_global_cin_V_AWSIZE,
        m_axi_global_cin_V_AWBURST => cin_load13_U0_m_axi_global_cin_V_AWBURST,
        m_axi_global_cin_V_AWLOCK => cin_load13_U0_m_axi_global_cin_V_AWLOCK,
        m_axi_global_cin_V_AWCACHE => cin_load13_U0_m_axi_global_cin_V_AWCACHE,
        m_axi_global_cin_V_AWPROT => cin_load13_U0_m_axi_global_cin_V_AWPROT,
        m_axi_global_cin_V_AWQOS => cin_load13_U0_m_axi_global_cin_V_AWQOS,
        m_axi_global_cin_V_AWREGION => cin_load13_U0_m_axi_global_cin_V_AWREGION,
        m_axi_global_cin_V_AWUSER => cin_load13_U0_m_axi_global_cin_V_AWUSER,
        m_axi_global_cin_V_WVALID => cin_load13_U0_m_axi_global_cin_V_WVALID,
        m_axi_global_cin_V_WREADY => ap_const_logic_0,
        m_axi_global_cin_V_WDATA => cin_load13_U0_m_axi_global_cin_V_WDATA,
        m_axi_global_cin_V_WSTRB => cin_load13_U0_m_axi_global_cin_V_WSTRB,
        m_axi_global_cin_V_WLAST => cin_load13_U0_m_axi_global_cin_V_WLAST,
        m_axi_global_cin_V_WID => cin_load13_U0_m_axi_global_cin_V_WID,
        m_axi_global_cin_V_WUSER => cin_load13_U0_m_axi_global_cin_V_WUSER,
        m_axi_global_cin_V_ARVALID => cin_load13_U0_m_axi_global_cin_V_ARVALID,
        m_axi_global_cin_V_ARREADY => m_axi_global_cin_V_ARREADY,
        m_axi_global_cin_V_ARADDR => cin_load13_U0_m_axi_global_cin_V_ARADDR,
        m_axi_global_cin_V_ARID => cin_load13_U0_m_axi_global_cin_V_ARID,
        m_axi_global_cin_V_ARLEN => cin_load13_U0_m_axi_global_cin_V_ARLEN,
        m_axi_global_cin_V_ARSIZE => cin_load13_U0_m_axi_global_cin_V_ARSIZE,
        m_axi_global_cin_V_ARBURST => cin_load13_U0_m_axi_global_cin_V_ARBURST,
        m_axi_global_cin_V_ARLOCK => cin_load13_U0_m_axi_global_cin_V_ARLOCK,
        m_axi_global_cin_V_ARCACHE => cin_load13_U0_m_axi_global_cin_V_ARCACHE,
        m_axi_global_cin_V_ARPROT => cin_load13_U0_m_axi_global_cin_V_ARPROT,
        m_axi_global_cin_V_ARQOS => cin_load13_U0_m_axi_global_cin_V_ARQOS,
        m_axi_global_cin_V_ARREGION => cin_load13_U0_m_axi_global_cin_V_ARREGION,
        m_axi_global_cin_V_ARUSER => cin_load13_U0_m_axi_global_cin_V_ARUSER,
        m_axi_global_cin_V_RVALID => m_axi_global_cin_V_RVALID,
        m_axi_global_cin_V_RREADY => cin_load13_U0_m_axi_global_cin_V_RREADY,
        m_axi_global_cin_V_RDATA => m_axi_global_cin_V_RDATA,
        m_axi_global_cin_V_RLAST => m_axi_global_cin_V_RLAST,
        m_axi_global_cin_V_RID => m_axi_global_cin_V_RID,
        m_axi_global_cin_V_RUSER => m_axi_global_cin_V_RUSER,
        m_axi_global_cin_V_RRESP => m_axi_global_cin_V_RRESP,
        m_axi_global_cin_V_BVALID => ap_const_logic_0,
        m_axi_global_cin_V_BREADY => cin_load13_U0_m_axi_global_cin_V_BREADY,
        m_axi_global_cin_V_BRESP => ap_const_lv2_0,
        m_axi_global_cin_V_BID => ap_const_lv1_0,
        m_axi_global_cin_V_BUSER => ap_const_lv1_0,
        global_cin_V_offset => global_cin_V_offset,
        config_r_address0 => cin_load13_U0_config_r_address0,
        config_r_ce0 => cin_load13_U0_config_r_ce0,
        config_r_q0 => config_r_q0,
        config_r_address1 => cin_load13_U0_config_r_address1,
        config_r_ce1 => cin_load13_U0_config_r_ce1,
        config_r_q1 => config_r_q1,
        fifo_cin_load_0_V_V_din => cin_load13_U0_fifo_cin_load_0_V_V_din,
        fifo_cin_load_0_V_V_full_n => fifo_cin_load_0_V_V_full_n,
        fifo_cin_load_0_V_V_write => cin_load13_U0_fifo_cin_load_0_V_V_write,
        config_weight_load_V_din => cin_load13_U0_config_weight_load_V_din,
        config_weight_load_V_full_n => config_weight_load_V_full_n,
        config_weight_load_V_write => cin_load13_U0_config_weight_load_V_write,
        global_weight_V_offset => global_weight_V_offset,
        global_bias_V_offset => global_bias_V_offset,
        global_cout_V_offset => global_cout_V_offset,
        global_weight_V_offset_out_din => cin_load13_U0_global_weight_V_offset_out_din,
        global_weight_V_offset_out_full_n => global_weight_V_offs_3_full_n,
        global_weight_V_offset_out_write => cin_load13_U0_global_weight_V_offset_out_write,
        global_bias_V_offset_out_din => cin_load13_U0_global_bias_V_offset_out_din,
        global_bias_V_offset_out_full_n => global_bias_V_offset_5_full_n,
        global_bias_V_offset_out_write => cin_load13_U0_global_bias_V_offset_out_write,
        global_cout_V_offset_out_din => cin_load13_U0_global_cout_V_offset_out_din,
        global_cout_V_offset_out_full_n => global_cout_V_offset_2_full_n,
        global_cout_V_offset_out_write => cin_load13_U0_global_cout_V_offset_out_write);

    weight_load_U0 : component weight_load
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => weight_load_U0_ap_start,
        start_full_n => start_for_relu_U0_full_n,
        ap_done => weight_load_U0_ap_done,
        ap_continue => weight_load_U0_ap_continue,
        ap_idle => weight_load_U0_ap_idle,
        ap_ready => weight_load_U0_ap_ready,
        start_out => weight_load_U0_start_out,
        start_write => weight_load_U0_start_write,
        m_axi_global_weight_V_AWVALID => weight_load_U0_m_axi_global_weight_V_AWVALID,
        m_axi_global_weight_V_AWREADY => ap_const_logic_0,
        m_axi_global_weight_V_AWADDR => weight_load_U0_m_axi_global_weight_V_AWADDR,
        m_axi_global_weight_V_AWID => weight_load_U0_m_axi_global_weight_V_AWID,
        m_axi_global_weight_V_AWLEN => weight_load_U0_m_axi_global_weight_V_AWLEN,
        m_axi_global_weight_V_AWSIZE => weight_load_U0_m_axi_global_weight_V_AWSIZE,
        m_axi_global_weight_V_AWBURST => weight_load_U0_m_axi_global_weight_V_AWBURST,
        m_axi_global_weight_V_AWLOCK => weight_load_U0_m_axi_global_weight_V_AWLOCK,
        m_axi_global_weight_V_AWCACHE => weight_load_U0_m_axi_global_weight_V_AWCACHE,
        m_axi_global_weight_V_AWPROT => weight_load_U0_m_axi_global_weight_V_AWPROT,
        m_axi_global_weight_V_AWQOS => weight_load_U0_m_axi_global_weight_V_AWQOS,
        m_axi_global_weight_V_AWREGION => weight_load_U0_m_axi_global_weight_V_AWREGION,
        m_axi_global_weight_V_AWUSER => weight_load_U0_m_axi_global_weight_V_AWUSER,
        m_axi_global_weight_V_WVALID => weight_load_U0_m_axi_global_weight_V_WVALID,
        m_axi_global_weight_V_WREADY => ap_const_logic_0,
        m_axi_global_weight_V_WDATA => weight_load_U0_m_axi_global_weight_V_WDATA,
        m_axi_global_weight_V_WSTRB => weight_load_U0_m_axi_global_weight_V_WSTRB,
        m_axi_global_weight_V_WLAST => weight_load_U0_m_axi_global_weight_V_WLAST,
        m_axi_global_weight_V_WID => weight_load_U0_m_axi_global_weight_V_WID,
        m_axi_global_weight_V_WUSER => weight_load_U0_m_axi_global_weight_V_WUSER,
        m_axi_global_weight_V_ARVALID => weight_load_U0_m_axi_global_weight_V_ARVALID,
        m_axi_global_weight_V_ARREADY => m_axi_global_weight_V_ARREADY,
        m_axi_global_weight_V_ARADDR => weight_load_U0_m_axi_global_weight_V_ARADDR,
        m_axi_global_weight_V_ARID => weight_load_U0_m_axi_global_weight_V_ARID,
        m_axi_global_weight_V_ARLEN => weight_load_U0_m_axi_global_weight_V_ARLEN,
        m_axi_global_weight_V_ARSIZE => weight_load_U0_m_axi_global_weight_V_ARSIZE,
        m_axi_global_weight_V_ARBURST => weight_load_U0_m_axi_global_weight_V_ARBURST,
        m_axi_global_weight_V_ARLOCK => weight_load_U0_m_axi_global_weight_V_ARLOCK,
        m_axi_global_weight_V_ARCACHE => weight_load_U0_m_axi_global_weight_V_ARCACHE,
        m_axi_global_weight_V_ARPROT => weight_load_U0_m_axi_global_weight_V_ARPROT,
        m_axi_global_weight_V_ARQOS => weight_load_U0_m_axi_global_weight_V_ARQOS,
        m_axi_global_weight_V_ARREGION => weight_load_U0_m_axi_global_weight_V_ARREGION,
        m_axi_global_weight_V_ARUSER => weight_load_U0_m_axi_global_weight_V_ARUSER,
        m_axi_global_weight_V_RVALID => m_axi_global_weight_V_RVALID,
        m_axi_global_weight_V_RREADY => weight_load_U0_m_axi_global_weight_V_RREADY,
        m_axi_global_weight_V_RDATA => m_axi_global_weight_V_RDATA,
        m_axi_global_weight_V_RLAST => m_axi_global_weight_V_RLAST,
        m_axi_global_weight_V_RID => m_axi_global_weight_V_RID,
        m_axi_global_weight_V_RUSER => m_axi_global_weight_V_RUSER,
        m_axi_global_weight_V_RRESP => m_axi_global_weight_V_RRESP,
        m_axi_global_weight_V_BVALID => ap_const_logic_0,
        m_axi_global_weight_V_BREADY => weight_load_U0_m_axi_global_weight_V_BREADY,
        m_axi_global_weight_V_BRESP => ap_const_lv2_0,
        m_axi_global_weight_V_BID => ap_const_lv1_0,
        m_axi_global_weight_V_BUSER => ap_const_lv1_0,
        global_weight_V_offset_dout => global_weight_V_offs_3_dout,
        global_weight_V_offset_empty_n => global_weight_V_offs_3_empty_n,
        global_weight_V_offset_read => weight_load_U0_global_weight_V_offset_read,
        global_bias_V_offset_dout => global_bias_V_offset_5_dout,
        global_bias_V_offset_empty_n => global_bias_V_offset_5_empty_n,
        global_bias_V_offset_read => weight_load_U0_global_bias_V_offset_read,
        fifo_config_in_V_V_dout => config_weight_load_V_dout,
        fifo_config_in_V_V_empty_n => config_weight_load_V_empty_n,
        fifo_config_in_V_V_read => weight_load_U0_fifo_config_in_V_V_read,
        fifo_conv_weight_V_V_din => weight_load_U0_fifo_conv_weight_V_V_din,
        fifo_conv_weight_V_V_full_n => fifo_weight_load_1_V_full_n,
        fifo_conv_weight_V_V_write => weight_load_U0_fifo_conv_weight_V_V_write,
        fifo_gamma_conv_V_V_din => weight_load_U0_fifo_gamma_conv_V_V_din,
        fifo_gamma_conv_V_V_full_n => fifo_beta_conv_V_V_full_n,
        fifo_gamma_conv_V_V_write => weight_load_U0_fifo_gamma_conv_V_V_write,
        fifo_beta_conv_V_V_din => weight_load_U0_fifo_beta_conv_V_V_din,
        fifo_beta_conv_V_V_full_n => fifo_gamma_conv_V_V_full_n,
        fifo_beta_conv_V_V_write => weight_load_U0_fifo_beta_conv_V_V_write,
        fifo_config_out_V_V_din => weight_load_U0_fifo_config_out_V_V_din,
        fifo_config_out_V_V_full_n => config_conv_V_V_full_n,
        fifo_config_out_V_V_write => weight_load_U0_fifo_config_out_V_V_write);

    conv_U0 : component conv
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => conv_U0_ap_start,
        ap_done => conv_U0_ap_done,
        ap_continue => conv_U0_ap_continue,
        ap_idle => conv_U0_ap_idle,
        ap_ready => conv_U0_ap_ready,
        fifo_cin_V_V_dout => fifo_cin_load_0_V_V_dout,
        fifo_cin_V_V_empty_n => fifo_cin_load_0_V_V_empty_n,
        fifo_cin_V_V_read => conv_U0_fifo_cin_V_V_read,
        fifo_weight_V_V_dout => fifo_weight_load_1_V_dout,
        fifo_weight_V_V_empty_n => fifo_weight_load_1_V_empty_n,
        fifo_weight_V_V_read => conv_U0_fifo_weight_V_V_read,
        fifo_config_in_V_V_dout => config_conv_V_V_dout,
        fifo_config_in_V_V_empty_n => config_conv_V_V_empty_n,
        fifo_config_in_V_V_read => conv_U0_fifo_config_in_V_V_read,
        fifo_cout_V_V_din => conv_U0_fifo_cout_V_V_din,
        fifo_cout_V_V_full_n => fifo_conv_0_V_V_full_n,
        fifo_cout_V_V_write => conv_U0_fifo_cout_V_V_write,
        fifo_config_out_V_V_din => conv_U0_fifo_config_out_V_V_din,
        fifo_config_out_V_V_full_n => config_relu_V_V_full_n,
        fifo_config_out_V_V_write => conv_U0_fifo_config_out_V_V_write);

    relu_U0 : component relu
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => relu_U0_ap_start,
        start_full_n => start_for_pool_U0_full_n,
        ap_done => relu_U0_ap_done,
        ap_continue => relu_U0_ap_continue,
        ap_idle => relu_U0_ap_idle,
        ap_ready => relu_U0_ap_ready,
        start_out => relu_U0_start_out,
        start_write => relu_U0_start_write,
        fifo_cin_V_V_dout => fifo_conv_0_V_V_dout,
        fifo_cin_V_V_empty_n => fifo_conv_0_V_V_empty_n,
        fifo_cin_V_V_read => relu_U0_fifo_cin_V_V_read,
        fifo_config_in_V_V_dout => config_relu_V_V_dout,
        fifo_config_in_V_V_empty_n => config_relu_V_V_empty_n,
        fifo_config_in_V_V_read => relu_U0_fifo_config_in_V_V_read,
        fifo_cout_V_V_din => relu_U0_fifo_cout_V_V_din,
        fifo_cout_V_V_full_n => fifo_relu_0_V_V_full_n,
        fifo_cout_V_V_write => relu_U0_fifo_cout_V_V_write,
        fifo_config_out_V_V_din => relu_U0_fifo_config_out_V_V_din,
        fifo_config_out_V_V_full_n => config_pool_V_V_full_n,
        fifo_config_out_V_V_write => relu_U0_fifo_config_out_V_V_write,
        fifo_gamma_conv_V_V_dout => fifo_beta_conv_V_V_dout,
        fifo_gamma_conv_V_V_empty_n => fifo_beta_conv_V_V_empty_n,
        fifo_gamma_conv_V_V_read => relu_U0_fifo_gamma_conv_V_V_read,
        fifo_beta_conv_V_V_dout => fifo_gamma_conv_V_V_dout,
        fifo_beta_conv_V_V_empty_n => fifo_gamma_conv_V_V_empty_n,
        fifo_beta_conv_V_V_read => relu_U0_fifo_beta_conv_V_V_read);

    pool_U0 : component pool
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => pool_U0_ap_start,
        ap_done => pool_U0_ap_done,
        ap_continue => pool_U0_ap_continue,
        ap_idle => pool_U0_ap_idle,
        ap_ready => pool_U0_ap_ready,
        fifo_cin_V_V_dout => fifo_relu_0_V_V_dout,
        fifo_cin_V_V_empty_n => fifo_relu_0_V_V_empty_n,
        fifo_cin_V_V_read => pool_U0_fifo_cin_V_V_read,
        fifo_config_in_V_V_dout => config_pool_V_V_dout,
        fifo_config_in_V_V_empty_n => config_pool_V_V_empty_n,
        fifo_config_in_V_V_read => pool_U0_fifo_config_in_V_V_read,
        fifo_cout_V_V_din => pool_U0_fifo_cout_V_V_din,
        fifo_cout_V_V_full_n => fifo_pool_0_V_V_full_n,
        fifo_cout_V_V_write => pool_U0_fifo_cout_V_V_write,
        fifo_config_out_V_V_din => pool_U0_fifo_config_out_V_V_din,
        fifo_config_out_V_V_full_n => config_data_write_V_s_full_n,
        fifo_config_out_V_V_write => pool_U0_fifo_config_out_V_V_write);

    cout_write_U0 : component cout_write
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => cout_write_U0_ap_start,
        ap_done => cout_write_U0_ap_done,
        ap_continue => cout_write_U0_ap_continue,
        ap_idle => cout_write_U0_ap_idle,
        ap_ready => cout_write_U0_ap_ready,
        fifo_cout_V_V_dout => fifo_pool_0_V_V_dout,
        fifo_cout_V_V_empty_n => fifo_pool_0_V_V_empty_n,
        fifo_cout_V_V_read => cout_write_U0_fifo_cout_V_V_read,
        fifo_config_in_V_V_dout => config_data_write_V_s_dout,
        fifo_config_in_V_V_empty_n => config_data_write_V_s_empty_n,
        fifo_config_in_V_V_read => cout_write_U0_fifo_config_in_V_V_read,
        m_axi_global_cout_V_AWVALID => cout_write_U0_m_axi_global_cout_V_AWVALID,
        m_axi_global_cout_V_AWREADY => m_axi_global_cin_V_AWREADY,
        m_axi_global_cout_V_AWADDR => cout_write_U0_m_axi_global_cout_V_AWADDR,
        m_axi_global_cout_V_AWID => cout_write_U0_m_axi_global_cout_V_AWID,
        m_axi_global_cout_V_AWLEN => cout_write_U0_m_axi_global_cout_V_AWLEN,
        m_axi_global_cout_V_AWSIZE => cout_write_U0_m_axi_global_cout_V_AWSIZE,
        m_axi_global_cout_V_AWBURST => cout_write_U0_m_axi_global_cout_V_AWBURST,
        m_axi_global_cout_V_AWLOCK => cout_write_U0_m_axi_global_cout_V_AWLOCK,
        m_axi_global_cout_V_AWCACHE => cout_write_U0_m_axi_global_cout_V_AWCACHE,
        m_axi_global_cout_V_AWPROT => cout_write_U0_m_axi_global_cout_V_AWPROT,
        m_axi_global_cout_V_AWQOS => cout_write_U0_m_axi_global_cout_V_AWQOS,
        m_axi_global_cout_V_AWREGION => cout_write_U0_m_axi_global_cout_V_AWREGION,
        m_axi_global_cout_V_AWUSER => cout_write_U0_m_axi_global_cout_V_AWUSER,
        m_axi_global_cout_V_WVALID => cout_write_U0_m_axi_global_cout_V_WVALID,
        m_axi_global_cout_V_WREADY => m_axi_global_cin_V_WREADY,
        m_axi_global_cout_V_WDATA => cout_write_U0_m_axi_global_cout_V_WDATA,
        m_axi_global_cout_V_WSTRB => cout_write_U0_m_axi_global_cout_V_WSTRB,
        m_axi_global_cout_V_WLAST => cout_write_U0_m_axi_global_cout_V_WLAST,
        m_axi_global_cout_V_WID => cout_write_U0_m_axi_global_cout_V_WID,
        m_axi_global_cout_V_WUSER => cout_write_U0_m_axi_global_cout_V_WUSER,
        m_axi_global_cout_V_ARVALID => cout_write_U0_m_axi_global_cout_V_ARVALID,
        m_axi_global_cout_V_ARREADY => ap_const_logic_0,
        m_axi_global_cout_V_ARADDR => cout_write_U0_m_axi_global_cout_V_ARADDR,
        m_axi_global_cout_V_ARID => cout_write_U0_m_axi_global_cout_V_ARID,
        m_axi_global_cout_V_ARLEN => cout_write_U0_m_axi_global_cout_V_ARLEN,
        m_axi_global_cout_V_ARSIZE => cout_write_U0_m_axi_global_cout_V_ARSIZE,
        m_axi_global_cout_V_ARBURST => cout_write_U0_m_axi_global_cout_V_ARBURST,
        m_axi_global_cout_V_ARLOCK => cout_write_U0_m_axi_global_cout_V_ARLOCK,
        m_axi_global_cout_V_ARCACHE => cout_write_U0_m_axi_global_cout_V_ARCACHE,
        m_axi_global_cout_V_ARPROT => cout_write_U0_m_axi_global_cout_V_ARPROT,
        m_axi_global_cout_V_ARQOS => cout_write_U0_m_axi_global_cout_V_ARQOS,
        m_axi_global_cout_V_ARREGION => cout_write_U0_m_axi_global_cout_V_ARREGION,
        m_axi_global_cout_V_ARUSER => cout_write_U0_m_axi_global_cout_V_ARUSER,
        m_axi_global_cout_V_RVALID => ap_const_logic_0,
        m_axi_global_cout_V_RREADY => cout_write_U0_m_axi_global_cout_V_RREADY,
        m_axi_global_cout_V_RDATA => ap_const_lv512_lc_1,
        m_axi_global_cout_V_RLAST => ap_const_logic_0,
        m_axi_global_cout_V_RID => ap_const_lv1_0,
        m_axi_global_cout_V_RUSER => ap_const_lv1_0,
        m_axi_global_cout_V_RRESP => ap_const_lv2_0,
        m_axi_global_cout_V_BVALID => m_axi_global_cin_V_BVALID,
        m_axi_global_cout_V_BREADY => cout_write_U0_m_axi_global_cout_V_BREADY,
        m_axi_global_cout_V_BRESP => m_axi_global_cin_V_BRESP,
        m_axi_global_cout_V_BID => m_axi_global_cin_V_BID,
        m_axi_global_cout_V_BUSER => m_axi_global_cin_V_BUSER,
        global_cout_V_offset_dout => global_cout_V_offset_2_dout,
        global_cout_V_offset_empty_n => global_cout_V_offset_2_empty_n,
        global_cout_V_offset_read => cout_write_U0_global_cout_V_offset_read);

    fifo_cin_load_0_V_V_U : component fifo_w256_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cin_load13_U0_fifo_cin_load_0_V_V_din,
        if_full_n => fifo_cin_load_0_V_V_full_n,
        if_write => cin_load13_U0_fifo_cin_load_0_V_V_write,
        if_dout => fifo_cin_load_0_V_V_dout,
        if_empty_n => fifo_cin_load_0_V_V_empty_n,
        if_read => conv_U0_fifo_cin_V_V_read);

    config_weight_load_V_U : component fifo_w192_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cin_load13_U0_config_weight_load_V_din,
        if_full_n => config_weight_load_V_full_n,
        if_write => cin_load13_U0_config_weight_load_V_write,
        if_dout => config_weight_load_V_dout,
        if_empty_n => config_weight_load_V_empty_n,
        if_read => weight_load_U0_fifo_config_in_V_V_read);

    global_weight_V_offs_3_U : component fifo_w58_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cin_load13_U0_global_weight_V_offset_out_din,
        if_full_n => global_weight_V_offs_3_full_n,
        if_write => cin_load13_U0_global_weight_V_offset_out_write,
        if_dout => global_weight_V_offs_3_dout,
        if_empty_n => global_weight_V_offs_3_empty_n,
        if_read => weight_load_U0_global_weight_V_offset_read);

    global_bias_V_offset_5_U : component fifo_w58_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cin_load13_U0_global_bias_V_offset_out_din,
        if_full_n => global_bias_V_offset_5_full_n,
        if_write => cin_load13_U0_global_bias_V_offset_out_write,
        if_dout => global_bias_V_offset_5_dout,
        if_empty_n => global_bias_V_offset_5_empty_n,
        if_read => weight_load_U0_global_bias_V_offset_read);

    global_cout_V_offset_2_U : component fifo_w58_d6_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cin_load13_U0_global_cout_V_offset_out_din,
        if_full_n => global_cout_V_offset_2_full_n,
        if_write => cin_load13_U0_global_cout_V_offset_out_write,
        if_dout => global_cout_V_offset_2_dout,
        if_empty_n => global_cout_V_offset_2_empty_n,
        if_read => cout_write_U0_global_cout_V_offset_read);

    fifo_weight_load_1_V_U : component fifo_w256_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => weight_load_U0_fifo_conv_weight_V_V_din,
        if_full_n => fifo_weight_load_1_V_full_n,
        if_write => weight_load_U0_fifo_conv_weight_V_V_write,
        if_dout => fifo_weight_load_1_V_dout,
        if_empty_n => fifo_weight_load_1_V_empty_n,
        if_read => conv_U0_fifo_weight_V_V_read);

    fifo_beta_conv_V_V_U : component fifo_w256_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => weight_load_U0_fifo_gamma_conv_V_V_din,
        if_full_n => fifo_beta_conv_V_V_full_n,
        if_write => weight_load_U0_fifo_gamma_conv_V_V_write,
        if_dout => fifo_beta_conv_V_V_dout,
        if_empty_n => fifo_beta_conv_V_V_empty_n,
        if_read => relu_U0_fifo_gamma_conv_V_V_read);

    fifo_gamma_conv_V_V_U : component fifo_w256_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => weight_load_U0_fifo_beta_conv_V_V_din,
        if_full_n => fifo_gamma_conv_V_V_full_n,
        if_write => weight_load_U0_fifo_beta_conv_V_V_write,
        if_dout => fifo_gamma_conv_V_V_dout,
        if_empty_n => fifo_gamma_conv_V_V_empty_n,
        if_read => relu_U0_fifo_beta_conv_V_V_read);

    config_conv_V_V_U : component fifo_w192_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => weight_load_U0_fifo_config_out_V_V_din,
        if_full_n => config_conv_V_V_full_n,
        if_write => weight_load_U0_fifo_config_out_V_V_write,
        if_dout => config_conv_V_V_dout,
        if_empty_n => config_conv_V_V_empty_n,
        if_read => conv_U0_fifo_config_in_V_V_read);

    fifo_conv_0_V_V_U : component fifo_w256_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv_U0_fifo_cout_V_V_din,
        if_full_n => fifo_conv_0_V_V_full_n,
        if_write => conv_U0_fifo_cout_V_V_write,
        if_dout => fifo_conv_0_V_V_dout,
        if_empty_n => fifo_conv_0_V_V_empty_n,
        if_read => relu_U0_fifo_cin_V_V_read);

    config_relu_V_V_U : component fifo_w192_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv_U0_fifo_config_out_V_V_din,
        if_full_n => config_relu_V_V_full_n,
        if_write => conv_U0_fifo_config_out_V_V_write,
        if_dout => config_relu_V_V_dout,
        if_empty_n => config_relu_V_V_empty_n,
        if_read => relu_U0_fifo_config_in_V_V_read);

    fifo_relu_0_V_V_U : component fifo_w256_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => relu_U0_fifo_cout_V_V_din,
        if_full_n => fifo_relu_0_V_V_full_n,
        if_write => relu_U0_fifo_cout_V_V_write,
        if_dout => fifo_relu_0_V_V_dout,
        if_empty_n => fifo_relu_0_V_V_empty_n,
        if_read => pool_U0_fifo_cin_V_V_read);

    config_pool_V_V_U : component fifo_w192_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => relu_U0_fifo_config_out_V_V_din,
        if_full_n => config_pool_V_V_full_n,
        if_write => relu_U0_fifo_config_out_V_V_write,
        if_dout => config_pool_V_V_dout,
        if_empty_n => config_pool_V_V_empty_n,
        if_read => pool_U0_fifo_config_in_V_V_read);

    fifo_pool_0_V_V_U : component fifo_w256_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pool_U0_fifo_cout_V_V_din,
        if_full_n => fifo_pool_0_V_V_full_n,
        if_write => pool_U0_fifo_cout_V_V_write,
        if_dout => fifo_pool_0_V_V_dout,
        if_empty_n => fifo_pool_0_V_V_empty_n,
        if_read => cout_write_U0_fifo_cout_V_V_read);

    config_data_write_V_s_U : component fifo_w192_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pool_U0_fifo_config_out_V_V_din,
        if_full_n => config_data_write_V_s_full_n,
        if_write => pool_U0_fifo_config_out_V_V_write,
        if_dout => config_data_write_V_s_dout,
        if_empty_n => config_data_write_V_s_empty_n,
        if_read => cout_write_U0_fifo_config_in_V_V_read);

    start_for_conv_U0_U : component start_for_conv_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_conv_U0_din,
        if_full_n => start_for_conv_U0_full_n,
        if_write => cin_load13_U0_start_write,
        if_dout => start_for_conv_U0_dout,
        if_empty_n => start_for_conv_U0_empty_n,
        if_read => conv_U0_ap_ready);

    start_for_cout_wrZio_U : component start_for_cout_wrZio
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_cout_write_U0_din,
        if_full_n => start_for_cout_write_U0_full_n,
        if_write => cin_load13_U0_start_write,
        if_dout => start_for_cout_write_U0_dout,
        if_empty_n => start_for_cout_write_U0_empty_n,
        if_read => cout_write_U0_ap_ready);

    start_for_relu_U0_U : component start_for_relu_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_relu_U0_din,
        if_full_n => start_for_relu_U0_full_n,
        if_write => weight_load_U0_start_write,
        if_dout => start_for_relu_U0_dout,
        if_empty_n => start_for_relu_U0_empty_n,
        if_read => relu_U0_ap_ready);

    start_for_pool_U0_U : component start_for_pool_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_pool_U0_din,
        if_full_n => start_for_pool_U0_full_n,
        if_write => relu_U0_start_write,
        if_dout => start_for_pool_U0_dout,
        if_empty_n => start_for_pool_U0_empty_n,
        if_read => pool_U0_ap_ready);





    ap_sync_reg_cin_load13_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_cin_load13_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_cin_load13_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_cin_load13_U0_ap_ready <= ap_sync_cin_load13_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_weight_load_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_weight_load_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_weight_load_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_weight_load_U0_ap_ready <= ap_sync_weight_load_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    cin_load13_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (cin_load13_U0_ap_ready = ap_const_logic_0))) then 
                cin_load13_U0_ap_ready_count <= std_logic_vector(unsigned(cin_load13_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((cin_load13_U0_ap_ready = ap_const_logic_1) and (ap_sync_ready = ap_const_logic_0))) then 
                cin_load13_U0_ap_ready_count <= std_logic_vector(unsigned(cin_load13_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    weight_load_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (weight_load_U0_ap_ready = ap_const_logic_0))) then 
                weight_load_U0_ap_ready_count <= std_logic_vector(unsigned(weight_load_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((weight_load_U0_ap_ready = ap_const_logic_1) and (ap_sync_ready = ap_const_logic_0))) then 
                weight_load_U0_ap_ready_count <= std_logic_vector(unsigned(weight_load_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    ap_done <= cout_write_U0_ap_done;
    ap_idle <= (weight_load_U0_ap_idle and relu_U0_ap_idle and pool_U0_ap_idle and cout_write_U0_ap_idle and conv_U0_ap_idle and cin_load13_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_cin_load13_U0_ap_ready <= (cin_load13_U0_ap_ready or ap_sync_reg_cin_load13_U0_ap_ready);
    ap_sync_continue <= ap_continue;
    ap_sync_done <= cout_write_U0_ap_done;
    ap_sync_ready <= (ap_sync_weight_load_U0_ap_ready and ap_sync_cin_load13_U0_ap_ready);
    ap_sync_weight_load_U0_ap_ready <= (weight_load_U0_ap_ready or ap_sync_reg_weight_load_U0_ap_ready);
    cin_load13_U0_ap_continue <= ap_const_logic_1;
    cin_load13_U0_ap_start <= ((ap_sync_reg_cin_load13_U0_ap_ready xor ap_const_logic_1) and ap_start);
    cin_load13_U0_start_full_n <= (start_for_cout_write_U0_full_n and start_for_conv_U0_full_n);
    config_r_address0 <= cin_load13_U0_config_r_address0;
    config_r_address1 <= cin_load13_U0_config_r_address1;
    config_r_ce0 <= cin_load13_U0_config_r_ce0;
    config_r_ce1 <= cin_load13_U0_config_r_ce1;
    config_r_d0 <= ap_const_lv32_0;
    config_r_d1 <= ap_const_lv32_0;
    config_r_we0 <= ap_const_logic_0;
    config_r_we1 <= ap_const_logic_0;
    conv_U0_ap_continue <= ap_const_logic_1;
    conv_U0_ap_start <= start_for_conv_U0_empty_n;
    conv_U0_start_full_n <= ap_const_logic_1;
    conv_U0_start_write <= ap_const_logic_0;
    cout_write_U0_ap_continue <= ap_continue;
    cout_write_U0_ap_start <= start_for_cout_write_U0_empty_n;
    cout_write_U0_start_full_n <= ap_const_logic_1;
    cout_write_U0_start_write <= ap_const_logic_0;
    m_axi_global_cin_V_ARADDR <= cin_load13_U0_m_axi_global_cin_V_ARADDR;
    m_axi_global_cin_V_ARBURST <= cin_load13_U0_m_axi_global_cin_V_ARBURST;
    m_axi_global_cin_V_ARCACHE <= cin_load13_U0_m_axi_global_cin_V_ARCACHE;
    m_axi_global_cin_V_ARID <= cin_load13_U0_m_axi_global_cin_V_ARID;
    m_axi_global_cin_V_ARLEN <= cin_load13_U0_m_axi_global_cin_V_ARLEN;
    m_axi_global_cin_V_ARLOCK <= cin_load13_U0_m_axi_global_cin_V_ARLOCK;
    m_axi_global_cin_V_ARPROT <= cin_load13_U0_m_axi_global_cin_V_ARPROT;
    m_axi_global_cin_V_ARQOS <= cin_load13_U0_m_axi_global_cin_V_ARQOS;
    m_axi_global_cin_V_ARREGION <= cin_load13_U0_m_axi_global_cin_V_ARREGION;
    m_axi_global_cin_V_ARSIZE <= cin_load13_U0_m_axi_global_cin_V_ARSIZE;
    m_axi_global_cin_V_ARUSER <= cin_load13_U0_m_axi_global_cin_V_ARUSER;
    m_axi_global_cin_V_ARVALID <= cin_load13_U0_m_axi_global_cin_V_ARVALID;
    m_axi_global_cin_V_AWADDR <= cout_write_U0_m_axi_global_cout_V_AWADDR;
    m_axi_global_cin_V_AWBURST <= cout_write_U0_m_axi_global_cout_V_AWBURST;
    m_axi_global_cin_V_AWCACHE <= cout_write_U0_m_axi_global_cout_V_AWCACHE;
    m_axi_global_cin_V_AWID <= cout_write_U0_m_axi_global_cout_V_AWID;
    m_axi_global_cin_V_AWLEN <= cout_write_U0_m_axi_global_cout_V_AWLEN;
    m_axi_global_cin_V_AWLOCK <= cout_write_U0_m_axi_global_cout_V_AWLOCK;
    m_axi_global_cin_V_AWPROT <= cout_write_U0_m_axi_global_cout_V_AWPROT;
    m_axi_global_cin_V_AWQOS <= cout_write_U0_m_axi_global_cout_V_AWQOS;
    m_axi_global_cin_V_AWREGION <= cout_write_U0_m_axi_global_cout_V_AWREGION;
    m_axi_global_cin_V_AWSIZE <= cout_write_U0_m_axi_global_cout_V_AWSIZE;
    m_axi_global_cin_V_AWUSER <= cout_write_U0_m_axi_global_cout_V_AWUSER;
    m_axi_global_cin_V_AWVALID <= cout_write_U0_m_axi_global_cout_V_AWVALID;
    m_axi_global_cin_V_BREADY <= cout_write_U0_m_axi_global_cout_V_BREADY;
    m_axi_global_cin_V_RREADY <= cin_load13_U0_m_axi_global_cin_V_RREADY;
    m_axi_global_cin_V_WDATA <= cout_write_U0_m_axi_global_cout_V_WDATA;
    m_axi_global_cin_V_WID <= cout_write_U0_m_axi_global_cout_V_WID;
    m_axi_global_cin_V_WLAST <= cout_write_U0_m_axi_global_cout_V_WLAST;
    m_axi_global_cin_V_WSTRB <= cout_write_U0_m_axi_global_cout_V_WSTRB;
    m_axi_global_cin_V_WUSER <= cout_write_U0_m_axi_global_cout_V_WUSER;
    m_axi_global_cin_V_WVALID <= cout_write_U0_m_axi_global_cout_V_WVALID;
    m_axi_global_weight_V_ARADDR <= weight_load_U0_m_axi_global_weight_V_ARADDR;
    m_axi_global_weight_V_ARBURST <= weight_load_U0_m_axi_global_weight_V_ARBURST;
    m_axi_global_weight_V_ARCACHE <= weight_load_U0_m_axi_global_weight_V_ARCACHE;
    m_axi_global_weight_V_ARID <= weight_load_U0_m_axi_global_weight_V_ARID;
    m_axi_global_weight_V_ARLEN <= weight_load_U0_m_axi_global_weight_V_ARLEN;
    m_axi_global_weight_V_ARLOCK <= weight_load_U0_m_axi_global_weight_V_ARLOCK;
    m_axi_global_weight_V_ARPROT <= weight_load_U0_m_axi_global_weight_V_ARPROT;
    m_axi_global_weight_V_ARQOS <= weight_load_U0_m_axi_global_weight_V_ARQOS;
    m_axi_global_weight_V_ARREGION <= weight_load_U0_m_axi_global_weight_V_ARREGION;
    m_axi_global_weight_V_ARSIZE <= weight_load_U0_m_axi_global_weight_V_ARSIZE;
    m_axi_global_weight_V_ARUSER <= weight_load_U0_m_axi_global_weight_V_ARUSER;
    m_axi_global_weight_V_ARVALID <= weight_load_U0_m_axi_global_weight_V_ARVALID;
    m_axi_global_weight_V_AWADDR <= ap_const_lv64_0;
    m_axi_global_weight_V_AWBURST <= ap_const_lv2_0;
    m_axi_global_weight_V_AWCACHE <= ap_const_lv4_0;
    m_axi_global_weight_V_AWID <= ap_const_lv1_0;
    m_axi_global_weight_V_AWLEN <= ap_const_lv32_0;
    m_axi_global_weight_V_AWLOCK <= ap_const_lv2_0;
    m_axi_global_weight_V_AWPROT <= ap_const_lv3_0;
    m_axi_global_weight_V_AWQOS <= ap_const_lv4_0;
    m_axi_global_weight_V_AWREGION <= ap_const_lv4_0;
    m_axi_global_weight_V_AWSIZE <= ap_const_lv3_0;
    m_axi_global_weight_V_AWUSER <= ap_const_lv1_0;
    m_axi_global_weight_V_AWVALID <= ap_const_logic_0;
    m_axi_global_weight_V_BREADY <= ap_const_logic_0;
    m_axi_global_weight_V_RREADY <= weight_load_U0_m_axi_global_weight_V_RREADY;
    m_axi_global_weight_V_WDATA <= ap_const_lv512_lc_1;
    m_axi_global_weight_V_WID <= ap_const_lv1_0;
    m_axi_global_weight_V_WLAST <= ap_const_logic_0;
    m_axi_global_weight_V_WSTRB <= ap_const_lv64_0;
    m_axi_global_weight_V_WUSER <= ap_const_lv1_0;
    m_axi_global_weight_V_WVALID <= ap_const_logic_0;
    pool_U0_ap_continue <= ap_const_logic_1;
    pool_U0_ap_start <= start_for_pool_U0_empty_n;
    pool_U0_start_full_n <= ap_const_logic_1;
    pool_U0_start_write <= ap_const_logic_0;
    relu_U0_ap_continue <= ap_const_logic_1;
    relu_U0_ap_start <= start_for_relu_U0_empty_n;
    start_for_conv_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_cout_write_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_pool_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_relu_U0_din <= (0=>ap_const_logic_1, others=>'-');
    weight_load_U0_ap_continue <= ap_const_logic_1;
    weight_load_U0_ap_start <= ((ap_sync_reg_weight_load_U0_ap_ready xor ap_const_logic_1) and ap_start);
end behav;
