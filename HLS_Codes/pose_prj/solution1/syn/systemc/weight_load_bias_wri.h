// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _weight_load_bias_wri_HH_
#define _weight_load_bias_wri_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct weight_load_bias_wri : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<2> > bias_burst_buf_V_address0;
    sc_out< sc_logic > bias_burst_buf_V_ce0;
    sc_in< sc_lv<512> > bias_burst_buf_V_q0;
    sc_out< sc_lv<256> > fifo_bias_V_V_din;
    sc_in< sc_logic > fifo_bias_V_V_full_n;
    sc_out< sc_logic > fifo_bias_V_V_write;
    sc_in< sc_lv<192> > inst1_V;
    sc_in< sc_lv<192> > inst3_V;
    sc_in< sc_lv<32> > in_num_iter;


    // Module declarations
    weight_load_bias_wri(sc_module_name name);
    SC_HAS_PROCESS(weight_load_bias_wri);

    ~weight_load_bias_wri();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > fifo_bias_V_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond_reg_266;
    sc_signal< sc_lv<1> > exitcond_reg_266_pp0_iter2_reg;
    sc_signal< sc_lv<13> > i_op_assign_reg_120;
    sc_signal< sc_lv<32> > LAYER_IN_NUM_V_fu_141_p1;
    sc_signal< sc_lv<32> > LAYER_IN_NUM_V_reg_243;
    sc_signal< sc_lv<1> > tmp_fu_155_p3;
    sc_signal< sc_lv<33> > ret_V_fu_171_p2;
    sc_signal< sc_lv<33> > ret_V_reg_252;
    sc_signal< sc_lv<1> > tmp_11_fu_180_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<13> > tmp_12_reg_261;
    sc_signal< sc_lv<1> > exitcond_fu_194_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter3;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > exitcond_reg_266_pp0_iter1_reg;
    sc_signal< sc_lv<13> > oo_fu_199_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > bus_b_offset_fu_205_p1;
    sc_signal< sc_lv<1> > bus_b_offset_reg_275;
    sc_signal< sc_lv<1> > bus_b_offset_reg_275_pp0_iter1_reg;
    sc_signal< sc_lv<1> > bus_b_offset_reg_275_pp0_iter2_reg;
    sc_signal< sc_lv<512> > bus_b_data_V_reg_284;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<256> > ap_phi_mux_tmp_V_phi_fu_134_p4;
    sc_signal< sc_lv<256> > ap_phi_reg_pp0_iter3_tmp_V_reg_131;
    sc_signal< sc_lv<256> > fifo_b_data_V_1_fu_224_p1;
    sc_signal< sc_lv<64> > tmp_14_fu_219_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<16> > LAYER_IN_NUM_T_V_fu_145_p4;
    sc_signal< sc_lv<33> > lhs_V_fu_163_p1;
    sc_signal< sc_lv<33> > rhs_V_fu_167_p1;
    sc_signal< sc_lv<33> > tmp_s_fu_177_p1;
    sc_signal< sc_lv<12> > bus_b_idx_fu_209_p4;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_49;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state7;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<13> ap_const_lv13_0;
    static const sc_lv<32> ap_const_lv32_40;
    static const sc_lv<32> ap_const_lv32_4F;
    static const sc_lv<32> ap_const_lv32_53;
    static const sc_lv<32> ap_const_lv32_5F;
    static const sc_lv<13> ap_const_lv13_1;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_100;
    static const sc_lv<32> ap_const_lv32_1FF;
    static const sc_lv<32> ap_const_lv32_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_LAYER_IN_NUM_T_V_fu_145_p4();
    void thread_LAYER_IN_NUM_V_fu_141_p1();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage0_iter2();
    void thread_ap_block_state6_pp0_stage0_iter3();
    void thread_ap_condition_49();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_tmp_V_phi_fu_134_p4();
    void thread_ap_phi_reg_pp0_iter3_tmp_V_reg_131();
    void thread_ap_ready();
    void thread_bias_burst_buf_V_address0();
    void thread_bias_burst_buf_V_ce0();
    void thread_bus_b_idx_fu_209_p4();
    void thread_bus_b_offset_fu_205_p1();
    void thread_exitcond_fu_194_p2();
    void thread_fifo_b_data_V_1_fu_224_p1();
    void thread_fifo_bias_V_V_blk_n();
    void thread_fifo_bias_V_V_din();
    void thread_fifo_bias_V_V_write();
    void thread_lhs_V_fu_163_p1();
    void thread_oo_fu_199_p2();
    void thread_ret_V_fu_171_p2();
    void thread_rhs_V_fu_167_p1();
    void thread_tmp_11_fu_180_p2();
    void thread_tmp_14_fu_219_p1();
    void thread_tmp_fu_155_p3();
    void thread_tmp_s_fu_177_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
