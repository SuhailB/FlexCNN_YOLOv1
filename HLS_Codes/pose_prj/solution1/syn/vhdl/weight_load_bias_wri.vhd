-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity weight_load_bias_wri is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    bias_burst_buf_V_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    bias_burst_buf_V_ce0 : OUT STD_LOGIC;
    bias_burst_buf_V_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    fifo_bias_V_V_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    fifo_bias_V_V_full_n : IN STD_LOGIC;
    fifo_bias_V_V_write : OUT STD_LOGIC;
    inst1_V : IN STD_LOGIC_VECTOR (191 downto 0);
    inst3_V : IN STD_LOGIC_VECTOR (191 downto 0);
    in_num_iter : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of weight_load_bias_wri is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fifo_bias_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_reg_266 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_266_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_op_assign_reg_120 : STD_LOGIC_VECTOR (12 downto 0);
    signal LAYER_IN_NUM_V_fu_141_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal LAYER_IN_NUM_V_reg_243 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_155_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_fu_171_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_reg_252 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_11_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_12_reg_261 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_reg_266_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal oo_fu_199_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal bus_b_offset_fu_205_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal bus_b_offset_reg_275 : STD_LOGIC_VECTOR (0 downto 0);
    signal bus_b_offset_reg_275_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bus_b_offset_reg_275_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bus_b_data_V_reg_284 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_tmp_V_phi_fu_134_p4 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_phi_reg_pp0_iter3_tmp_V_reg_131 : STD_LOGIC_VECTOR (255 downto 0);
    signal fifo_b_data_V_1_fu_224_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_14_fu_219_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal LAYER_IN_NUM_T_V_fu_145_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_fu_163_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal rhs_V_fu_167_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_s_fu_177_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal bus_b_idx_fu_209_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_49 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((tmp_11_fu_180_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((tmp_11_fu_180_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_op_assign_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_194_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_op_assign_reg_120 <= oo_fu_199_p2;
            elsif (((tmp_11_fu_180_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_op_assign_reg_120 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                LAYER_IN_NUM_V_reg_243 <= LAYER_IN_NUM_V_fu_141_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_266_pp0_iter1_reg = ap_const_lv1_0))) then
                bus_b_data_V_reg_284 <= bias_burst_buf_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_194_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                bus_b_offset_reg_275 <= bus_b_offset_fu_205_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                bus_b_offset_reg_275_pp0_iter1_reg <= bus_b_offset_reg_275;
                exitcond_reg_266 <= exitcond_fu_194_p2;
                exitcond_reg_266_pp0_iter1_reg <= exitcond_reg_266;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                bus_b_offset_reg_275_pp0_iter2_reg <= bus_b_offset_reg_275_pp0_iter1_reg;
                exitcond_reg_266_pp0_iter2_reg <= exitcond_reg_266_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (tmp_fu_155_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                ret_V_reg_252 <= ret_V_fu_171_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_11_fu_180_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_12_reg_261 <= inst3_V(95 downto 83);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter3, tmp_fu_155_p3, tmp_11_fu_180_p2, ap_CS_fsm_state2, exitcond_fu_194_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (tmp_fu_155_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif (((ap_start = ap_const_logic_1) and (tmp_fu_155_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_11_fu_180_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_fu_194_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((exitcond_fu_194_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    LAYER_IN_NUM_T_V_fu_145_p4 <= inst3_V(79 downto 64);
    LAYER_IN_NUM_V_fu_141_p1 <= inst1_V(32 - 1 downto 0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state7 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(fifo_bias_V_V_full_n, ap_enable_reg_pp0_iter3, exitcond_reg_266_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((exitcond_reg_266_pp0_iter2_reg = ap_const_lv1_0) and (fifo_bias_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(fifo_bias_V_V_full_n, ap_enable_reg_pp0_iter3, exitcond_reg_266_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((exitcond_reg_266_pp0_iter2_reg = ap_const_lv1_0) and (fifo_bias_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(fifo_bias_V_V_full_n, ap_enable_reg_pp0_iter3, exitcond_reg_266_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((exitcond_reg_266_pp0_iter2_reg = ap_const_lv1_0) and (fifo_bias_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter3_assign_proc : process(fifo_bias_V_V_full_n, exitcond_reg_266_pp0_iter2_reg)
    begin
                ap_block_state6_pp0_stage0_iter3 <= ((exitcond_reg_266_pp0_iter2_reg = ap_const_lv1_0) and (fifo_bias_V_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_49_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, exitcond_reg_266_pp0_iter2_reg)
    begin
                ap_condition_49 <= ((exitcond_reg_266_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_fu_194_p2)
    begin
        if ((exitcond_fu_194_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_tmp_V_phi_fu_134_p4_assign_proc : process(bus_b_offset_reg_275_pp0_iter2_reg, bus_b_data_V_reg_284, ap_phi_reg_pp0_iter3_tmp_V_reg_131, fifo_b_data_V_1_fu_224_p1, ap_condition_49)
    begin
        if ((ap_const_boolean_1 = ap_condition_49)) then
            if ((bus_b_offset_reg_275_pp0_iter2_reg = ap_const_lv1_0)) then 
                ap_phi_mux_tmp_V_phi_fu_134_p4 <= fifo_b_data_V_1_fu_224_p1;
            elsif ((bus_b_offset_reg_275_pp0_iter2_reg = ap_const_lv1_1)) then 
                ap_phi_mux_tmp_V_phi_fu_134_p4 <= bus_b_data_V_reg_284(511 downto 256);
            else 
                ap_phi_mux_tmp_V_phi_fu_134_p4 <= ap_phi_reg_pp0_iter3_tmp_V_reg_131;
            end if;
        else 
            ap_phi_mux_tmp_V_phi_fu_134_p4 <= ap_phi_reg_pp0_iter3_tmp_V_reg_131;
        end if; 
    end process;

    ap_phi_reg_pp0_iter3_tmp_V_reg_131 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_burst_buf_V_address0 <= tmp_14_fu_219_p1(2 - 1 downto 0);

    bias_burst_buf_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            bias_burst_buf_V_ce0 <= ap_const_logic_1;
        else 
            bias_burst_buf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bus_b_idx_fu_209_p4 <= i_op_assign_reg_120(12 downto 1);
    bus_b_offset_fu_205_p1 <= i_op_assign_reg_120(1 - 1 downto 0);
    exitcond_fu_194_p2 <= "1" when (i_op_assign_reg_120 = tmp_12_reg_261) else "0";
    fifo_b_data_V_1_fu_224_p1 <= bus_b_data_V_reg_284(256 - 1 downto 0);

    fifo_bias_V_V_blk_n_assign_proc : process(fifo_bias_V_V_full_n, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, exitcond_reg_266_pp0_iter2_reg)
    begin
        if (((exitcond_reg_266_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            fifo_bias_V_V_blk_n <= fifo_bias_V_V_full_n;
        else 
            fifo_bias_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_bias_V_V_din <= ap_phi_mux_tmp_V_phi_fu_134_p4;

    fifo_bias_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, exitcond_reg_266_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_266_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            fifo_bias_V_V_write <= ap_const_logic_1;
        else 
            fifo_bias_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    lhs_V_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_num_iter),33));
    oo_fu_199_p2 <= std_logic_vector(unsigned(i_op_assign_reg_120) + unsigned(ap_const_lv13_1));
    ret_V_fu_171_p2 <= std_logic_vector(unsigned(lhs_V_fu_163_p1) + unsigned(rhs_V_fu_167_p1));
    rhs_V_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(LAYER_IN_NUM_T_V_fu_145_p4),33));
    tmp_11_fu_180_p2 <= "1" when (unsigned(ret_V_reg_252) < unsigned(tmp_s_fu_177_p1)) else "0";
    tmp_14_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bus_b_idx_fu_209_p4),64));
    tmp_fu_155_p3 <= inst3_V(2 downto 2);
    tmp_s_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(LAYER_IN_NUM_V_reg_243),33));
end behav;
