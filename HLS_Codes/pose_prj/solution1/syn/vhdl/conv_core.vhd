-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_core is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cin_0_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    cin_0_ce0 : OUT STD_LOGIC;
    cin_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cin_1_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    cin_1_ce0 : OUT STD_LOGIC;
    cin_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cin_2_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    cin_2_ce0 : OUT STD_LOGIC;
    cin_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cin_3_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    cin_3_ce0 : OUT STD_LOGIC;
    cin_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cin_4_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    cin_4_ce0 : OUT STD_LOGIC;
    cin_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cin_5_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    cin_5_ce0 : OUT STD_LOGIC;
    cin_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cin_6_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    cin_6_ce0 : OUT STD_LOGIC;
    cin_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cin_7_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    cin_7_ce0 : OUT STD_LOGIC;
    cin_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_0_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    weight_0_ce0 : OUT STD_LOGIC;
    weight_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_1_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    weight_1_ce0 : OUT STD_LOGIC;
    weight_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_2_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    weight_2_ce0 : OUT STD_LOGIC;
    weight_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_3_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    weight_3_ce0 : OUT STD_LOGIC;
    weight_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_4_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    weight_4_ce0 : OUT STD_LOGIC;
    weight_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_5_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    weight_5_ce0 : OUT STD_LOGIC;
    weight_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_6_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    weight_6_ce0 : OUT STD_LOGIC;
    weight_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_7_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    weight_7_ce0 : OUT STD_LOGIC;
    weight_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cout_kernel_0_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    cout_kernel_0_ce0 : OUT STD_LOGIC;
    cout_kernel_0_we0 : OUT STD_LOGIC;
    cout_kernel_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    cout_kernel_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cout_kernel_1_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    cout_kernel_1_ce0 : OUT STD_LOGIC;
    cout_kernel_1_we0 : OUT STD_LOGIC;
    cout_kernel_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    cout_kernel_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cout_kernel_2_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    cout_kernel_2_ce0 : OUT STD_LOGIC;
    cout_kernel_2_we0 : OUT STD_LOGIC;
    cout_kernel_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    cout_kernel_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cout_kernel_3_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    cout_kernel_3_ce0 : OUT STD_LOGIC;
    cout_kernel_3_we0 : OUT STD_LOGIC;
    cout_kernel_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    cout_kernel_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cout_kernel_4_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    cout_kernel_4_ce0 : OUT STD_LOGIC;
    cout_kernel_4_we0 : OUT STD_LOGIC;
    cout_kernel_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    cout_kernel_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cout_kernel_5_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    cout_kernel_5_ce0 : OUT STD_LOGIC;
    cout_kernel_5_we0 : OUT STD_LOGIC;
    cout_kernel_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    cout_kernel_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cout_kernel_6_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    cout_kernel_6_ce0 : OUT STD_LOGIC;
    cout_kernel_6_we0 : OUT STD_LOGIC;
    cout_kernel_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    cout_kernel_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cout_kernel_7_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    cout_kernel_7_ce0 : OUT STD_LOGIC;
    cout_kernel_7_we0 : OUT STD_LOGIC;
    cout_kernel_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    cout_kernel_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    init : IN STD_LOGIC;
    LAYER_IN_NUM_T : IN STD_LOGIC_VECTOR (15 downto 0);
    LAYER_OUT_NUM_T : IN STD_LOGIC_VECTOR (15 downto 0);
    LAYER_IN_H_T : IN STD_LOGIC_VECTOR (31 downto 0);
    LAYER_IN_W_T : IN STD_LOGIC_VECTOR (31 downto 0);
    FILTER_S : IN STD_LOGIC_VECTOR (15 downto 0);
    STRIDE : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_core is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (108 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (108 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (108 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (108 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (108 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (108 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (108 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (108 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (108 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (108 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv38_0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000000";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv38_34 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000110100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv11_36 : STD_LOGIC_VECTOR (10 downto 0) := "00000110110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal init_read_read_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_671_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1149 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1095_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_reg_1155 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_10_fu_682_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal o_10_reg_1163 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_688_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1168 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal tmp_356_cast_fu_714_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_356_cast_reg_1173 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_544_fu_718_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_544_reg_1178 : STD_LOGIC_VECTOR (2 downto 0);
    signal newIndex7_cast_fu_732_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal newIndex7_cast_reg_1182 : STD_LOGIC_VECTOR (13 downto 0);
    signal arrayNo1_fu_736_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayNo1_reg_1188 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul4_fu_740_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul4_reg_1193 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal next_mul5_fu_745_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal next_mul5_reg_1198 : STD_LOGIC_VECTOR (37 downto 0);
    signal h_9_fu_756_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_9_reg_1206 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_762_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_334_reg_1211 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal next_mul_fu_766_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_1216 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal w_9_fu_776_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_9_reg_1224 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_548_fu_790_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_548_reg_1229 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_337_fu_771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cout_kernel_0_addr_reg_1234 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal cout_kernel_1_addr_reg_1239 : STD_LOGIC_VECTOR (12 downto 0);
    signal cout_kernel_2_addr_reg_1244 : STD_LOGIC_VECTOR (12 downto 0);
    signal cout_kernel_3_addr_reg_1249 : STD_LOGIC_VECTOR (12 downto 0);
    signal cout_kernel_4_addr_reg_1254 : STD_LOGIC_VECTOR (12 downto 0);
    signal cout_kernel_5_addr_reg_1259 : STD_LOGIC_VECTOR (12 downto 0);
    signal cout_kernel_6_addr_reg_1264 : STD_LOGIC_VECTOR (12 downto 0);
    signal cout_kernel_7_addr_reg_1269 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_551_fu_828_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_551_reg_1274 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal cout_kernel_0_addr_1_reg_1279 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal cout_kernel_1_addr_1_reg_1284 : STD_LOGIC_VECTOR (12 downto 0);
    signal cout_kernel_2_addr_1_reg_1289 : STD_LOGIC_VECTOR (12 downto 0);
    signal cout_kernel_3_addr_1_reg_1294 : STD_LOGIC_VECTOR (12 downto 0);
    signal cout_kernel_4_addr_1_reg_1299 : STD_LOGIC_VECTOR (12 downto 0);
    signal cout_kernel_5_addr_1_reg_1304 : STD_LOGIC_VECTOR (12 downto 0);
    signal cout_kernel_6_addr_1_reg_1309 : STD_LOGIC_VECTOR (12 downto 0);
    signal cout_kernel_7_addr_1_reg_1314 : STD_LOGIC_VECTOR (12 downto 0);
    signal indvar_flatten_next_fu_863_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_next_reg_1322 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal p_mid2_fu_880_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_mid2_reg_1327 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_flatten_fu_858_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal arrayNo_mid2_v_v_fu_888_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal arrayNo_mid2_v_v_reg_1334 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_552_fu_896_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_552_reg_1339 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_553_reg_1344 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_554_fu_924_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_554_reg_1349 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal tmp_555_fu_936_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_555_reg_1354 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_556_fu_940_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_556_reg_1359 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_369_fu_951_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_369_reg_1364 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal arrayNo_mid2_fu_956_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayNo_mid2_reg_1369 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal newIndex1_mid2_cast_fu_959_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal newIndex1_mid2_cast_reg_1375 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1101_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_366_reg_1381 : STD_LOGIC_VECTOR (10 downto 0);
    signal q_2_fu_971_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal q_2_reg_1389 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal tmp_557_fu_988_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_557_reg_1394 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_fu_966_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_374_fu_996_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_374_reg_1399 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_2_fu_1001_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_370_fu_1006_p2 : STD_LOGIC_VECTOR (10 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_370_fu_1006_p2 : signal is "no";
    signal tmp_370_reg_1409 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal tmp_373_fu_1017_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_373_reg_1414 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal tmp_377_fu_1029_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_377_reg_1419 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal cin_0_load_reg_1504 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal cin_1_load_reg_1509 : STD_LOGIC_VECTOR (31 downto 0);
    signal cin_2_load_reg_1514 : STD_LOGIC_VECTOR (31 downto 0);
    signal cin_3_load_reg_1519 : STD_LOGIC_VECTOR (31 downto 0);
    signal cin_4_load_reg_1524 : STD_LOGIC_VECTOR (31 downto 0);
    signal cin_5_load_reg_1529 : STD_LOGIC_VECTOR (31 downto 0);
    signal cin_6_load_reg_1534 : STD_LOGIC_VECTOR (31 downto 0);
    signal cin_7_load_reg_1539 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_0_load_reg_1544 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_1_load_reg_1549 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_2_load_reg_1554 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_3_load_reg_1559 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_4_load_reg_1564 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_5_load_reg_1569 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_6_load_reg_1574 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_7_load_reg_1579 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_479_fu_1056_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_479_reg_1584 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal tmp_480_fu_1069_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_480_reg_1589 : STD_LOGIC_VECTOR (31 downto 0);
    signal cout_kernel_0_load_reg_1594 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal cout_kernel_1_load_reg_1599 : STD_LOGIC_VECTOR (31 downto 0);
    signal cout_kernel_2_load_reg_1604 : STD_LOGIC_VECTOR (31 downto 0);
    signal cout_kernel_3_load_reg_1609 : STD_LOGIC_VECTOR (31 downto 0);
    signal cout_kernel_4_load_reg_1614 : STD_LOGIC_VECTOR (31 downto 0);
    signal cout_kernel_5_load_reg_1619 : STD_LOGIC_VECTOR (31 downto 0);
    signal cout_kernel_6_load_reg_1624 : STD_LOGIC_VECTOR (31 downto 0);
    signal cout_kernel_7_load_reg_1629 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_659_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_347_reg_1634 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal tmp_481_fu_1082_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_481_reg_1639 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_655_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_348_reg_1644 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal o_reg_540 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_333_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_reg_552 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul4_reg_563 : STD_LOGIC_VECTOR (37 downto 0);
    signal phi_mul5_reg_575 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_reg_587 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul_reg_599 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_reg_611 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_622 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_reg_633 : STD_LOGIC_VECTOR (15 downto 0);
    signal q_reg_644 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal tmp_361_cast_fu_808_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_365_cast_fu_846_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_373_cast_fu_1034_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_377_cast_fu_1045_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal tmp_355_fu_696_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl_cast_fu_704_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_332_cast_fu_692_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_356_fu_708_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_545_fu_722_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_547_fu_786_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_546_fu_782_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_360_cast_fu_796_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_361_fu_803_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_550_fu_824_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_549_fu_820_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_364_cast_fu_834_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_365_fu_841_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond1_fu_875_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_869_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast4_mid2_cast_fu_910_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_913_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_341_fu_918_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_343_cast_fu_928_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_367_fu_931_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_shl_fu_944_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal q_cast3_fu_962_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_977_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_344_fu_983_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_558_fu_992_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_372_cast_fu_1010_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_376_cast_fu_1022_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1095_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1095_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1101_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond3_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_688_ap_start : STD_LOGIC;
    signal grp_fu_688_ap_done : STD_LOGIC;
    signal grp_fu_762_ap_start : STD_LOGIC;
    signal grp_fu_762_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (108 downto 0);
    signal grp_fu_1095_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1095_p10 : STD_LOGIC_VECTOR (31 downto 0);

    component top_kernel_fadd_3rcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_kernel_fmul_3sc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_kernel_udiv_3kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_kernel_mux_83tde IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_kernel_mul_muocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_kernel_mul_muudo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    top_kernel_fadd_3rcU_U95 : component top_kernel_fadd_3rcU
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_481_reg_1639,
        din1 => tmp_347_reg_1634,
        ce => ap_const_logic_1,
        dout => grp_fu_655_p2);

    top_kernel_fmul_3sc4_U96 : component top_kernel_fmul_3sc4
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_479_reg_1584,
        din1 => tmp_480_reg_1589,
        ce => ap_const_logic_1,
        dout => grp_fu_659_p2);

    top_kernel_udiv_3kbM_U97 : component top_kernel_udiv_3kbM
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_688_ap_start,
        done => grp_fu_688_ap_done,
        din0 => LAYER_IN_H_T,
        din1 => STRIDE,
        ce => ap_const_logic_1,
        dout => grp_fu_688_p2);

    top_kernel_udiv_3kbM_U98 : component top_kernel_udiv_3kbM
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_762_ap_start,
        done => grp_fu_762_ap_done,
        din0 => LAYER_IN_W_T,
        din1 => STRIDE,
        ce => ap_const_logic_1,
        dout => grp_fu_762_p2);

    top_kernel_mux_83tde_U99 : component top_kernel_mux_83tde
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => cin_0_load_reg_1504,
        din1 => cin_1_load_reg_1509,
        din2 => cin_2_load_reg_1514,
        din3 => cin_3_load_reg_1519,
        din4 => cin_4_load_reg_1524,
        din5 => cin_5_load_reg_1529,
        din6 => cin_6_load_reg_1534,
        din7 => cin_7_load_reg_1539,
        din8 => arrayNo_mid2_reg_1369,
        dout => tmp_479_fu_1056_p10);

    top_kernel_mux_83tde_U100 : component top_kernel_mux_83tde
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => weight_0_load_reg_1544,
        din1 => weight_1_load_reg_1549,
        din2 => weight_2_load_reg_1554,
        din3 => weight_3_load_reg_1559,
        din4 => weight_4_load_reg_1564,
        din5 => weight_5_load_reg_1569,
        din6 => weight_6_load_reg_1574,
        din7 => weight_7_load_reg_1579,
        din8 => arrayNo_mid2_reg_1369,
        dout => tmp_480_fu_1069_p10);

    top_kernel_mux_83tde_U101 : component top_kernel_mux_83tde
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => cout_kernel_0_load_reg_1594,
        din1 => cout_kernel_1_load_reg_1599,
        din2 => cout_kernel_2_load_reg_1604,
        din3 => cout_kernel_3_load_reg_1609,
        din4 => cout_kernel_4_load_reg_1614,
        din5 => cout_kernel_5_load_reg_1619,
        din6 => cout_kernel_6_load_reg_1624,
        din7 => cout_kernel_7_load_reg_1629,
        din8 => arrayNo1_reg_1188,
        dout => tmp_481_fu_1082_p10);

    top_kernel_mul_muocq_U102 : component top_kernel_mul_muocq
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1095_p0,
        din1 => grp_fu_1095_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1095_p2);

    top_kernel_mul_muudo_U103 : component top_kernel_mul_muudo
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 11,
        din1_WIDTH => 7,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_554_reg_1349,
        din1 => grp_fu_1101_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1101_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    h_reg_552_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_337_fu_771_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
                h_reg_552 <= h_9_reg_1206;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                h_reg_552 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_reg_622_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_966_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state85))) then 
                i_reg_622 <= arrayNo_mid2_v_v_reg_1334;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
                i_reg_622 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_611_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_966_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state85))) then 
                indvar_flatten_reg_611 <= indvar_flatten_next_reg_1322;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
                indvar_flatten_reg_611 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    o_reg_540_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_333_fu_751_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                o_reg_540 <= o_10_reg_1163;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                o_reg_540 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    p_reg_633_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_966_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state85))) then 
                p_reg_633 <= p_2_fu_1001_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
                p_reg_633 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    phi_mul4_reg_563_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_337_fu_771_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
                phi_mul4_reg_563 <= next_mul5_reg_1198;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                phi_mul4_reg_563 <= ap_const_lv38_0;
            end if; 
        end if;
    end process;

    phi_mul5_reg_575_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_337_fu_771_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
                phi_mul5_reg_575 <= next_mul4_reg_1193;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                phi_mul5_reg_575 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_599_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_858_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
                phi_mul_reg_599 <= next_mul_reg_1216;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                phi_mul_reg_599 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    q_reg_644_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
                q_reg_644 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
                q_reg_644 <= q_2_reg_1389;
            end if; 
        end if;
    end process;

    w_reg_587_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_858_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
                w_reg_587 <= w_9_reg_1224;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                w_reg_587 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                    arrayNo1_reg_1188(2 downto 0) <= arrayNo1_fu_736_p1(2 downto 0);
                    newIndex7_cast_reg_1182(12 downto 0) <= newIndex7_cast_fu_732_p1(12 downto 0);
                tmp_356_cast_reg_1173 <= tmp_356_cast_fu_714_p1;
                tmp_544_reg_1178 <= tmp_544_fu_718_p1;
                tmp_s_reg_1168 <= grp_fu_688_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then
                    arrayNo_mid2_reg_1369(2 downto 0) <= arrayNo_mid2_fu_956_p1(2 downto 0);
                    newIndex1_mid2_cast_reg_1375(12 downto 0) <= newIndex1_mid2_cast_fu_959_p1(12 downto 0);
                tmp_366_reg_1381 <= grp_fu_1101_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_858_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                arrayNo_mid2_v_v_reg_1334 <= arrayNo_mid2_v_v_fu_888_p3;
                p_mid2_reg_1327 <= p_mid2_fu_880_p3;
                tmp_552_reg_1339 <= tmp_552_fu_896_p1;
                tmp_553_reg_1344 <= arrayNo_mid2_v_v_fu_888_p3(15 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                bound_reg_1155 <= grp_fu_1095_p2;
                tmp_reg_1149 <= tmp_fu_671_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state89)) then
                cin_0_load_reg_1504 <= cin_0_q0;
                cin_1_load_reg_1509 <= cin_1_q0;
                cin_2_load_reg_1514 <= cin_2_q0;
                cin_3_load_reg_1519 <= cin_3_q0;
                cin_4_load_reg_1524 <= cin_4_q0;
                cin_5_load_reg_1529 <= cin_5_q0;
                cin_6_load_reg_1534 <= cin_6_q0;
                cin_7_load_reg_1539 <= cin_7_q0;
                weight_0_load_reg_1544 <= weight_0_q0;
                weight_1_load_reg_1549 <= weight_1_q0;
                weight_2_load_reg_1554 <= weight_2_q0;
                weight_3_load_reg_1559 <= weight_3_q0;
                weight_4_load_reg_1564 <= weight_4_q0;
                weight_5_load_reg_1569 <= weight_5_q0;
                weight_6_load_reg_1574 <= weight_6_q0;
                weight_7_load_reg_1579 <= weight_7_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then
                cout_kernel_0_addr_1_reg_1279 <= tmp_365_cast_fu_846_p1(13 - 1 downto 0);
                cout_kernel_1_addr_1_reg_1284 <= tmp_365_cast_fu_846_p1(13 - 1 downto 0);
                cout_kernel_2_addr_1_reg_1289 <= tmp_365_cast_fu_846_p1(13 - 1 downto 0);
                cout_kernel_3_addr_1_reg_1294 <= tmp_365_cast_fu_846_p1(13 - 1 downto 0);
                cout_kernel_4_addr_1_reg_1299 <= tmp_365_cast_fu_846_p1(13 - 1 downto 0);
                cout_kernel_5_addr_1_reg_1304 <= tmp_365_cast_fu_846_p1(13 - 1 downto 0);
                cout_kernel_6_addr_1_reg_1309 <= tmp_365_cast_fu_846_p1(13 - 1 downto 0);
                cout_kernel_7_addr_1_reg_1314 <= tmp_365_cast_fu_846_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then
                cout_kernel_0_addr_reg_1234 <= tmp_361_cast_fu_808_p1(13 - 1 downto 0);
                cout_kernel_1_addr_reg_1239 <= tmp_361_cast_fu_808_p1(13 - 1 downto 0);
                cout_kernel_2_addr_reg_1244 <= tmp_361_cast_fu_808_p1(13 - 1 downto 0);
                cout_kernel_3_addr_reg_1249 <= tmp_361_cast_fu_808_p1(13 - 1 downto 0);
                cout_kernel_4_addr_reg_1254 <= tmp_361_cast_fu_808_p1(13 - 1 downto 0);
                cout_kernel_5_addr_reg_1259 <= tmp_361_cast_fu_808_p1(13 - 1 downto 0);
                cout_kernel_6_addr_reg_1264 <= tmp_361_cast_fu_808_p1(13 - 1 downto 0);
                cout_kernel_7_addr_reg_1269 <= tmp_361_cast_fu_808_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state96)) then
                cout_kernel_0_load_reg_1594 <= cout_kernel_0_q0;
                cout_kernel_1_load_reg_1599 <= cout_kernel_1_q0;
                cout_kernel_2_load_reg_1604 <= cout_kernel_2_q0;
                cout_kernel_3_load_reg_1609 <= cout_kernel_3_q0;
                cout_kernel_4_load_reg_1614 <= cout_kernel_4_q0;
                cout_kernel_5_load_reg_1619 <= cout_kernel_5_q0;
                cout_kernel_6_load_reg_1624 <= cout_kernel_6_q0;
                cout_kernel_7_load_reg_1629 <= cout_kernel_7_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                h_9_reg_1206 <= h_9_fu_756_p2;
                next_mul4_reg_1193 <= next_mul4_fu_740_p2;
                next_mul5_reg_1198 <= next_mul5_fu_745_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state80)) then
                indvar_flatten_next_reg_1322 <= indvar_flatten_next_fu_863_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then
                next_mul_reg_1216 <= next_mul_fu_766_p2;
                w_9_reg_1224 <= w_9_fu_776_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                o_10_reg_1163 <= o_10_fu_682_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state85)) then
                q_2_reg_1389 <= q_2_fu_971_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then
                tmp_334_reg_1211 <= grp_fu_762_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state97)) then
                tmp_347_reg_1634 <= grp_fu_659_p2;
                tmp_481_reg_1639 <= tmp_481_fu_1082_p10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state108)) then
                tmp_348_reg_1644 <= grp_fu_655_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state82)) then
                tmp_369_reg_1364 <= tmp_369_fu_951_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state86)) then
                tmp_370_reg_1409 <= tmp_370_fu_1006_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state87)) then
                tmp_373_reg_1414 <= tmp_373_fu_1017_p2;
                tmp_377_reg_1419 <= tmp_377_fu_1029_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_966_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state85))) then
                tmp_374_reg_1399 <= tmp_374_fu_996_p2;
                tmp_557_reg_1394 <= tmp_557_fu_988_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state90)) then
                tmp_479_reg_1584 <= tmp_479_fu_1056_p10;
                tmp_480_reg_1589 <= tmp_480_fu_1069_p10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_337_fu_771_p2 = ap_const_lv1_1) and (init_read_read_fu_166_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                tmp_548_reg_1229 <= tmp_548_fu_790_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                tmp_551_reg_1274 <= tmp_551_fu_828_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state81)) then
                tmp_554_reg_1349 <= tmp_554_fu_924_p1;
                tmp_555_reg_1354 <= tmp_555_fu_936_p1;
                tmp_556_reg_1359 <= tmp_556_fu_940_p1;
            end if;
        end if;
    end process;
    newIndex7_cast_reg_1182(13) <= '0';
    arrayNo1_reg_1188(31 downto 3) <= "00000000000000000000000000000";
    arrayNo_mid2_reg_1369(31 downto 3) <= "00000000000000000000000000000";
    newIndex1_mid2_cast_reg_1375(13) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, init_read_read_fu_166_p2, ap_CS_fsm_state4, ap_CS_fsm_state40, ap_CS_fsm_state76, tmp_337_fu_771_p2, ap_CS_fsm_state80, exitcond_flatten_fu_858_p2, ap_CS_fsm_state85, exitcond_fu_966_p2, tmp_333_fu_751_p2, exitcond3_fu_677_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((exitcond3_fu_677_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if (((tmp_333_fu_751_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                if (((tmp_337_fu_771_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                elsif (((tmp_337_fu_771_p2 = ap_const_lv1_1) and (init_read_read_fu_166_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state77;
                end if;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                if (((exitcond_flatten_fu_858_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_state81;
                end if;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                if (((exitcond_fu_966_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state85))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_state86;
                end if;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state108 <= ap_CS_fsm(107);
    ap_CS_fsm_state109 <= ap_CS_fsm(108);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, exitcond3_fu_677_p2)
    begin
        if ((((exitcond3_fu_677_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, exitcond3_fu_677_p2)
    begin
        if (((exitcond3_fu_677_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    arrayNo1_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_544_fu_718_p1),32));
    arrayNo_mid2_fu_956_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_552_reg_1339),32));
    arrayNo_mid2_v_v_fu_888_p3 <= 
        i_2_fu_869_p2 when (exitcond1_fu_875_p2(0) = '1') else 
        i_reg_622;
    cin_0_address0 <= tmp_373_cast_fu_1034_p1(13 - 1 downto 0);

    cin_0_ce0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            cin_0_ce0 <= ap_const_logic_1;
        else 
            cin_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cin_1_address0 <= tmp_373_cast_fu_1034_p1(13 - 1 downto 0);

    cin_1_ce0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            cin_1_ce0 <= ap_const_logic_1;
        else 
            cin_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cin_2_address0 <= tmp_373_cast_fu_1034_p1(13 - 1 downto 0);

    cin_2_ce0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            cin_2_ce0 <= ap_const_logic_1;
        else 
            cin_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cin_3_address0 <= tmp_373_cast_fu_1034_p1(13 - 1 downto 0);

    cin_3_ce0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            cin_3_ce0 <= ap_const_logic_1;
        else 
            cin_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cin_4_address0 <= tmp_373_cast_fu_1034_p1(13 - 1 downto 0);

    cin_4_ce0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            cin_4_ce0 <= ap_const_logic_1;
        else 
            cin_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cin_5_address0 <= tmp_373_cast_fu_1034_p1(13 - 1 downto 0);

    cin_5_ce0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            cin_5_ce0 <= ap_const_logic_1;
        else 
            cin_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cin_6_address0 <= tmp_373_cast_fu_1034_p1(13 - 1 downto 0);

    cin_6_ce0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            cin_6_ce0 <= ap_const_logic_1;
        else 
            cin_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cin_7_address0 <= tmp_373_cast_fu_1034_p1(13 - 1 downto 0);

    cin_7_ce0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            cin_7_ce0 <= ap_const_logic_1;
        else 
            cin_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cout_kernel_0_address0_assign_proc : process(cout_kernel_0_addr_reg_1234, ap_CS_fsm_state78, cout_kernel_0_addr_1_reg_1279, ap_CS_fsm_state109, ap_CS_fsm_state95)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state109))) then 
            cout_kernel_0_address0 <= cout_kernel_0_addr_1_reg_1279;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            cout_kernel_0_address0 <= cout_kernel_0_addr_reg_1234;
        else 
            cout_kernel_0_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    cout_kernel_0_ce0_assign_proc : process(ap_CS_fsm_state78, ap_CS_fsm_state109, ap_CS_fsm_state95)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            cout_kernel_0_ce0 <= ap_const_logic_1;
        else 
            cout_kernel_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cout_kernel_0_d0_assign_proc : process(ap_CS_fsm_state78, tmp_348_reg_1644, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            cout_kernel_0_d0 <= tmp_348_reg_1644;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            cout_kernel_0_d0 <= ap_const_lv32_0;
        else 
            cout_kernel_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    cout_kernel_0_we0_assign_proc : process(init_read_read_fu_166_p2, tmp_544_reg_1178, ap_CS_fsm_state78, ap_CS_fsm_state109)
    begin
        if ((((tmp_544_reg_1178 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state109)) or ((tmp_544_reg_1178 = ap_const_lv3_0) and (init_read_read_fu_166_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state78)))) then 
            cout_kernel_0_we0 <= ap_const_logic_1;
        else 
            cout_kernel_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cout_kernel_1_address0_assign_proc : process(cout_kernel_1_addr_reg_1239, ap_CS_fsm_state78, cout_kernel_1_addr_1_reg_1284, ap_CS_fsm_state109, ap_CS_fsm_state95)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state109))) then 
            cout_kernel_1_address0 <= cout_kernel_1_addr_1_reg_1284;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            cout_kernel_1_address0 <= cout_kernel_1_addr_reg_1239;
        else 
            cout_kernel_1_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    cout_kernel_1_ce0_assign_proc : process(ap_CS_fsm_state78, ap_CS_fsm_state109, ap_CS_fsm_state95)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            cout_kernel_1_ce0 <= ap_const_logic_1;
        else 
            cout_kernel_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cout_kernel_1_d0_assign_proc : process(ap_CS_fsm_state78, tmp_348_reg_1644, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            cout_kernel_1_d0 <= tmp_348_reg_1644;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            cout_kernel_1_d0 <= ap_const_lv32_0;
        else 
            cout_kernel_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    cout_kernel_1_we0_assign_proc : process(init_read_read_fu_166_p2, tmp_544_reg_1178, ap_CS_fsm_state78, ap_CS_fsm_state109)
    begin
        if ((((tmp_544_reg_1178 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state109)) or ((tmp_544_reg_1178 = ap_const_lv3_1) and (init_read_read_fu_166_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state78)))) then 
            cout_kernel_1_we0 <= ap_const_logic_1;
        else 
            cout_kernel_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cout_kernel_2_address0_assign_proc : process(cout_kernel_2_addr_reg_1244, ap_CS_fsm_state78, cout_kernel_2_addr_1_reg_1289, ap_CS_fsm_state109, ap_CS_fsm_state95)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state109))) then 
            cout_kernel_2_address0 <= cout_kernel_2_addr_1_reg_1289;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            cout_kernel_2_address0 <= cout_kernel_2_addr_reg_1244;
        else 
            cout_kernel_2_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    cout_kernel_2_ce0_assign_proc : process(ap_CS_fsm_state78, ap_CS_fsm_state109, ap_CS_fsm_state95)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            cout_kernel_2_ce0 <= ap_const_logic_1;
        else 
            cout_kernel_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cout_kernel_2_d0_assign_proc : process(ap_CS_fsm_state78, tmp_348_reg_1644, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            cout_kernel_2_d0 <= tmp_348_reg_1644;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            cout_kernel_2_d0 <= ap_const_lv32_0;
        else 
            cout_kernel_2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    cout_kernel_2_we0_assign_proc : process(init_read_read_fu_166_p2, tmp_544_reg_1178, ap_CS_fsm_state78, ap_CS_fsm_state109)
    begin
        if ((((tmp_544_reg_1178 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state109)) or ((tmp_544_reg_1178 = ap_const_lv3_2) and (init_read_read_fu_166_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state78)))) then 
            cout_kernel_2_we0 <= ap_const_logic_1;
        else 
            cout_kernel_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cout_kernel_3_address0_assign_proc : process(cout_kernel_3_addr_reg_1249, ap_CS_fsm_state78, cout_kernel_3_addr_1_reg_1294, ap_CS_fsm_state109, ap_CS_fsm_state95)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state109))) then 
            cout_kernel_3_address0 <= cout_kernel_3_addr_1_reg_1294;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            cout_kernel_3_address0 <= cout_kernel_3_addr_reg_1249;
        else 
            cout_kernel_3_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    cout_kernel_3_ce0_assign_proc : process(ap_CS_fsm_state78, ap_CS_fsm_state109, ap_CS_fsm_state95)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            cout_kernel_3_ce0 <= ap_const_logic_1;
        else 
            cout_kernel_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cout_kernel_3_d0_assign_proc : process(ap_CS_fsm_state78, tmp_348_reg_1644, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            cout_kernel_3_d0 <= tmp_348_reg_1644;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            cout_kernel_3_d0 <= ap_const_lv32_0;
        else 
            cout_kernel_3_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    cout_kernel_3_we0_assign_proc : process(init_read_read_fu_166_p2, tmp_544_reg_1178, ap_CS_fsm_state78, ap_CS_fsm_state109)
    begin
        if ((((tmp_544_reg_1178 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state109)) or ((tmp_544_reg_1178 = ap_const_lv3_3) and (init_read_read_fu_166_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state78)))) then 
            cout_kernel_3_we0 <= ap_const_logic_1;
        else 
            cout_kernel_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cout_kernel_4_address0_assign_proc : process(cout_kernel_4_addr_reg_1254, ap_CS_fsm_state78, cout_kernel_4_addr_1_reg_1299, ap_CS_fsm_state109, ap_CS_fsm_state95)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state109))) then 
            cout_kernel_4_address0 <= cout_kernel_4_addr_1_reg_1299;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            cout_kernel_4_address0 <= cout_kernel_4_addr_reg_1254;
        else 
            cout_kernel_4_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    cout_kernel_4_ce0_assign_proc : process(ap_CS_fsm_state78, ap_CS_fsm_state109, ap_CS_fsm_state95)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            cout_kernel_4_ce0 <= ap_const_logic_1;
        else 
            cout_kernel_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cout_kernel_4_d0_assign_proc : process(ap_CS_fsm_state78, tmp_348_reg_1644, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            cout_kernel_4_d0 <= tmp_348_reg_1644;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            cout_kernel_4_d0 <= ap_const_lv32_0;
        else 
            cout_kernel_4_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    cout_kernel_4_we0_assign_proc : process(init_read_read_fu_166_p2, tmp_544_reg_1178, ap_CS_fsm_state78, ap_CS_fsm_state109)
    begin
        if ((((tmp_544_reg_1178 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state109)) or ((tmp_544_reg_1178 = ap_const_lv3_4) and (init_read_read_fu_166_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state78)))) then 
            cout_kernel_4_we0 <= ap_const_logic_1;
        else 
            cout_kernel_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cout_kernel_5_address0_assign_proc : process(cout_kernel_5_addr_reg_1259, ap_CS_fsm_state78, cout_kernel_5_addr_1_reg_1304, ap_CS_fsm_state109, ap_CS_fsm_state95)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state109))) then 
            cout_kernel_5_address0 <= cout_kernel_5_addr_1_reg_1304;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            cout_kernel_5_address0 <= cout_kernel_5_addr_reg_1259;
        else 
            cout_kernel_5_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    cout_kernel_5_ce0_assign_proc : process(ap_CS_fsm_state78, ap_CS_fsm_state109, ap_CS_fsm_state95)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            cout_kernel_5_ce0 <= ap_const_logic_1;
        else 
            cout_kernel_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cout_kernel_5_d0_assign_proc : process(ap_CS_fsm_state78, tmp_348_reg_1644, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            cout_kernel_5_d0 <= tmp_348_reg_1644;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            cout_kernel_5_d0 <= ap_const_lv32_0;
        else 
            cout_kernel_5_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    cout_kernel_5_we0_assign_proc : process(init_read_read_fu_166_p2, tmp_544_reg_1178, ap_CS_fsm_state78, ap_CS_fsm_state109)
    begin
        if ((((tmp_544_reg_1178 = ap_const_lv3_5) and (ap_const_logic_1 = ap_CS_fsm_state109)) or ((tmp_544_reg_1178 = ap_const_lv3_5) and (init_read_read_fu_166_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state78)))) then 
            cout_kernel_5_we0 <= ap_const_logic_1;
        else 
            cout_kernel_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cout_kernel_6_address0_assign_proc : process(cout_kernel_6_addr_reg_1264, ap_CS_fsm_state78, cout_kernel_6_addr_1_reg_1309, ap_CS_fsm_state109, ap_CS_fsm_state95)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state109))) then 
            cout_kernel_6_address0 <= cout_kernel_6_addr_1_reg_1309;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            cout_kernel_6_address0 <= cout_kernel_6_addr_reg_1264;
        else 
            cout_kernel_6_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    cout_kernel_6_ce0_assign_proc : process(ap_CS_fsm_state78, ap_CS_fsm_state109, ap_CS_fsm_state95)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            cout_kernel_6_ce0 <= ap_const_logic_1;
        else 
            cout_kernel_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cout_kernel_6_d0_assign_proc : process(ap_CS_fsm_state78, tmp_348_reg_1644, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            cout_kernel_6_d0 <= tmp_348_reg_1644;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            cout_kernel_6_d0 <= ap_const_lv32_0;
        else 
            cout_kernel_6_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    cout_kernel_6_we0_assign_proc : process(init_read_read_fu_166_p2, tmp_544_reg_1178, ap_CS_fsm_state78, ap_CS_fsm_state109)
    begin
        if ((((tmp_544_reg_1178 = ap_const_lv3_6) and (ap_const_logic_1 = ap_CS_fsm_state109)) or ((tmp_544_reg_1178 = ap_const_lv3_6) and (init_read_read_fu_166_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state78)))) then 
            cout_kernel_6_we0 <= ap_const_logic_1;
        else 
            cout_kernel_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    cout_kernel_7_address0_assign_proc : process(cout_kernel_7_addr_reg_1269, ap_CS_fsm_state78, cout_kernel_7_addr_1_reg_1314, ap_CS_fsm_state109, ap_CS_fsm_state95)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state109))) then 
            cout_kernel_7_address0 <= cout_kernel_7_addr_1_reg_1314;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            cout_kernel_7_address0 <= cout_kernel_7_addr_reg_1269;
        else 
            cout_kernel_7_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    cout_kernel_7_ce0_assign_proc : process(ap_CS_fsm_state78, ap_CS_fsm_state109, ap_CS_fsm_state95)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state78))) then 
            cout_kernel_7_ce0 <= ap_const_logic_1;
        else 
            cout_kernel_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cout_kernel_7_d0_assign_proc : process(ap_CS_fsm_state78, tmp_348_reg_1644, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            cout_kernel_7_d0 <= tmp_348_reg_1644;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            cout_kernel_7_d0 <= ap_const_lv32_0;
        else 
            cout_kernel_7_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    cout_kernel_7_we0_assign_proc : process(init_read_read_fu_166_p2, tmp_544_reg_1178, ap_CS_fsm_state78, ap_CS_fsm_state109)
    begin
        if ((((tmp_544_reg_1178 = ap_const_lv3_7) and (ap_const_logic_1 = ap_CS_fsm_state109)) or ((tmp_544_reg_1178 = ap_const_lv3_7) and (init_read_read_fu_166_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state78)))) then 
            cout_kernel_7_we0 <= ap_const_logic_1;
        else 
            cout_kernel_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_875_p2 <= "1" when (p_reg_633 = FILTER_S) else "0";
    exitcond3_fu_677_p2 <= "1" when (o_reg_540 = LAYER_OUT_NUM_T) else "0";
    exitcond_flatten_fu_858_p2 <= "1" when (indvar_flatten_reg_611 = bound_reg_1155) else "0";
    exitcond_fu_966_p2 <= "1" when (q_reg_644 = FILTER_S) else "0";
    grp_fu_1095_p0 <= grp_fu_1095_p00(16 - 1 downto 0);
    grp_fu_1095_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(FILTER_S),32));
    grp_fu_1095_p1 <= grp_fu_1095_p10(16 - 1 downto 0);
    grp_fu_1095_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(LAYER_IN_NUM_T),32));
    grp_fu_1101_p1 <= ap_const_lv11_36(7 - 1 downto 0);

    grp_fu_688_ap_start_assign_proc : process(ap_CS_fsm_state4, exitcond3_fu_677_p2)
    begin
        if (((exitcond3_fu_677_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_fu_688_ap_start <= ap_const_logic_1;
        else 
            grp_fu_688_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_762_ap_start_assign_proc : process(ap_CS_fsm_state40, tmp_333_fu_751_p2)
    begin
        if (((tmp_333_fu_751_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            grp_fu_762_ap_start <= ap_const_logic_1;
        else 
            grp_fu_762_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    h_9_fu_756_p2 <= std_logic_vector(unsigned(h_reg_552) + unsigned(ap_const_lv32_1));
    i_2_fu_869_p2 <= std_logic_vector(unsigned(i_reg_622) + unsigned(ap_const_lv16_1));
    indvar_flatten_next_fu_863_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_611) + unsigned(ap_const_lv32_1));
    init_read_read_fu_166_p2 <= (0=>init, others=>'-');
    newIndex1_mid2_cast_fu_959_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_553_reg_1344),14));
    newIndex7_cast_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_545_fu_722_p4),14));
    next_mul4_fu_740_p2 <= std_logic_vector(unsigned(phi_mul5_reg_575) + unsigned(STRIDE));
    next_mul5_fu_745_p2 <= std_logic_vector(unsigned(phi_mul4_reg_563) + unsigned(ap_const_lv38_34));
    next_mul_fu_766_p2 <= std_logic_vector(unsigned(phi_mul_reg_599) + unsigned(STRIDE));
    o_10_fu_682_p2 <= std_logic_vector(unsigned(o_reg_540) + unsigned(ap_const_lv16_1));
    p_2_fu_1001_p2 <= std_logic_vector(unsigned(p_mid2_reg_1327) + unsigned(ap_const_lv16_1));
    p_cast4_mid2_cast_fu_910_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid2_reg_1327),32));
    p_mid2_fu_880_p3 <= 
        ap_const_lv16_0 when (exitcond1_fu_875_p2(0) = '1') else 
        p_reg_633;
    p_shl_cast_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_355_fu_696_p3),19));
    p_shl_fu_944_p3 <= (tmp_556_reg_1359 & ap_const_lv2_0);
    q_2_fu_971_p2 <= std_logic_vector(unsigned(q_reg_644) + unsigned(ap_const_lv16_1));
    q_cast3_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(q_reg_644),32));
    tmp1_fu_913_p2 <= std_logic_vector(unsigned(tmp_reg_1149) + unsigned(p_cast4_mid2_cast_fu_910_p1));
    tmp2_fu_977_p2 <= std_logic_vector(unsigned(q_cast3_fu_962_p1) + unsigned(phi_mul_reg_599));
    tmp_332_cast_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_reg_540),19));
    tmp_333_fu_751_p2 <= "1" when (unsigned(h_reg_552) < unsigned(tmp_s_reg_1168)) else "0";
    tmp_337_fu_771_p2 <= "1" when (unsigned(w_reg_587) < unsigned(tmp_334_reg_1211)) else "0";
    tmp_341_fu_918_p2 <= std_logic_vector(unsigned(tmp1_fu_913_p2) + unsigned(phi_mul5_reg_575));
    tmp_343_cast_fu_928_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid2_reg_1327),20));
    tmp_344_fu_983_p2 <= std_logic_vector(unsigned(tmp_reg_1149) + unsigned(tmp2_fu_977_p2));
    tmp_355_fu_696_p3 <= (o_reg_540 & ap_const_lv2_0);
        tmp_356_cast_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_356_fu_708_p2),20));

    tmp_356_fu_708_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_704_p1) - unsigned(tmp_332_cast_fu_692_p1));
    tmp_360_cast_fu_796_p3 <= (tmp_548_reg_1229 & ap_const_lv3_0);
    tmp_361_cast_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_361_fu_803_p2),64));
    tmp_361_fu_803_p2 <= std_logic_vector(unsigned(tmp_360_cast_fu_796_p3) + unsigned(newIndex7_cast_reg_1182));
    tmp_364_cast_fu_834_p3 <= (tmp_551_reg_1274 & ap_const_lv3_0);
    tmp_365_cast_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_365_fu_841_p2),64));
    tmp_365_fu_841_p2 <= std_logic_vector(unsigned(tmp_364_cast_fu_834_p3) + unsigned(newIndex7_cast_reg_1182));
    tmp_367_fu_931_p2 <= std_logic_vector(unsigned(tmp_343_cast_fu_928_p1) + unsigned(tmp_356_cast_reg_1173));
    tmp_369_fu_951_p2 <= std_logic_vector(unsigned(p_shl_fu_944_p3) - unsigned(tmp_555_reg_1354));
    tmp_370_fu_1006_p2 <= std_logic_vector(signed(tmp_366_reg_1381) + signed(tmp_557_reg_1394));
    tmp_372_cast_fu_1010_p3 <= (tmp_370_reg_1409 & ap_const_lv3_0);
    tmp_373_cast_fu_1034_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_373_reg_1414),64));
    tmp_373_fu_1017_p2 <= std_logic_vector(unsigned(tmp_372_cast_fu_1010_p3) + unsigned(newIndex1_mid2_cast_reg_1375));
    tmp_374_fu_996_p2 <= std_logic_vector(unsigned(tmp_369_reg_1364) + unsigned(tmp_558_fu_992_p1));
    tmp_376_cast_fu_1022_p3 <= (tmp_374_reg_1399 & ap_const_lv3_0);
    tmp_377_cast_fu_1045_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_377_reg_1419),64));
    tmp_377_fu_1029_p2 <= std_logic_vector(unsigned(tmp_376_cast_fu_1022_p3) + unsigned(newIndex1_mid2_cast_reg_1375));
    tmp_544_fu_718_p1 <= o_reg_540(3 - 1 downto 0);
    tmp_545_fu_722_p4 <= o_reg_540(15 downto 3);
    tmp_546_fu_782_p1 <= w_reg_587(11 - 1 downto 0);
    tmp_547_fu_786_p1 <= phi_mul4_reg_563(11 - 1 downto 0);
    tmp_548_fu_790_p2 <= std_logic_vector(unsigned(tmp_547_fu_786_p1) + unsigned(tmp_546_fu_782_p1));
    tmp_549_fu_820_p1 <= w_reg_587(11 - 1 downto 0);
    tmp_550_fu_824_p1 <= phi_mul4_reg_563(11 - 1 downto 0);
    tmp_551_fu_828_p2 <= std_logic_vector(unsigned(tmp_550_fu_824_p1) + unsigned(tmp_549_fu_820_p1));
    tmp_552_fu_896_p1 <= arrayNo_mid2_v_v_fu_888_p3(3 - 1 downto 0);
    tmp_554_fu_924_p1 <= tmp_341_fu_918_p2(11 - 1 downto 0);
    tmp_555_fu_936_p1 <= tmp_367_fu_931_p2(11 - 1 downto 0);
    tmp_556_fu_940_p1 <= tmp_367_fu_931_p2(9 - 1 downto 0);
    tmp_557_fu_988_p1 <= tmp_344_fu_983_p2(11 - 1 downto 0);
    tmp_558_fu_992_p1 <= q_reg_644(11 - 1 downto 0);
    tmp_fu_671_p2 <= std_logic_vector(unsigned(STRIDE) + unsigned(ap_const_lv32_FFFFFFFF));
    w_9_fu_776_p2 <= std_logic_vector(unsigned(w_reg_587) + unsigned(ap_const_lv32_1));
    weight_0_address0 <= tmp_377_cast_fu_1045_p1(13 - 1 downto 0);

    weight_0_ce0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            weight_0_ce0 <= ap_const_logic_1;
        else 
            weight_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_1_address0 <= tmp_377_cast_fu_1045_p1(13 - 1 downto 0);

    weight_1_ce0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            weight_1_ce0 <= ap_const_logic_1;
        else 
            weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_2_address0 <= tmp_377_cast_fu_1045_p1(13 - 1 downto 0);

    weight_2_ce0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            weight_2_ce0 <= ap_const_logic_1;
        else 
            weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_3_address0 <= tmp_377_cast_fu_1045_p1(13 - 1 downto 0);

    weight_3_ce0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            weight_3_ce0 <= ap_const_logic_1;
        else 
            weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_4_address0 <= tmp_377_cast_fu_1045_p1(13 - 1 downto 0);

    weight_4_ce0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            weight_4_ce0 <= ap_const_logic_1;
        else 
            weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_5_address0 <= tmp_377_cast_fu_1045_p1(13 - 1 downto 0);

    weight_5_ce0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            weight_5_ce0 <= ap_const_logic_1;
        else 
            weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_6_address0 <= tmp_377_cast_fu_1045_p1(13 - 1 downto 0);

    weight_6_ce0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            weight_6_ce0 <= ap_const_logic_1;
        else 
            weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_7_address0 <= tmp_377_cast_fu_1045_p1(13 - 1 downto 0);

    weight_7_ce0_assign_proc : process(ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            weight_7_ce0 <= ap_const_logic_1;
        else 
            weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
